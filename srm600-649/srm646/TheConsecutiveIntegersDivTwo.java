import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TheConsecutiveIntegersDivTwo
{
	public int find(int[] numbers, int k)
	{
		if (k == 1) {
            return 0;
        }
        int n = numbers.length;
        int ret = Integer.MAX_VALUE;
        Arrays.sort(numbers);
        for (int i = 0; i < n - 1; i++) {
            if (numbers[i] == numbers[i + 1] - 1) {
                return 0;
            } else if (numbers[i] == numbers[i + 1]) {
                ret = 1;
            } else {
                ret = Math.min(ret, Math.abs(numbers[i] - numbers[i + 1]) - 1);
            }
        }
        return ret;
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		TheConsecutiveIntegersDivTwo obj;
		int answer;
		obj = new TheConsecutiveIntegersDivTwo();
		long startTime = System.currentTimeMillis();
		answer = obj.find(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new int[]{4,47,7};
		p1 = 2;
		p2 = 2;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{1,100};
		p1 = 1;
		p2 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{-96,-53,82,-24,6,-75};
		p1 = 2;
		p2 = 20;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{64,-31,-56};
		p1 = 2;
		p2 = 24;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// John and Brus have a set of integers.
	// You are given its elements in a int[] numbers.
	// They can change the integers in numbers by performing some operations.
	// In each operation John will pick a number and Brus will either increase or decrease it by 1.
	// 
	// 
	// You are also given an int k which is either 1 or 2.
	// John and Brus want to have at least k integers with consecutive values in their set.
	// Compute and return the smallest number of operations they have to perform.
	// 
	// 
	// DEFINITION
	// Class:TheConsecutiveIntegersDivTwo
	// Method:find
	// Parameters:int[], int
	// Returns:int
	// Method signature:int find(int[] numbers, int k)
	// 
	// 
	// CONSTRAINTS
	// -numbers will contain between 2 and 47 elements, inclusive.
	// -Each element of numbers will be between -10,000,000 and 10,000,000, inclusive.
	// -All elements of numbers will be distinct.
	// -k will be between 1 and 2, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {4, 47, 7}
	// 2
	// 
	// Returns: 2
	// 
	// There are three optimal strategies:
	// 
	// Increase 4 two times to obtain {6,47,7}.
	// Decrease 7 two times to obtain {4,47,5}.
	// Increase 4 and decrease 7 to obtain {5,47,6}.
	// 
	// Note that the consecutive values can appear anywhere in the set, their position in numbers does not matter.
	// 
	// 1)
	// {1, 100}
	// 1
	// 
	// Returns: 0
	// 
	// No operation is needed.
	// 
	// 2)
	// {-96, -53, 82, -24, 6, -75}
	// 2
	// 
	// Returns: 20
	// 
	// 
	// 
	// 3)
	// {64, -31, -56}
	// 2
	// 
	// Returns: 24
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
