import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TaroJiroDividing
{
	public int getNumber(int A, int B)
	{
		HashSet<Integer> sa = new HashSet<Integer>();
		HashSet<Integer> sb = new HashSet<Integer>();
		while (A != 0 && (A & 1) == 0) {
			sa.add(A);
			A >>= 1;
		}
		sa.add(A);
		while (B != 0 && (B & 1) == 0) {
			sb.add(B);
			B >>= 1;
		}
		sb.add(B);
		sa.retainAll(sb);
		return sa.size();
	}

	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		TaroJiroDividing obj;
		int answer;
		obj = new TaroJiroDividing();
		long startTime = System.currentTimeMillis();
		answer = obj.getNumber(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		p0 = 8;
		p1 = 4;
		p2 = 3;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 4;
		p1 = 7;
		p2 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 12;
		p1 = 12;
		p2 = 3;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 24;
		p1 = 96;
		p2 = 4;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 1000000000;
		p1 = 999999999;
		p2 = 0;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// The dividing game is played as follows:
	// You start by taking a clean sheet of paper and writing down some positive integer.
	// Then you repeat the following process:
	// Let X be the last integer you wrote.
	// If X is odd, the game ends.
	// Otherwise, divide X by 2 and write down the result.
	// 
	// 
	// 
	// 
	// For example, if you start the game by writing 12 you will then write 12/2 = 6, followed by 6/2 = 3, and as 3 is odd, the game ends there.
	// Your paper now contains the numbers 12, 6, and 3.
	// 
	// 
	// 
	// 
	// Cat Taro has just played the game starting with the integer A.
	// Jiro has also played the game but he started with the integer B.
	// You are given the ints A and B.
	// Return the number of integers that were written both by Taro and by Jiro.
	// 
	// 
	// DEFINITION
	// Class:TaroJiroDividing
	// Method:getNumber
	// Parameters:int, int
	// Returns:int
	// Method signature:int getNumber(int A, int B)
	// 
	// 
	// CONSTRAINTS
	// -A and B will be between 1 and 1,000,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 8
	// 4
	// 
	// Returns: 3
	// 
	// Taro will write the integers {8,4,2,1}. Jiro will write {4,2,1}. The three integers written by both of them are 4, 2, and 1.
	// 
	// 1)
	// 4
	// 7
	// 
	// Returns: 0
	// 
	// 
	// 
	// 2)
	// 12
	// 12
	// 
	// Returns: 3
	// 
	// 
	// 
	// 3)
	// 24
	// 96
	// 
	// Returns: 4
	// 
	// 
	// 
	// 4)
	// 1000000000
	// 999999999
	// 
	// Returns: 0
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
