import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class PeacefulLine
{
	public String makeLine(int[] x)
	{
		int[] count = new int[30];
        for (int i : x) {
            count[i]++;
        }
        for (int c : count) {
            if (c > (x.length + 1) / 2) {
                return "impossible";
            }
        }
        return "possible";
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		PeacefulLine obj;
		String answer;
		obj = new PeacefulLine();
		long startTime = System.currentTimeMillis();
		answer = obj.makeLine(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		String p1;
		
		// ----- test 0 -----
		p0 = new int[]{1,2,3,4};
		p1 = "possible";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{1,1,1,2};
		p1 = "impossible";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{1,1,2,2,3,3,4,4};
		p1 = "possible";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{3,3,3,3,13,13,13,13};
		p1 = "possible";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{3,7,7,7,3,7,7,7,3};
		p1 = "impossible";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{25,12,3,25,25,12,12,12,12,3,25};
		p1 = "possible";
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = new int[]{3,3,3,3,13,13,13,13,3};
		p1 = "possible";
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// A teacher is trying to arrange a group of students into a line.
	// The teacher knows that whenever she places two students with the same age next to each other, they will talk and disturb everyone.
	// She wants to avoid that.
	// 
	// 
	// 
	// You are given a int[] x.
	// Each element of x is the age of one of the students.
	// 
	// 
	// 
	// Determine whether it is possible for the teacher to arrange the students in a line so that there are no disturbances.
	// If it can be done, return "possible" (quotes for clarity).
	// If there will always be some pair of adjacent students with the same age, return "impossible".
	// Note that the return value is case-sensitive.
	// 
	// 
	// DEFINITION
	// Class:PeacefulLine
	// Method:makeLine
	// Parameters:int[]
	// Returns:String
	// Method signature:String makeLine(int[] x)
	// 
	// 
	// CONSTRAINTS
	// -x will have between 1 and 25 elements, inclusive.
	// -Each element of x will be between 1 and 25, inclusive. 
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1,2,3,4}
	// 
	// Returns: "possible"
	// 
	// In this case, no two students have the same age so any order works.
	// 
	// 1)
	// {1,1,1,2}
	// 
	// Returns: "impossible"
	// 
	// Regardless of which order we choose, two of the 1s will always be adjacent.
	// 
	// 2)
	// {1,1,2,2,3,3,4,4}
	// 
	// Returns: "possible"
	// 
	// One example of a peaceful line is {1,2,3,4,1,2,3,4}
	// 
	// 3)
	// {3,3,3,3,13,13,13,13}
	// 
	// Returns: "possible"
	// 
	// 
	// 
	// 4)
	// {3,7,7,7,3,7,7,7,3}
	// 
	// Returns: "impossible"
	// 
	// 
	// 
	// 5)
	// {25,12,3,25,25,12,12,12,12,3,25}
	// 
	// Returns: "possible"
	// 
	// 
	// 
	// 6)
	// {3,3,3,3,13,13,13,13,3}
	// 
	// Returns: "possible"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
