import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class RandomGraph {
    public double probability(int n, int p) {
        double q = p; q /= 1000;
        // f[]   probability of graph only have component smaller than 4
        double[] f = new double[55];
        for (int k = 0; k < 4; ++k) {
            f[k] = 1;
        }
        for (int k = 4; k <= n; ++k) {
            f[k] = f[k - 1] * Math.pow(1 - q, k - 1);
            f[k] += f[k - 2] * Math.pow(1 - q, 2 * k - 4) * q * (k - 1);
            f[k] += f[k - 3] * Math.pow(1 - q, 3 * k - 9) * q * q * (3 - 2 * q) * (k - 1) * (k - 2) * 0.5;
        }
        return 1 - f[n];
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, double p2) {
        System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
        System.out.println("]");
        RandomGraph obj;
        double answer;
        obj = new RandomGraph();
        long startTime = System.currentTimeMillis();
        answer = obj.probability(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p2);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == answer && Math.abs(p2 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p2));
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int p0;
        int p1;
        double p2;

        // ----- test 0 -----
        p0 = 7;
        p1 = 0;
        p2 = 0.0D;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 3;
        p1 = 620;
        p2 = 0.0D;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 4;
        p1 = 500;
        p2 = 0.59375D;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = 8;
        p1 = 100;
        p2 = 0.33566851611343496D;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = 15;
        p1 = 50;
        p2 = 0.5686761670525845D;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = 50;
        p1 = 10;
        p2 = 0.7494276522159893D;
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 6 -----
        p0 = 50;
        p1 = 1000;
        p2 = 1.0D;
        all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
