import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ContestWinner
{
    public final int n = (int) 1e6;
	public int getWinner(int[] events)
	{
		int[] c = new int[n + 1];
        int currC = 0, ret = 0;
        for (int i : events) {
            c[i]++;
            if (currC < c[i]) {
                currC = c[i];
                ret = i;
            }
        }
        return ret;
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		ContestWinner obj;
		int answer;
		obj = new ContestWinner();
		long startTime = System.currentTimeMillis();
		answer = obj.getWinner(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new int[]{4,7,4,1};
		p1 = 4;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{10,20,30,40,50};
		p1 = 10;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{123,123,456,456,456,123};
		p1 = 456;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1,2,2,3,3,3,4,4,4,4};
		p1 = 4;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// Exactly one million contestants, numbered 1 through 1,000,000, took part in a programming contest.
	// The rules of the contest are simple: the winner is the contestant who solves the largest number of tasks.
	// If there are more contestants tied for most tasks solved, the winner is the one who was the first to have all of their tasks solved.
	// 
	// 
	// During the contest the judges were keeping a log of all accepted solutions.
	// You are given this log as a int[] events.
	// The i-th element of events is the number of the contestant who submitted the i-th accepted solution (both indices are 0-based).
	// 
	// 
	// For example, if events = {4, 7, 4, 1}, this is what happened during the contest:
	// 
	// 
	// Contestant 4 solved her first task.
	// Contestant 7 solved his first task.
	// Contestant 4 solved her second task.
	// Contestant 1 solved his first task.
	// 
	// 
	// Compute and return the number of the contestant who won the contest.
	// 
	// 
	// DEFINITION
	// Class:ContestWinner
	// Method:getWinner
	// Parameters:int[]
	// Returns:int
	// Method signature:int getWinner(int[] events)
	// 
	// 
	// CONSTRAINTS
	// -events will contain between 1 and 50 elements, inclusive.
	// -Each element of events will be between 1 and 1,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {4,7,4,1}
	// 
	// Returns: 4
	// 
	// Example from the problem statement.
	// 
	// 1)
	// {10,20,30,40,50}
	// 
	// Returns: 10
	// 
	// 
	// 
	// 2)
	// {123,123,456,456,456,123}
	// 
	// Returns: 456
	// 
	// 
	// 
	// 3)
	// {1,2,2,3,3,3,4,4,4,4}
	// 
	// Returns: 4
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
