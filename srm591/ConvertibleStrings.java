import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ConvertibleStrings {
    public int leastRemovals(String A, String B) {
        int[] map = new int[10];
        int size = A.length();
        for (int i = 0; i < 10; i++) {
            map[i] = i;
        }
        int ret = A.length();
        do {
            char[] a = A.toCharArray();
            char[] b = B.toCharArray();
            for (int i = 0; i < size; i++) {
                a[i] = (char) ('A' + map[a[i] - 'A']);
            }
            int diff = 0;
            for (int i = 0; i < size; i++) {
                if (a[i] != b[i]) diff++;
            }
            ret = Math.min(ret, diff);
        } while (nextPermutation(map) != 0);
        return ret;
    }
    // get the next permutation in place
    public static int nextPermutation(int[] num) {
        int size = num.length;
        if (size <= 1) return 0;

        // 1.find the first acending order pair from the bottom
        int low = size - 2;
        int high = size - 1;
        while (num[low] >= num[high]) {
            if (low == high - 1) {
                low -= 1;
                high = size - 1;
                if (low < 0) break;
            } else {
                high -= 1;
            }
        }

        // reached end of permutation
        if (low < 0) {
            Arrays.sort(num);
            return 0;
        }

        // 2.swap num[lo] with num[hi] if lo >= 0
        int temp = 0;
        temp = num[low];
        num[low] = num[high];
        num[high] = temp;

        // 3.reverse lo+1 .. end
        low = low + 1;
        high = size - 1;
        while (low < high) {
            temp = num[low];
            num[low] = num[high];
            num[high] = temp;
            low++;
            high--;
        }

        return 1;
    }
    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String p0, String p1, boolean hasAnswer, int p2) {
        System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + "\"" + p1 + "\"");
        System.out.println("]");
        ConvertibleStrings obj;
        int answer;
        obj = new ConvertibleStrings();
        long startTime = System.currentTimeMillis();
        answer = obj.leastRemovals(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p2);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p2;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String p0;
        String p1;
        int p2;

        // ----- test 0 -----
        p0 = "DD";
        p1 = "FF";
        p2 = 0;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = "AAAA";
        p1 = "ABCD";
        p2 = 3;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = "AAIAIA";
        p1 = "BCDBEE";
        p2 = 3;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = "ABACDCECDCDAAABBFBEHBDFDDHHD";
        p1 = "GBGCDCECDCHAAIBBFHEBBDFHHHHE";
        p2 = 9;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // Let X and Y be two strings of equal length, consisting of uppercase English letters only.
    // The two strings are called convertible if there is a permutation P of the English alphabet with the following property:
    // if each character c in the string X is replaced by the character P(c), we obtain the string Y.
    // (In other words, X and Y are convertible iff the following holds: whenever two letters of X are equal, the corresponding two letters of Y must be equal, and vice versa.)
    //
    // For example, consider the string "ABCA".
    // We can choose to replace each 'A' by a 'F', each 'B' by a 'B', and each 'C' by a 'G', obtaining the string "FBGF".
    // Thus the strings "ABCA" and "FBGF" are convertible.
    // The strings "ABCA" and "EFGH" are not convertible, because the two 'A's in the first string must correspond to the same letter in the second string.
    // The strings "ABCA" and "EEEE" are not convertible, because different letters in the first string must correspond to different letters in the second string.
    //
    // You are given two Strings A and B of the same length.
    // These strings only contain English letters from 'A' to 'I', inclusive.
    // (That is, only the first 9 letters of the alphabet are used.)
    //
    // You want to change A and B into two strings that are convertible.
    // The only allowed change is to choose some indices (possibly none) and to remove the characters at those indices from each of the strings.
    // (I.e., the removed characters must be at the same positions in both strings. For example, it is not allowed to only remove character 0 of A and character 3 of B.)
    // For example, if A="ABAC", B="AHHA" and the chosen indices are 0 and 2, then the resulting strings will be "BC" and "HA".
    // Our goal is to choose as few indices as possible, given that after the erasing we want to obtain two convertible strings.
    // Compute and return the smallest possible number of chosen indices.
    //
    //
    // DEFINITION
    // Class:ConvertibleStrings
    // Method:leastRemovals
    // Parameters:String, String
    // Returns:int
    // Method signature:int leastRemovals(String A, String B)
    //
    //
    // CONSTRAINTS
    // -A will contain between 1 and 50 characters, inclusive.
    // -A and B will be of the same length.
    // -A will contain characters from 'A' to 'I' only.
    // -B will contain characters from 'A' to 'I' only.
    //
    //
    // EXAMPLES
    //
    // 0)
    // "DD"
    // "FF"
    //
    // Returns: 0
    //
    // The given strings are convertible without any removals. Any mapping with 'D' mapped to 'F' changes A to B.
    //
    // 1)
    // "AAAA"
    // "ABCD"
    //
    // Returns: 3
    //
    // We can choose any three indices.
    //
    // 2)
    // "AAIAIA"
    // "BCDBEE"
    //
    // Returns: 3
    //
    // One possible triple of indices is (1, 2, 5) (0-based indices).
    //
    //
    // 3)
    // "ABACDCECDCDAAABBFBEHBDFDDHHD"
    // "GBGCDCECDCHAAIBBFHEBBDFHHHHE"
    //
    // Returns: 9
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
