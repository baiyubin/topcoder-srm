import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class InfiniteString {
	public String equal(String s, String t) {
		int ns = s.length(), nt = t.length();
		int lcm = ns * nt * gcd(ns, nt);
		StringBuilder bs = new StringBuilder();
		StringBuilder bt = new StringBuilder();
		while (bs.length() < lcm) {
			bs.append(s);
		}
		while (bt.length() < lcm) {
			bt.append(t);
		}
		return bs.toString().equals(bt.toString()) ? "Equal" : "Not equal";
	}

	public int gcd(int a, int b) {
		while (b != 0) {
			int t = a;
			a = b;
			b = t % b;
		}
		return a;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, String p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + "\"" + p1 + "\"");
		System.out.println("]");
		InfiniteString obj;
		String answer;
		obj = new InfiniteString();
		long startTime = System.currentTimeMillis();
		answer = obj.equal(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p2 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		String p0;
		String p1;
		String p2;

		// ----- test 0 -----
		p0 = "ab";
		p1 = "abab";
		p2 = "Equal";
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = "abc";
		p1 = "bca";
		p2 = "Not equal";
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = "abab";
		p1 = "aba";
		p2 = "Not equal";
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = "aaaaa";
		p1 = "aaaaaa";
		p2 = "Equal";
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = "ababab";
		p1 = "abab";
		p2 = "Equal";
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 5 -----
		p0 = "a";
		p1 = "z";
		p2 = "Not equal";
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Given a string s, let f(s) denote the infinite string obtained by concatenating infinitely many copies of s.
	// For example, if s = "abc" then f(s) = "abcabcabcabc...".
	//
	//
	// Note that the string f(s) still has a beginning.
	// Hence, f("abc") and f("bca") are two different infinite strings: the first one starts with an 'a' while the other starts with a 'b'.
	//
	//
	// Sometimes, two different finite strings can produce the same infinite string.
	// For example, f("abc") is the same as f("abcabc").
	//
	//
	// You are given Strings s and t.
	// Check whether f(s) equals f(t).
	// If the two infinite strings are equal, return "Equal".
	// Otherwise, return "Not equal".
	//
	// DEFINITION
	// Class:InfiniteString
	// Method:equal
	// Parameters:String, String
	// Returns:String
	// Method signature:String equal(String s, String t)
	//
	//
	// CONSTRAINTS
	// -s will contain between 1 and 50 elements, inclusive.
	// -t will contain between 1 and 50 elements, inclusive.
	// -Each character in s will be a lowercase English letter ('a'-'z').
	// -Each character in t will be a lowercase English letter ('a'-'z').
	//
	//
	// EXAMPLES
	//
	// 0)
	// "ab"
	// "abab"
	//
	// Returns: "Equal"
	//
	// Both string will generate "ababababab...".
	//
	// 1)
	// "abc"
	// "bca"
	//
	// Returns: "Not equal"
	//
	//
	//
	// 2)
	// "abab"
	// "aba"
	//
	// Returns: "Not equal"
	//
	// The first one will generate "abababab...", but the second one will generate "abaaba...".
	//
	// 3)
	// "aaaaa"
	// "aaaaaa"
	//
	// Returns: "Equal"
	//
	//
	//
	// 4)
	// "ababab"
	// "abab"
	//
	// Returns: "Equal"
	//
	//
	//
	// 5)
	// "a"
	// "z"
	//
	// Returns: "Not equal"
	//
	//
	//
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
