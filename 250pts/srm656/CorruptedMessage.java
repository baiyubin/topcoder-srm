import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class CorruptedMessage
{
	public String reconstructMessage(String s, int k)
	{
		int n = s.length();
		int[] count = new int[26];
		for (char c : s.toCharArray()) {
			count[c - 'a']++;
		}
		for (int i = 0; i < 26; i++) {
			if (count[i] == n - k) {
				StringBuilder sb = new StringBuilder();
				for (int j = 0; j < n; j++) {
					sb.append( (char) ('a' + i));
				}
				return sb.toString();
			}
		}
		return "";
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, int p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + p1);
		System.out.println("]");
		CorruptedMessage obj;
		String answer;
		obj = new CorruptedMessage();
		long startTime = System.currentTimeMillis();
		answer = obj.reconstructMessage(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p2 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		int p1;
		String p2;
		
		// ----- test 0 -----
		p0 = "hello";
		p1 = 3;
		p2 = "lllll";
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "abc";
		p1 = 3;
		p2 = "ddd";
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "wwwwwwwwwwwwwwwwww";
		p1 = 0;
		p2 = "wwwwwwwwwwwwwwwwww";
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "ababba";
		p1 = 3;
		p2 = "aaaaaa";
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "zoztxtoxytyt";
		p1 = 10;
		p2 = "oooooooooooo";
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = "jlmnmiunaxzywed";
		p1 = 13;
		p2 = "mmmmmmmmmmmmmmm";
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// Your friend just sent you a message.
	// The message consisted of one or more copies of the same lowercase letter.
	// For example, "aaaaa" and "xxxxxxxxx" are valid messages.
	// Unfortunately, on its way to you the message became corrupted: exactly k letters of the original message were changed to some other letters.
	// The message you received is s.
	// 
	// 
	// 
	// Given the String s and the int k, reconstruct the original message.
	// More precisely, return a String that could have been the original message.
	// It is guaranteed that at least one such String will always exist.
	// If there are multiple possible answers, you may return any of them.
	// 
	// 
	// DEFINITION
	// Class:CorruptedMessage
	// Method:reconstructMessage
	// Parameters:String, int
	// Returns:String
	// Method signature:String reconstructMessage(String s, int k)
	// 
	// 
	// CONSTRAINTS
	// -The number of characters in s will be between 1 and 50, inclusive.
	// -Each character in s will be a lowercase letter ('a'-'z').
	// -k will be between 0 and the length of s, inclusive.
	// -At least one possible original message will be consistent with s and k.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "hello"
	// 3
	// 
	// Returns: "lllll"
	// 
	// The three corrupted characters have 0-based indices 0, 1, and 4.
	// 
	// 1)
	// "abc"
	// 3
	// 
	// Returns: "ddd"
	// 
	// The original message can't be "aaa", "bbb", or "ccc", since we need to change exactly 3 characters.
	// 
	// Some other possible answers include "qqq", "xxx", or "ppp".
	// 
	// 2)
	// "wwwwwwwwwwwwwwwwww"
	// 0
	// 
	// Returns: "wwwwwwwwwwwwwwwwww"
	// 
	// No characters were corrupted.
	// 
	// 3)
	// "ababba"
	// 3
	// 
	// Returns: "aaaaaa"
	// 
	// "bbbbbb" will also be accepted.
	// 
	// 4)
	// "zoztxtoxytyt"
	// 10
	// 
	// Returns: "oooooooooooo"
	// 
	// 
	// 
	// 5)
	// "jlmnmiunaxzywed"
	// 13
	// 
	// Returns: "mmmmmmmmmmmmmmm"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
