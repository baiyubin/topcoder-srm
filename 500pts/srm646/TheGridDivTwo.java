import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TheGridDivTwo {
	class Point {
		public int x, y, s;
		public Point(int x, int y, int s) {
			this.x = x;
			this.y = y;
			this.s = s;
		}
	}
	public static int ORIGIN = 1500;
	public static int d[][] = new int[][] {{0, 1}, {0, -1}, {1, 0}, { -1, 0}};
	public int find(int[] x, int[] y, int k) {
		byte[][] graph = new byte[3000][3000];
		int n = x.length;
		for (int i = 0; i < n; i++) {
			graph[x[i] + ORIGIN][y[i] + ORIGIN] = -1;
		}
		ArrayDeque<Point> q = new ArrayDeque<Point>();
		q.add(new Point(ORIGIN, ORIGIN, 0));
		int result = 0;
		while (!q.isEmpty()) {
			Point p = q.pollFirst();
			if (p.s == k + 1) {
				break;
			}
			if (graph[p.x][p.y] != -1 && graph[p.x][p.y] != 1) {
				result = Math.max(result, p.x - ORIGIN);
				graph[p.x][p.y] = 1;
				for (int i = 0; i < 4; i++) {
					q.add(new Point(p.x + d[i][0], p.y + d[i][1], p.s + 1));
				}
			}
		}

		return result;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + p2);
		System.out.println("]");
		TheGridDivTwo obj;
		int answer;
		obj = new TheGridDivTwo();
		long startTime = System.currentTimeMillis();
		answer = obj.find(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int[] p0;
		int[] p1;
		int p2;
		int p3;

		// ----- test 0 -----
		p0 = new int[] {1, 1, 1, 1};
		p1 = new int[] { -2, -1, 0, 1};
		p2 = 4;
		p3 = 2;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new int[] { -1, 0, 0, 1};
		p1 = new int[] {0, -1, 1, 0};
		p2 = 9;
		p3 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new int[] {};
		p1 = new int[] {};
		p2 = 1000;
		p3 = 1000;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new int[] {1, 0, 0, -1, -1, -2, -2, -3, -3, -4, -4};
		p1 = new int[] {0, -1, 1, -2, 2, -3, 3, -4, 4, -5, 5};
		p2 = 47;
		p3 = 31;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// John is standing at the origin of an infinite two-dimensional grid.
	// He is going to move along this grid.
	// During each second he can either stay where he is or he can move by one unit in one of the four cardinal directions (north, south, east, or west).
	// Some of the grid points are blocked.
	// John is not allowed to move to a blocked grid point.
	//
	//
	// You are given the coordinates of the blocked grid points as int[]s x and y.
	// For each valid i, the grid point that is x[i] units east and y[i] units north of the origin is blocked.
	// You are also given an int k.
	// Compute and return the maximal possible x-coordinate of a point John can reach in k seconds.
	//
	//
	// DEFINITION
	// Class:TheGridDivTwo
	// Method:find
	// Parameters:int[], int[], int
	// Returns:int
	// Method signature:int find(int[] x, int[] y, int k)
	//
	//
	// CONSTRAINTS
	// -x will contain between 0 and 47 elements, inclusive.
	// -x and y will contain the same number of elements.
	// -Each element of x will be between -1,000 and 1,000, inclusive.
	// -Each element of y will be between -1,000 and 1,000, inclusive.
	// -All pairs (x[i], y[i]) will be distinct.
	// -Each pair (x[i], y[i]) will be different from (0, 0).
	// -k will be between 1 and 1,000, inclusive.
	//
	//
	// EXAMPLES
	//
	// 0)
	// {1,1,1,1}
	// {-2,-1,0,1}
	// 4
	//
	// Returns: 2
	//
	// The optimal strategy is to move two times north to (0, 2) and then two times east to (2,2).
	//
	//
	// 1)
	// {-1, 0, 0, 1}
	// {0, -1, 1, 0}
	// 9
	//
	// Returns: 0
	//
	// John can not make any moves.
	//
	// 2)
	// {}
	// {}
	// 1000
	//
	// Returns: 1000
	//
	//
	//
	// 3)
	// {1,0,0,-1,-1,-2,-2,-3,-3,-4,-4}
	// {0,-1,1,-2,2,-3,3,-4,4,-5,5}
	// 47
	//
	// Returns: 31
	//
	//
	//
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
