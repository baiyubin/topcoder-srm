import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class EasyHomework
{
	public String determineSign(int[] A)
	{
		int ret = 1;
        for (int i : A) {
            if (i == 0) {
                return "ZERO";
            } else {
                ret *= (i / Math.abs(i));
            }
        }
        if (ret == 1) {
            return "POSITIVE";
        } else {
            return "NEGATIVE";
        }
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		EasyHomework obj;
		String answer;
		obj = new EasyHomework();
		long startTime = System.currentTimeMillis();
		answer = obj.determineSign(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		String p1;
		
		// ----- test 0 -----
		p0 = new int[]{5,7,2};
		p1 = "POSITIVE";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{-5,7,2};
		p1 = "NEGATIVE";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{5,7,2,0};
		p1 = "ZERO";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{3,-14,159,-26};
		p1 = "POSITIVE";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{-1000000000};
		p1 = "NEGATIVE";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{123,-456,789,-101112,131415,161718,192021,222324,252627,282930,313233,343536,373839,404142,434445,464748,495051,525354,555657};
		p1 = "POSITIVE";
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// You are taking a course in analysis of algorithms and now you are learning about efficient multiplication of large integers. This week, your professor wanted to give you a homework: given a list of integers, determine the product of all elements in the list.
	// 
	// However, later your professor decided that the homework is too difficult and gave you an easier version instead. In this version, you are only required to determine the sign of the product. The professor also gave you some hints:
	// 
	// 
	// Any integer multiplied by zero is always zero.
	// The product of two positive integers is always a positive integer.
	// The product of a positive integer and a negative integer is always a negative integer.
	// The product of two negative integers is always a positive integer.
	// 
	// 
	// More formally, you are given a int[] numbers. Let P be the product of all elements of numbers. If P is positive, return "POSITIVE"; if P is negative, return "NEGATIVE"; else return "ZERO".
	// 
	// DEFINITION
	// Class:EasyHomework
	// Method:determineSign
	// Parameters:int[]
	// Returns:String
	// Method signature:String determineSign(int[] A)
	// 
	// 
	// NOTES
	// -It is possible that the product of all elements of numbers is not representable in 32-bit or 64-bit signed integer data type.
	// 
	// 
	// CONSTRAINTS
	// -numbers will contain between 1 and 50 elements, inclusive.
	// -Each element of numbers will be between -1,000,000,000 and 1,000,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {5, 7, 2}
	// 
	// Returns: "POSITIVE"
	// 
	// The product is 70, which is a positive integer.
	// 
	// 1)
	// {-5, 7, 2}
	// 
	// Returns: "NEGATIVE"
	// 
	// This time the product is -70, which is a negative integer.
	// 
	// 2)
	// {5, 7, 2, 0}
	// 
	// Returns: "ZERO"
	// 
	// The product is 0.
	// 
	// 3)
	// {3, -14, 159, -26}
	// 
	// Returns: "POSITIVE"
	// 
	// 
	// 
	// 4)
	// {-1000000000}
	// 
	// Returns: "NEGATIVE"
	// 
	// 
	// 
	// 5)
	// {123, -456, 789, -101112, 131415, 161718, 192021, 222324, 252627, 282930, 313233, 343536, 373839, 404142, 434445, 464748, 495051, 525354, 555657}
	// 
	// Returns: "POSITIVE"
	// 
	// The product is 137646845657507645199797549975668224555202443025319758098026743549006534800854109919487361024000, which is a positive integer. Note that this number does not fit even into a 64-bit signed integer data type!
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
