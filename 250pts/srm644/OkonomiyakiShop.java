import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class OkonomiyakiShop
{
	public int count(int[] osize, int K)
	{
		Arrays.sort(osize);
        int n = osize.length;
        int ret = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if ( osize[j] - osize[i] <= K) ret++;
            }
        }
        return ret;
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		OkonomiyakiShop obj;
		int answer;
		obj = new OkonomiyakiShop();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new int[]{1,4,6,7,9};
		p1 = 3;
		p2 = 6;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{1,1,3,3,3};
		p1 = 2;
		p2 = 10;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{1,5,9,14,20};
		p1 = 3;
		p2 = 0;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{7,2,6,3,4,2,7,8,3,4,9,1,8,4,3,7,5,2,1,9,9,4,5};
		p1 = 6;
		p2 = 234;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Cat Snuke and Wolf Sothe came to an okonomiyaki restaurant.
	// (Okonomiyaki is a Japanese pancake.)
	// The restaurant makes several types of okonomiyaki.
	// Each type of okonomiyaki has its specific size.
	// You are given the sizes of all okonomiyaki types as a int[] osize.
	// 
	// The restaurant offers a discount if you order a meal for two persons.
	// Each such order must consist of two okonomiyakis of different types.
	// Additionally, the sizes of the two okonomiyakis must differ by K or less.
	// 
	// You are given the int[] osize and the int K.
	// Compute and return the number of different two-person meals offered by the restaurant.
	// 
	// DEFINITION
	// Class:OkonomiyakiShop
	// Method:count
	// Parameters:int[], int
	// Returns:int
	// Method signature:int count(int[] osize, int K)
	// 
	// 
	// CONSTRAINTS
	// -osize will contain between 2 and 50 elements, inclusive.
	// -Each element in osize will be between 1 and 10,000, inclusive.
	// -K will be between 1 and 10,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1,4,6,7,9}
	// 3
	// 
	// Returns: 6
	// 
	// There are five types of okonomiyaki.
	// Let's call them types A, B, C, D, and E.
	// (Type A has size 1, type B has size 4, and so on.)
	// There are 6 valid two-person meals: A+B, B+C, B+D, C+D, C+E, and D+E.
	// 
	// Note that B+A is the same order as A+B: you get one pancake of type A and one pancake of type B.
	// 
	// 1)
	// {1,1,3,3,3}
	// 2
	// 
	// Returns: 10
	// 
	// Different types of okonomiyaki may have equal sizes.
	// A two-person meal may contain two okonomiyaki of the same size, they are only required to have a different type.
	// Therefore, in this test case each pair of different okonomiyaki can be ordered as a two-person meal.
	// 
	// 2)
	// {1,5,9,14,20}
	// 3
	// 
	// Returns: 0
	// 
	// In this test case there is no valid two-person meal: the differences in pancake sizes are all greater than K.
	// 
	// 3)
	// {7,2,6,3,4,2,7,8,3,4,9,1,8,4,3,7,5,2,1,9,9,4,5}
	// 6
	// 
	// Returns: 234
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
