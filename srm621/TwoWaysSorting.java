import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TwoWaysSorting
{
	public String sortingMethod(String[] stringList)
	{
		int n = stringList.length;
		String[] sort1 = new String[n];
		String[] sort2 = new String[n];
		for (int i = 0; i < n; i++) {
			sort1[i] = stringList[i];
			sort2[i] = stringList[i];
		}
		Arrays.sort(sort1);

		Arrays.sort(sort2, new Comparator<String>() {
			public int compare(String o1, String o2) {
				return new Integer(o1.length()).compareTo(new Integer(o2.length()));
			} 
		});

		boolean flag1 = false, flag2 = false;
		for (int i = 0; i < n; i++) {
			if (!stringList[i].equals(sort1[i])) flag1 = true;
			if (!stringList[i].equals(sort2[i])) flag2 = true;
		}

		if ( !flag1 && !flag2) return "both";
		else if (flag1 && flag2) return "none";
		else if (flag1) return "lengths";
		else return "lexicographically";

	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		TwoWaysSorting obj;
		String answer;
		obj = new TwoWaysSorting();
		long startTime = System.currentTimeMillis();
		answer = obj.sortingMethod(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		String p1;
		
		// ----- test 0 -----
		p0 = new String[]{"a","aa","bbb"};
		p1 = "both";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"c","bb","aaa"};
		p1 = "lengths";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"etdfgfh","aio"};
		p1 = "none";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"aaa","z"};
		p1 = "lexicographically";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"z"};
		p1 = "both";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new String[]{"abcdef","bcdef","cdef","def","ef","f","topcoder"};
		p1 = "lexicographically";
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
