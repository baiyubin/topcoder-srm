import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class IncubatorEasy {
    int n;
    String[] love;

    public int maxMagicalGirls(String[] love) {
        this.love = love;
        n = love.length;
        int[][] protecting = new int[n][n];
        for (int[] arr : protecting) {
            Arrays.fill(arr, -1);
        }
        for (int i = 0; i < n; i++) {
            dfs(protecting[i], i);
        }
        int ans = 0;
        for (int mask = 0; mask < (1 << n); mask++) {
            boolean valid = true;
            for (int curr = 0; curr < n; curr++) {
                if ((mask & (1 << curr)) != 0) {
                    for (int i = 0; i < n; i++) {
                        if (protecting[curr][i] == 1 && (mask & (1 << i)) != 0) {
                            valid = false;
                            break;
                        }
                    }
                }
            }
            if (valid) {
                ans = Math.max(ans, Integer.bitCount(mask));
            }
        }
        return ans;
    }

    public void dfs(int[] visited, int curr) {
        for (int i = 0; i < n; i++) {
            if (love[curr].charAt(i) == 'Y' && visited[i] != 1) {
                visited[i] = 1;
                dfs(visited, i);
            }
        }
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}");
        System.out.println("]");
        IncubatorEasy obj;
        int answer;
        obj = new IncubatorEasy();
        long startTime = System.currentTimeMillis();
        answer = obj.maxMagicalGirls(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p1);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p1;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String[] p0;
        int p1;
        p0 = new String[]{
                "YNNNN",
                "NNNYN",
                "NNNNN",
                "YNNNN",
                "NYNNN"
        };
        p1 = 2;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
        // ----- test 0 -----
        p0 = new String[]{"NY", "NN"};
        p1 = 1;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new String[]{"NYN", "NNY", "NNN"};
        p1 = 1;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new String[]{"NNYNN", "NNYNN", "NNNYY", "NNNNN", "NNNNN"};
        p1 = 2;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new String[]{"NNNNN", "NYNNN", "NYNYN", "YNYNN", "NNNNN"};
        p1 = 2;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new String[]{"NNNNN", "NNNNN", "NNNNN", "NNNNN", "NNNNN"};
        p1 = 5;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = new String[]{"Y"};
        p1 = 0;
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // You are the Incubator.
    // You have the ability to turn normal girls into magical girls.
    //
    //
    //
    // There are n girls in the city.
    // The girls are conveniently numbered 0 through n-1.
    // Some girls love some other girls.
    // Love is not necessarily symmetric.
    // It is also possible for a girl to love herself.
    //
    //
    //
    // You are given a String[] love.
    // Character j of element i of love is 'Y' if girl i loves girl j.
    // Otherwise, that character is 'N'.
    // In the rest of the problem statement, we will use love[i][j] to denote the truth value of the statement "girl i loves girl j".
    //
    //
    //
    // Each girl has two boolean properties: isMagical (is she a magical girl?) and isProtected (is she protected by some girl?).
    // Initially, for each girl i we have isMagical[i] = False and isProtected[i] = False.
    //
    //
    //
    // At any moment, you can choose an ordinary girl and turn her into a magical girl.
    // That is, you can take a girl i such that isMagical[i] = False, and change isMagical[i] to True.
    //
    //
    //
    // Each such change will trigger a series of events:
    //
    // Each magical girl will protect all girls she loves: if isMagical[i] and love[i][j], then isProtected[j] is set to True.
    // Each protected girl will also protect all girls she loves: if isProtected[i] and love[i][j], then isProtected[j] is set to True.
    //
    // Note that some of these changes may in turn trigger other changes, as more and more girls become protected.
    //
    //
    //
    // Once there are no more changes, you can again change another ordinary girl into a magical one, and so on.
    // Your goal is to reach a situation with many girls that are magical, but not protected.
    // That is, you are interested in girls such that isMagical[i] = True and isProtected[i] = False.
    // Return the maximum number of such girls in a situation that can be reached using the above process.
    //
    // DEFINITION
    // Class:IncubatorEasy
    // Method:maxMagicalGirls
    // Parameters:String[]
    // Returns:int
    // Method signature:int maxMagicalGirls(String[] love)
    //
    //
    // CONSTRAINTS
    // -n will be between 1 and 10, inclusive.
    // -love will contain exactly n elements.
    // -Each element of love will contain exactly n characters.
    // -Each character in each element of love will be either 'Y' or 'N'.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {"NY","NN"}
    //
    // Returns: 1
    //
    // One optimal solution is to change girl 0 to a magical girl.
    // Girl 0 will be magical and she will not be protected.
    // It is not possible to have two girls that are both magical and not protected:
    // if you change both girls to magical girls (in any order), you will get a situation in which girl 1 is protected.
    //
    //
    // 1)
    // {"NYN", "NNY", "NNN"}
    //
    // Returns: 1
    //
    // Again, there is no way to create more than one unprotected magical girl.
    // For example, if we start by making girl 2 magical, and then make girl 0 magical, magical girl 0 will protect girl 1, and protected girl 1 will protect girl 2.
    // Thus, in this case girl 0 will be magical and unprotected, girl 1 will be ordinary and protected, and girl 2 will be magical and protected.
    //
    // 2)
    // {"NNYNN","NNYNN","NNNYY","NNNNN","NNNNN"}
    //
    // Returns: 2
    //
    //
    //
    // 3)
    // {"NNNNN","NYNNN","NYNYN","YNYNN","NNNNN"}
    //
    // Returns: 2
    //
    //
    //
    // 4)
    // {"NNNNN","NNNNN","NNNNN","NNNNN","NNNNN"}
    //
    // Returns: 5
    //
    //
    //
    // 5)
    // {"Y"}
    //
    // Returns: 0
    //
    // Note that a girl may love herself.
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
