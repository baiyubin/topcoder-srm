import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ElectronicPetEasy
{
	public String isDifficult(int st1, int p1, int t1, int st2, int p2, int t2)
	{
		for (int i = 0; i < t1; i++) {
			int t = st1 + i * p1;
			for (int j = 0; j < t2; j++) {
				int tt = st2 + j * p2;
				if (t == tt) return "Difficult";
			}
		}
		return "Easy";
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, int p5, boolean hasAnswer, String p6) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3 + "," + p4 + "," + p5);
		System.out.println("]");
		ElectronicPetEasy obj;
		String answer;
		obj = new ElectronicPetEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.isDifficult(p0, p1, p2, p3, p4, p5);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p6 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p6);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		int p4;
		int p5;
		String p6;
		
		// ----- test 0 -----
		p0 = 3;
		p1 = 3;
		p2 = 3;
		p3 = 5;
		p4 = 2;
		p5 = 3;
		p6 = "Difficult";
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = 3;
		p2 = 3;
		p3 = 5;
		p4 = 2;
		p5 = 2;
		p6 = "Easy";
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 1;
		p1 = 4;
		p2 = 7;
		p3 = 1;
		p4 = 4;
		p5 = 7;
		p6 = "Difficult";
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 1;
		p1 = 1000;
		p2 = 1000;
		p3 = 2;
		p4 = 1000;
		p5 = 1000;
		p6 = "Easy";
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 1;
		p1 = 1;
		p2 = 1;
		p3 = 2;
		p4 = 2;
		p5 = 2;
		p6 = "Easy";
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// Kirino has found a game in which she has to feed electronic pets.
	// There are two pets in the game.
	// You are given six ints st1,p1,t1,st2,p2,t2.
	// To win the game, Kirino must satisfy the following rules:
	// 
	// She must feed her first pet for the first time precisely at the time st1.
	// There must be exactly p1 seconds between any two consecutive feedings of the first pet.
	// She must feed the first pet exactly t1 times.
	// She must feed her second pet for the first time precisely at the time st2.
	// There must be exactly p2 seconds between any two consecutive feedings of the second pet.
	// She must feed the second pet exactly t2 times.
	// 
	// 
	// 
	// 
	// Feeding the pets is easy if Kirino never needs to feed both pets at the same time.
	// Return "Easy" (quotes for clarity) if feeding the pets is easy for the given inputs.
	// Otherwise, return "Difficult".
	// Note that the return value is case-sensitive.
	// 
	// 
	// DEFINITION
	// Class:ElectronicPetEasy
	// Method:isDifficult
	// Parameters:int, int, int, int, int, int
	// Returns:String
	// Method signature:String isDifficult(int st1, int p1, int t1, int st2, int p2, int t2)
	// 
	// 
	// CONSTRAINTS
	// -st1, p1, t1, st2, p2, and t2 will be between 1 and 1,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 3
	// 3
	// 3
	// 5
	// 2
	// 3
	// 
	// Returns: "Difficult"
	// 
	// Kirino must feed her first pet at the times 3, 6, and 9.
	// She must feed her second pet at the times 5, 7, and 9.
	// Feeding these two pets is difficult because she needs to feed both of them at the same time (at time 9).
	// 
	// 1)
	// 3
	// 3
	// 3
	// 5
	// 2
	// 2
	// 
	// Returns: "Easy"
	// 
	// Kirino must feed her first pet at 3, 6, and 9, and her second pet at 5 and 7.
	// As all of these times are distinct, feeding these two pets is easy.
	// 
	// 2)
	// 1
	// 4
	// 7
	// 1
	// 4
	// 7
	// 
	// Returns: "Difficult"
	// 
	// 
	// 
	// 3)
	// 1
	// 1000
	// 1000
	// 2
	// 1000
	// 1000
	// 
	// Returns: "Easy"
	// 
	// 
	// 
	// 4)
	// 1
	// 1
	// 1
	// 2
	// 2
	// 2
	// 
	// Returns: "Easy"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
