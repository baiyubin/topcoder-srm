import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TwoNumberGroupsEasy
{
	int[] A, numA, B, numB;
	int ans = 0;
	public int solve(int[] A, int[] numA, int[] B, int[] numB)
	{
		this.A = A;
		this.numA = numA;
		this.B = B;
		this.numB = numB;
		for (int na : numA) {
			ans += na;
		}
		for (int nb : numB) {
			ans += nb;
		}
		HashSet<Integer> factors = new HashSet<Integer>();
		for (int a : A) {
			factors.add(a);
		}
		for (int b : B) {
			factors.add(b);
		}
		for (int a : A) {
			for (int b : B) {
				int diff = Math.abs(a - b);
				for (int i = 1; i <= Math.sqrt(diff); ++i) {
					if (diff % i == 0) {
						factors.add(diff / i);
						factors.add(i);
					}
				}
			}
		}
		for (int i : factors) {
			f(i - 1);
			f(i);
			f(i + 1);
		}
		return ans;
	}
	public void f(int x) {
		if (x > 1) {
			HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
			for (int i = 0; i < A.length; ++i) {
			    if (hm.containsKey(A[i] % x)) {
			    	hm.put(A[i] % x, hm.get(A[i] % x) + numA[i]);
			    } else {
			    	hm.put(A[i] % x, numA[i]);
			    }
			}
			for (int i = 0; i < B.length; ++i) {
			    if (hm.containsKey(B[i] % x)) {
			    	hm.put(B[i] % x, hm.get(B[i] % x) - numB[i]);
			    } else {
			    	hm.put(B[i] % x, -1 * numB[i]);
			    }
			}
			int ret = 0;
			for (int c : hm.values()) {
				ret += Math.abs(c);
			}
			ans = Math.min(ret, ans);
		}
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int[] p2, int[] p3, boolean hasAnswer, int p4) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p2[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p3.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p3[i]);
		}
		System.out.print("}");
		System.out.println("]");
		TwoNumberGroupsEasy obj;
		int answer;
		obj = new TwoNumberGroupsEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.solve(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p4);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p4;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int[] p2;
		int[] p3;
		int p4;
		
		// ----- test 0 -----
		p0 = new int[]{1,2,3,4};
		p1 = new int[]{2,1,1,1};
		p2 = new int[]{5,6,7,8};
		p3 = new int[]{1,1,1,2};
		p4 = 2;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{5,7};
		p1 = new int[]{1,1};
		p2 = new int[]{12,14};
		p3 = new int[]{1,1};
		p4 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{100};
		p1 = new int[]{2};
		p2 = new int[]{1};
		p3 = new int[]{1};
		p4 = 1;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1};
		p1 = new int[]{1};
		p2 = new int[]{1};
		p3 = new int[]{1};
		p4 = 0;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{5};
		p1 = new int[]{1};
		p2 = new int[]{6};
		p3 = new int[]{1};
		p4 = 2;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{733815053,566264976,984867861,989991438,407773802,701974785,599158121,713333928,530987873,702824160};
		p1 = new int[]{8941,4607,1967,2401,495,7654,7078,4213,5485,1026};
		p2 = new int[]{878175560,125398919,556001255,570171347,643069772,787443662,166157535,480000834,754757229,101000799};
		p3 = new int[]{242,6538,7921,2658,1595,3049,655,6945,7350,6915};
		p4 = 7;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// A multiset is the same thing as a set, with the difference that a multiset can contain multiple copies of the same element.
	// For example, {1,1,1,2,3} is a multiset that contains three 1s, one 2, and one 3.
	// 
	// 
	// 
	// The distance between two multisets is the smallest total number of elements we need to erase from them in order to make them equal.
	// For example, the distance between {1,1,2,2,3} and {1,2,2,4} is 3.
	// Note that we can compute distance as follows:
	// For each value, we count its occurrences in the first multiset, we count its occurrences in the second multiset, and we write down the difference between those two counts.
	// The distance is then equal to the sum of all values we wrote down.
	// 
	// 
	// 
	// If S is a multiset, then (S modulo M) is the multiset of all values (x modulo M) where x belongs to S.
	// For example, if S = {11,12,13,21,22} and M = 10, then (S modulo M) = {1,2,3,1,2} = {1,1,2,2,3}.
	// 
	// 
	// 
	// You have two multisets called A and B.
	// The first multiset is described by the int[]s A and numA.
	// For each valid i, the multiset contains numA[i] copies of the value A[i].
	// The second multiset is described by the int[]s B and numB in the same way.
	// 
	// 
	// 
	// We are now looking for a positive integer M with the following properties:
	// M must be greater than 1, and the distance between (A modulo M) and (B modulo M) must be as small as possible.
	// Compute and return the smallest possible distance.
	// 
	// 
	// DEFINITION
	// Class:TwoNumberGroupsEasy
	// Method:solve
	// Parameters:int[], int[], int[], int[]
	// Returns:int
	// Method signature:int solve(int[] A, int[] numA, int[] B, int[] numB)
	// 
	// 
	// CONSTRAINTS
	// -A and B will each contain between 1 and 10 elements, inclusive.
	// -All elements of A will be distinct.
	// -All elements of B will be distinct.
	// -The number of elements in numA will be the same as the number of elements in A.
	// -The number of elements in numB will be the same as the number of elements in B.
	// -All elements of A and B will be between 1 and 1,000,000,000, inclusive.
	// -All elements of numA and numB will be between 1 and 100,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1,2,3,4}
	// {2,1,1,1}
	// {5,6,7,8}
	// {1,1,1,2}
	// 
	// Returns: 2
	// 
	// This input describes the multisets A = {1,1,2,3,4} and B = {5,6,7,8,8}.
	// For M=2, we have (A modulo M) = {0,0,1,1,1} and (B modulo M) = {0,0,0,1,1}.
	// The distance between these two multisets is 2, and that is the best we can get.
	// 
	// 1)
	// {5,7}
	// {1,1}
	// {12,14}
	// {1,1}
	// 
	// Returns: 0
	// 
	// The optimal solution is obtained for M = 7.
	// 
	// 2)
	// {100}
	// {2}
	// {1}
	// {1}
	// 
	// Returns: 1
	// 
	// 
	// 
	// 3)
	// {1}
	// {1}
	// {1}
	// {1}
	// 
	// Returns: 0
	// 
	// 
	// 
	// 4)
	// {5}
	// {1}
	// {6}
	// {1}
	// 
	// Returns: 2
	// 
	// 
	// 
	// 5)
	// {733815053,566264976,984867861,989991438,407773802,701974785,599158121,713333928,530987873,702824160}
	// {8941,4607,1967,2401,495,7654,7078,4213,5485,1026}
	// {878175560,125398919,556001255,570171347,643069772,787443662,166157535,480000834,754757229,101000799}
	// {242,6538,7921,2658,1595,3049,655,6945,7350,6915}
	// 
	// Returns: 7
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
