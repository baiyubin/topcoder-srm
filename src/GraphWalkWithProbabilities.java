import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

/**
 * SRM 603
 */
public class GraphWalkWithProbabilities {
    int N;
    double[] dp;
    String[] graph;
    int[] winprob, loseprob;
    boolean[] done;
    public double findprob(String[] graph, int[] winprob, int[] loseprob, int Start) {
        N = graph.length;
        dp = new double[N];
        done = new boolean[N];
        Arrays.fill(dp, -1.0);
        this.graph = graph;
        this.winprob = winprob;
        this.loseprob = loseprob;
        return solve(Start);
    }

    private double solve(int curr) {
        if (done[curr]) return dp[curr];
        dp[curr] = Math.max(dp[curr], winprob[curr] / 100.0);
        double pre = dp[curr];
        double next = pre;
        for (int i = 0; i < N; ++i) {
            if (graph[curr].charAt(i) == '1') {
                next = Math.max(next, (1 - winprob[curr] / 100.0 - loseprob[curr] / 100.0) * solve(i));
                if ( next / ( 1e-20 + Math.abs(next - dp[curr])) > 1e10 ) {
                    done[curr] = true;
                }
            }
        }
        dp[curr] = next;
        return next;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int[] p1, int[] p2, int p3, boolean hasAnswer, double p4) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p2.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p2[i]);
        }
        System.out.print("}" + "," + p3);
        System.out.println("]");
        GraphWalkWithProbabilities obj;
        double answer;
        obj = new GraphWalkWithProbabilities();
        long startTime = System.currentTimeMillis();
        answer = obj.findprob(p0, p1, p2, p3);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p4);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == answer && Math.abs(p4 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p4));
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String[] p0;
        int[] p1;
        int[] p2;
        int p3;
        double p4;

        // ----- test 0 -----
        p0 = new String[] {"1"};
        p1 = new int[] {1};
        p2 = new int[] {1};
        p3 = 0;
        p4 = 0.5D;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new String[] {"11", "11"};
        p1 = new int[] {60, 40};
        p2 = new int[] {40, 60};
        p3 = 0;
        p4 = 0.6D;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new String[] {"11", "11"};
        p1 = new int[] {2, 3};
        p2 = new int[] {3, 4};
        p3 = 0;
        p4 = 0.4285714285714286D;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new String[] {"110", "011", "001"};
        p1 = new int[] {2, 1, 10};
        p2 = new int[] {20, 20, 10};
        p3 = 0;
        p4 = 0.405D;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new String[] {"111", "111", "011"};
        p1 = new int[] {100, 1, 1};
        p2 = new int[] {0, 50, 50};
        p3 = 2;
        p4 = 0.5D;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
