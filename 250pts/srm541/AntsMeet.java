import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class AntsMeet
{
    int[][] directions = new int[][] {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    class Ant {
        int x, y;
        int d;
        public Ant(int x, int y, int d) {
            this.x = x;
            this.y = y;
            this.d= d;
        }

        public void move() {
            x += directions[d][0];
            y += directions[d][1];
        }

        public boolean eq(Ant obj) {
            return this.x == obj.x && this.y == obj.y;
        }
    }
	public int countAnts(int[] x, int[] y, String direction)
	{
        int n = x.length;
        Ant[] ants = new Ant[n];
        for (int i = 0; i < n; i++) {
            ants[i] = new Ant(x[i] * 2, y[i] * 2, "NESW".indexOf(direction.charAt(i)));
        }
        int ret = n;
        boolean[] exist = new boolean[n];
        Arrays.fill(exist, true);
        for (int step = 0; step < 5000; step++) {
            for (int i = 0; i < n; i++) {
                if (exist[i]) ants[i].move();
            }
            HashSet<Integer> toRemove = new HashSet<Integer>();
            for (int i = 0; i < n; i++) {
                for (int j = i + 1; j < n; j++) {
                    if (exist[i] && exist[j]) {
                        if (ants[i].eq(ants[j])) {
                            toRemove.add(i);
                            toRemove.add(j);
                        }
                    }
                }
            }
            for (int i : toRemove) {
                exist[i] = false;
                ret--;
            }
        }
        return ret;
	}

    private boolean hasMeetup() {
        return false;
    }

    // BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, String p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + "\"" + p2 + "\"");
		System.out.println("]");
		AntsMeet obj;
		int answer;
		obj = new AntsMeet();
		long startTime = System.currentTimeMillis();
		answer = obj.countAnts(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		String p2;
		int p3;

        // ----- test 0 -----
        p0 = new int[]{-1000,1000};
        p1 = new int[]{-1000,1000};
        p2 = "NW";
        p3 = 0;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 0 -----
        p0 = new int[]{0,9,0,0};
        p1 = new int[]{0,0,4,5};
        p2 = "EWSS";
        p3 = 2;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

		// ----- test 0 -----
		p0 = new int[]{0,10,20,30};
		p1 = new int[]{0,10,20,30};
		p2 = "NWNE";
		p3 = 2;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{-10,0,0,10};
		p1 = new int[]{0,-10,10,0};
		p2 = "NEWS";
		p3 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{-1,-1,-1,0,0,0,1,1,1};
		p1 = new int[]{-1,0,1,-1,0,1,-1,0,1};
		p2 = "ESEWNNEWW";
		p3 = 4;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{4,7,6,2,6,5,7,7,8,4,7,8,8,8,5,4,8,9,1,5,9,3,4,0,0,1,0,7,2,6,9,6,3,0,5,5,1,2,0,4,9,7,7,1,8,1,9,2,7,3};
		p1 = new int[]{2,3,0,6,8,4,9,0,5,0,2,4,3,8,1,5,0,7,3,7,0,9,8,1,9,4,7,8,1,1,6,6,6,2,8,5,1,9,0,1,1,1,7,0,2,5,4,7,5,3};
		p2 = "SSNWSWSENSWSESWEWSWSENWNNNESWSWSWWSSWEEWWNWWWNWENN";
		p3 = 25;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{478,-664,759,434,-405,513,565,-396,311,-174,56,993,251,-341,993,-112,242,129,383,513,-78,-341,-148,129,423,493,434,-405,478,-148,929,251,56,242,929,-78,423,-664,802,251,759,383,-112,-591,-591,-248,660,660,735,493};
		p1 = new int[]{-186,98,948,795,289,-678,948,-170,-195,290,-354,-424,289,-157,-166,150,706,-678,684,-294,-234,36,36,-294,-216,-234,427,945,265,-157,265,715,275,715,-186,337,798,-170,427,706,754,961,286,-216,798,286,961,684,-424,337};
		p2 = "WNSNNSSWWWEENWESNSWSWSEWWEWEWWWNWESNSSNNSNNWWWNESE";
		p3 = 44;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Magical Girl Lein is observing ants. 
	// There are N ants. At first, they have integer coordinates in the Cartesian plane. More precisely, ant i starts at the point (x[i], y[i]). 
	// All ants move at the same speed. Each ant moves in one of the four basic directions. (I.e., either parallel to the x axis or parallel to the y axis.) 
	// When 2 or more ants meet at the same time, these ants disappear. 
	// You are given two int[]s x and y, containing N elements each, 
	// and a String direction, containing N characters. 
	// Character i of direction encodes the direction in which ant i is going: 
	// 
	//  'N' means north (y coordinate increases), 
	//  'E' means east (x coordinate increases), 
	//  'S' means south (y coordinate decreases), 
	//  and 'W' means west (x coordinate decreases). 
	// 
	// Return the number of ants that still exist after the last meeting occurs.
	// 
	// DEFINITION
	// Class:AntsMeet
	// Method:countAnts
	// Parameters:int[], int[], String
	// Returns:int
	// Method signature:int countAnts(int[] x, int[] y, String direction)
	// 
	// 
	// CONSTRAINTS
	// -x will contain between 1 and 50 elements, inclusive.
	// -y will contain the same number of elements as x.
	// -The number of characters in direction will be the same as the number of elements in x.
	// -Each element of x and y will be between -1000 and 1000, inclusive.
	// -No pair of points in the input will be equal.
	// -Each character of direction will be one of 'N', 'E', 'W' and 'S'.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {0,10,20,30}
	// {0,10,20,30}
	// "NWNE"
	// 
	// Returns: 2
	// 
	// The ants that start at (0,0) and (10,10) will meet at (0, 10) at time 10.
	// The remaining two ants will never meet.
	// 
	// 1)
	// {-10,0,0,10}
	// {0,-10,10,0}
	// "NEWS"
	// 
	// Returns: 0
	// 
	// More than two ants can meet at the same time.
	// 
	// 2)
	// {-1,-1,-1,0,0,0,1,1,1}
	// {-1,0,1,-1,0,1,-1,0,1}
	// "ESEWNNEWW"
	// 
	// Returns: 4
	// 
	// The ants that start at (-1,-1) and (0,-1) will meet at (-0.5,-1). 
	// The ants that start at (-1,1), (0,0) and (1,1) will meet at (0,1). 
	// Thus, 4 ants will remain after all meetings. 
	// Note that ants that start at (-1,0) and (0,-1) won't meet at (-1,1) because one of them will disappear before reaching the meeting point.
	// 
	// 3)
	// {4,7,6,2,6,5,7,7,8,4,7,8,8,8,5,4,8,9,1,5,9,3,4,0,0,1,0,7,2,6,9,6,3,0,5,5,1,2,0,4,9,7,7,1,8,1,9,2,7,3}
	// {2,3,0,6,8,4,9,0,5,0,2,4,3,8,1,5,0,7,3,7,0,9,8,1,9,4,7,8,1,1,6,6,6,2,8,5,1,9,0,1,1,1,7,0,2,5,4,7,5,3}
	// "SSNWSWSENSWSESWEWSWSENWNNNESWSWSWWSSWEEWWNWWWNWENN" 
	// 
	// Returns: 25
	// 
	// 
	// 
	// 4)
	// {478,-664,759,434,-405,513,565,-396,311,-174,56,993,251,-341,993,-112,242,129,383,513,-78,-341,-148,129,423
	// ,493,434,-405,478,-148,929,251,56,242,929,-78,423,-664,802,251,759,383,-112,-591,-591,-248,660,660,735,493}
	// {-186,98,948,795,289,-678,948,-170,-195,290,-354,-424,289,-157,-166,150,706,-678,684,-294,-234,36,36,-294,-216
	// ,-234,427,945,265,-157,265,715,275,715,-186,337,798,-170,427,706,754,961,286,-216,798,286,961,684,-424,337}
	// "WNSNNSSWWWEENWESNSWSWSEWWEWEWWWNWESNSSNNSNNWWWNESE"
	// 
	// Returns: 44
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
