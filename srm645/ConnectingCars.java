import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ConnectingCars
{
    class Car implements Comparable<Car> {
        int start, end;
        public Car(int start, int end) {
            this.start = start;
            this.end = end;
        }

        @Override
        public int compareTo(Car o) {
            return Integer.compare(this.start, o.start);
        }

        public int distTo(Car car) {
            return car.start - this.end;
        }
    }
	public long minimizeCost(int[] positions, int[] lengths)
	{
        int n = positions.length;
        Car[] c = new Car[n];
        for (int i = 0; i < n; i++) {
            c[i] = new Car(positions[i], positions[i] + lengths[i]);
        }
        Arrays.sort(c);
        int left = 0, right = n - 1;
        long ret = 0;
        while (left < right) {
            if (left + 1 == right) {
                ret += 1L * (left + 1) * c[left].distTo(c[right]);
            } else {
                ret += 1L * (left + 1) * (c[left].distTo(c[left + 1]) + c[right - 1].distTo(c[right]));
            }
            left++;
            right--;
        }
        return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, long p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		ConnectingCars obj;
		long answer;
		obj = new ConnectingCars();
		long startTime = System.currentTimeMillis();
		answer = obj.minimizeCost(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		long p2;
		
		// ----- test 0 -----
		p0 = new int[]{1,3,10,20};
		p1 = new int[]{2,2,5,3};
		p2 = 15L;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{100,50,1};
		p1 = new int[]{10,2,1};
		p2 = 96L;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{4,10,100,13,80};
		p1 = new int[]{5,3,42,40,9};
		p2 = 66L;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{5606451,63581020,81615191,190991272,352848147,413795385,468408016,615921162,760622952,791438427};
		p1 = new int[]{42643329,9909484,58137134,99547272,39849232,15146704,144630245,604149,15591965,107856540};
		p2 = 1009957100L;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Janusz works in roller coaster maintenance.
	// The station of the roller coaster is a long straight segment of railroad tracks.
	// There are some cars on those tracks.
	// The cars are currently not attached to each other, and there may be gaps between some of them.
	// Janusz has to push them all together and connect them into a train.
	// 
	// You are given the int[]s positions and lengths.
	// For each valid i, there is a car that is lengths[i] meters long and starts positions[i] meters from the beginning of the station.
	// (In other words, the coordinates currently occupied by this car are in the interval from positions[i] to positions[i]+lengths[i].)
	// 
	// Moving a single car one meter in either direction costs Janusz one unit of energy.
	// Compute the smallest total amount of energy sufficient to push all cars together.
	// In the final configuration the cars must be located one after another with no gaps between them.
	// 
	// (Note that there is no restriction on the movement of cars or on the final position of the train. 
	// Janusz may push the cars in any order, and he may even push some cars by a non-integer number of meters if he wants to.)
	// 
	// 
	// DEFINITION
	// Class:ConnectingCars
	// Method:minimizeCost
	// Parameters:int[], int[]
	// Returns:long
	// Method signature:long minimizeCost(int[] positions, int[] lengths)
	// 
	// 
	// NOTES
	// -You may assume that the optimal answer is always an integer that fits into a signed 64-bit integer data type.
	// 
	// 
	// CONSTRAINTS
	// -lengths and positions will have the same number of elements.
	// -lengths will have between 2 and 50 elements, inclusive.
	// -Each element of lengths and positions will be between 1 and 10^9, inclusive.
	// -The segments occupied by the cars may touch but they will not overlap.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1, 3, 10, 20}
	// {2, 2, 5, 3}
	// 
	// Returns: 15
	// 
	// There are four cars.
	// The intervals currently occupied by the cars are (1,3), (3,5), (10,15), and (20,23).
	// In one optimal solution Janusz would move each of the first two cars three meters to the right, the third car two meters to the left, and the fourth car seven meters to the left.
	// At the end, the cars occupy the intervals (4,6), (6,8), (8,13), and (13,16).
	// Total energy spent: 3+3+2+7 = 15.
	// 
	// 1)
	// {100, 50, 1}
	// 
	// {10, 2, 1}
	// 
	// Returns: 96
	// 
	// There are three cars.
	// The gaps between consecutive cars have 48 meters each.
	// The best solution is to keep the middle car in place and to push the other two towards it.
	// This requires 48+48 = 96 units of energy.
	// 
	// 2)
	// {4, 10, 100, 13, 80}
	// {5, 3, 42, 40, 9}
	// 
	// Returns: 66
	// 
	// 
	// 
	// 3)
	// {5606451, 63581020, 81615191, 190991272, 352848147, 413795385, 468408016, 615921162, 760622952, 791438427}
	// {42643329, 9909484, 58137134, 99547272, 39849232, 15146704, 144630245, 604149, 15591965, 107856540}
	// 
	// Returns: 1009957100
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
