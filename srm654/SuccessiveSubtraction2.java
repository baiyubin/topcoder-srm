import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class SuccessiveSubtraction2 {
	public int[] calc(int[] a, int[] p, int[] v) {
		int[] result = new int[p.length];

		for (int i = 0; i < p.length; i++) {
			a[p[i]] = v[i];
			result[i] = getMax(a);
		}
		return result;
	}
	public int getMax(int[] a) {
		int n = a.length;
		int[] left = new int[n + 1];
		int[] right = new int[n + 1];
		int curr = 0, max = 0;
		for (int i = 2; i < n; i++) {
			curr = Math.max(a[i], curr + a[i]);
			max = Math.max(curr, max);
			left[i] = max;
		}

		curr = max = 0;
		for (int i = n - 1; i >= 2; i--) {
			curr = Math.max(a[i], curr + a[i]);
			max = Math.max(curr, max);
			right[i] = max;
		}

		int result = 0;
		for (int i = 2; i < n; i++) {
			result = Math.max(result, left[i] + right[i + 1]);
		}
		result *= 2;
		for (int i = 1; i < n; i++) {
			result -= a[i];
		}
		return result + a[0];
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int[] p2, boolean hasAnswer, int[] p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p2[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SuccessiveSubtraction2 obj;
		int[] answer;
		obj = new SuccessiveSubtraction2();
		long startTime = System.currentTimeMillis();
		answer = obj.calc(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p3.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p3[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p3.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p3[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int[] p0;
		int[] p1;
		int[] p2;
		int[] p3;

		// ----- test 0 -----
		p0 = new int[] {1, 2, 3, 4, 5};
		p1 = new int[] {1, 2, 0, 4, 3};
		p2 = new int[] {3, 9, -10, 5, 1};
		p3 = new int[] {10, 16, 5, 5, 2};
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new int[] { -100, -100, -100, -100, -100};
		p1 = new int[] {0, 1, 2, 3, 4};
		p2 = new int[] {0, 0, 0, 0, 0};
		p3 = new int[] {400, 300, 200, 100, 0};
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new int[] {83, 0, 25, 21};
		p1 = new int[] {0, 3, 2, 1, 3, 1, 2};
		p2 = new int[] {10, -90, 33, 52, -100, 0, 45};
		p3 = new int[] {56, 125, 133, 81, 91, 143, 155};
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new int[] {1};
		p1 = new int[] {0, 0, 0, 0};
		p2 = new int[] {10, -10, 100, -100};
		p3 = new int[] {10, -10, 100, -100};
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = new int[] { -11, -4, 28, 38, 21, -29, -45, 11, -58, -39, 92, 35, -56, -6, 29, -2, 61, 10, -29, -63};
		p1 = new int[] {19, 5, 3, 10, 4, 18, 5, 2, 0, 15};
		p2 = new int[] { -19, 21, 7, -66, 38, -39, -22, 24, -32, 13};
		p3 = new int[] {451, 443, 412, 440, 457, 467, 468, 464, 443, 458};
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	//
	// One day, Maki found an expression written on the blackboard in her high school.
	// The expression had the following form: "a[0] - a[1] - ... - a[n-1]".
	// You are given the int[] a containing the numbers used in the expression, in order of appearance.
	// Note that some of these numbers may be negative.
	// For example, a={1,-3,5} represents the expression "1-(-3)-5".
	//
	//
	// Maki noticed she can change the value of the expression by inserting additional parentheses.
	// For example, she can change "1-3-3-4-5" (which equals -14) to "1-(3-3-(4-5))" (which equals 0), or to "1-(3-3-4-5)" (which equals 10).
	//
	//
	// To keep things simple, Maki decided that she may add at most two pairs of parentheses.
	// Given this rule, Maki wanted to produce a value that would be as large as possible.
	// She quickly found the optimal solution for the above expression.
	// (In this problem we do not care about its value.)
	//
	//
	// Then, her mischievous friend Niko entered the classroom and she started to alter the expression.
	// Niko applied several consecutive changes.
	// In the i-th change, she erased the number at position p[i] and replaced it by the new value v[i].
	// (Both changes and positions are numbered starting from 0.)
	// You are given the int[]s p and v, each containing the same number of elements.
	//
	//
	// After each of Niko's changes, Maki quickly solved her problem for the new sequence.
	// Note that she always solved it in her head, without actually adding any parentheses to the blackboard.
	//
	//
	// Return a int[] with as many elements as there were changes by Niko.
	// For each i, element i of the return value should be the largest value Mako can produce from the expression after Niko's change number i.
	//
	//
	// DEFINITION
	// Class:SuccessiveSubtraction2
	// Method:calc
	// Parameters:int[], int[], int[]
	// Returns:int[]
	// Method signature:int[] calc(int[] a, int[] p, int[] v)
	//
	//
	// NOTES
	// -Parentheses can only be used to change the order in which the subtractions are evaluated. For example, "1(-2-3)", ")(1-2-3", and "12(34-56)78" are not valid ways to add parentheses.
	//
	//
	// CONSTRAINTS
	// -a will contain between 1 and 2000 elements, inclusive.
	// -p will contain between 1 and 2000 elements, inclusive.
	// -p and v will contain the same number of elements.
	// -All numbers in a and v will be between -100 and 100, inclusive.
	// -All numbers in p will be between 0 and N-1, inclusive, where N is the number of elements in a.
	//
	//
	// EXAMPLES
	//
	// 0)
	// {1, 2, 3, 4, 5}
	// {1, 2, 0, 4, 3}
	// {3, 9, -10, 5, 1}
	//
	// Returns: {10, 16, 5, 5, 2 }
	//
	// This is how the expression looks like after each of Niko's changes:
	//
	//     1 - 3 - 3 - 4 - 5
	//     1 - 3 - 9 - 4 - 5
	// (-10) - 3 - 9 - 4 - 5
	// (-10) - 3 - 9 - 4 - 5
	// (-10) - 3 - 9 - 1 - 5		(fixed)
	//
	// One optimal solution for the first expression is given in the problem statement.
	//
	// 1)
	// {-100, -100, -100, -100, -100}
	// {0, 1, 2, 3, 4}
	// {0, 0, 0, 0, 0}
	//
	// Returns: {400, 300, 200, 100, 0 }
	//
	// One optimal solution for the expression "0 - (-100) - (-100) - (-100) - (-100)" is not to add any parentheses at all.
	// Alternately, we can change the expression to "((0 - (-100) - (-100) - (-100) - (-100)))" which still has the same value.
	//
	// 2)
	// {83, 0, 25, 21}
	// {0, 3, 2, 1, 3, 1, 2}
	// {10, -90, 33, 52, -100, 0, 45}
	//
	// Returns: {56, 125, 133, 81, 91, 143, 155 }
	//
	//
	//
	// 3)
	// {1}
	// {0, 0, 0, 0}
	// {10, -10, 100, -100}
	//
	// Returns: {10, -10, 100, -100 }
	//
	// There is only one number. The value of the expression is always equal to this number.
	//
	// 4)
	// {-11, -4, 28, 38, 21, -29, -45, 11, -58, -39, 92, 35, -56, -6, 29, -2, 61, 10, -29, -63}
	// {19, 5, 3, 10, 4, 18, 5, 2, 0, 15}
	// {-19, 21, 7, -66, 38, -39, -22, 24, -32, 13}
	//
	// Returns: {451, 443, 412, 440, 457, 467, 468, 464, 443, 458 }
	//
	//
	//
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
