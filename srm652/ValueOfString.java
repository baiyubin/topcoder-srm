import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ValueOfString
{
	public int findValue(String s)
	{
		int[] k = new int[27];
        for (char c : s.toCharArray()) {
            for (int i = c - 'a' + 1; i <= 26; i++) {
                k[i]++;
            }
        }
        int result = 0;
        for (char c : s.toCharArray()) {
            result += k[c - 'a' + 1] * (c - 'a' + 1);
        }
        return result;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		ValueOfString obj;
		int answer;
		obj = new ValueOfString();
		long startTime = System.currentTimeMillis();
		answer = obj.findValue(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		int p1;
		
		// ----- test 0 -----
		p0 = "babca";
		p1 = 35;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "zz";
		p1 = 104;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "y";
		p1 = 25;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "aaabbc";
		p1 = 47;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "topcoder";
		p1 = 558;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = "thequickbrownfoxjumpsoverthelazydog";
		p1 = 11187;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = "zyxwvutsrqponmlkjihgfedcba";
		p1 = 6201;
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// You are given a String s consisting of lower case letters.
	// We assign the letters 'a' to 'z' values of 1 to 26, respectively.
	// We will denote the value assigned to the letter X by val[X].
	// For example, val['a'] = 1 and val['e'] = 5.
	// 
	// 
	// 
	// We define the value of the string s as follows.
	// For each letter s[i], let k[i] be the number of letters in s that are less than or equal to s[i], including s[i] itself.
	// Then, the value of s is defined to be the sum of k[i] * val[s[i]] for all valid i.
	// 
	// 
	// 
	// Given the string, compute and return the value of the string.
	// 
	// 
	// DEFINITION
	// Class:ValueOfString
	// Method:findValue
	// Parameters:String
	// Returns:int
	// Method signature:int findValue(String s)
	// 
	// 
	// CONSTRAINTS
	// -s will contain between 1 and 50 characters, inclusive.
	// -s will consist of lowercase letters ('a'-'z').
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "babca"
	// 
	// Returns: 35
	// 
	// 
	// The value of this string is 2*4 + 1*2 + 2*4 + 3*5 + 1*2 = 35.
	// 
	// 
	// 
	// We can get the value as follows. The first character is a 'b' which has value 2, and has 4 characters that are less than or equal to it in the string (i.e. the first, second, third and fifth character of the string). Thus, this first character contributes 2*4 to the sum. We can derive a similar expression for each of the other characters. 
	// 
	// 
	// 1)
	// "zz"
	// 
	// Returns: 104
	// 
	// 
	// 
	// 2)
	// "y"
	// 
	// Returns: 25
	// 
	// 
	// 
	// 3)
	// "aaabbc"
	// 
	// Returns: 47
	// 
	// 
	// 
	// 4)
	// "topcoder"
	// 
	// Returns: 558
	// 
	// 
	// 
	// 5)
	// "thequickbrownfoxjumpsoverthelazydog"
	// 
	// Returns: 11187
	// 
	// 
	// 
	// 6)
	// "zyxwvutsrqponmlkjihgfedcba"
	// 
	// Returns: 6201
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
