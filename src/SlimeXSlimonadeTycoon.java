import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class SlimeXSlimonadeTycoon
{
	public int sell(int[] morning, int[] customers, int stale_limit)
	{
		
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + p2);
		System.out.println("]");
		SlimeXSlimonadeTycoon obj;
		int answer;
		obj = new SlimeXSlimonadeTycoon();
		long startTime = System.currentTimeMillis();
		answer = obj.sell(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int p2;
		int p3;
		
		// ----- test 0 -----
		p0 = new int[]{5,1,1};
		p1 = new int[]{1,2,3};
		p2 = 2;
		p3 = 5;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{10,20,30};
		p1 = new int[]{30,20,10};
		p2 = 1;
		p3 = 40;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{1,2,3,4,5};
		p1 = new int[]{5,5,5,5,5};
		p2 = 5;
		p3 = 15;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{10000,0,0,0,0,0,0};
		p1 = new int[]{1,2,4,8,16,32,64};
		p2 = 4;
		p3 = 15;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// You are playing a game called Slime Tycoon.
	// You will be selling Slimonades in this game, and your goal is to sell as many as you can.
	// 
	// The game will consist of N game days, numbered 0 through N-1 in order.
	// You are given two int[]s morning and customers with N elements each, and an int stale_limit.
	// These represent constraints on how many Slimonades you can produce and sell, as explained below.
	// 
	// In each game day, three things happen, in the following order:
	// 
	// Early in the morning of day i: All Slimonades that were produced stale_limit days ago (i.e., on day i-stale_limit) go stale. You cannot sell stale Slimonades, you must throw them away immediately.
	// During day i: You can produce at most morning[i] new Slimonades. (Formally, you choose an integer X between 0 and morning[i], inclusive, and produce X Slimonades.)
	// In the evening of day i: You can sell at most customers[i] Slimonades. (That is, if you have at most customers[i] Slimonades, you sell all of them. Otherwise, you sell exactly customers[i] Slimonades. In that case, you get to choose which Slimonades you sell and which ones you keep for later days.)
	// 
	// 
	// What is the maximum total number of Slimonades that you can sell during these N days?
	// 
	// DEFINITION
	// Class:SlimeXSlimonadeTycoon
	// Method:sell
	// Parameters:int[], int[], int
	// Returns:int
	// Method signature:int sell(int[] morning, int[] customers, int stale_limit)
	// 
	// 
	// CONSTRAINTS
	// -morning will contain between 2 and 50 elements, inclusive.
	// -Each element of morning will be between 0 and 10000, inclusive.
	// -customers will contain the same number of elements as morning.
	// -Each element of customers will be between 0 and 10000, inclusive.
	// -stale_limit will be between 1 and N, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {5, 1, 1}
	// {1, 2, 3}
	// 2
	// 
	// Returns: 5
	// 
	// Here's one optimal solution.
	// 
	// Day 0: We produce 4 Slimonades, then sell 1 of them.
	// Day 1: We produce 1 Slimonade (so now we have 4). In the evening, we sell two of the Slimonades that were made yesterday.
	// Day 2: We still have one Slimonade that was made on day 0. It goes stale and we throw it away. We produce one more Slimonade. In the evening, we sell 2 Slimonades (the one made yesterday and the one made today).
	// 
	// 
	// 1)
	// {10, 20, 30}
	// {30, 20, 10}
	// 1
	// 
	// Returns: 40
	// 
	// As stale_limit=1, each evening we can only sell Slimonades made during that day. Hence, we can sell at most 10 Slimonades on day 0, 20 on day 1, and 10 on day 2.
	// 
	// 2)
	// {1, 2, 3, 4, 5}
	// {5, 5, 5, 5, 5}
	// 5
	// 
	// Returns: 15
	// 
	// 
	// 
	// 3)
	// {10000, 0, 0, 0, 0, 0, 0}
	// {1, 2, 4, 8, 16, 32, 64}
	// 4
	// 
	// Returns: 15
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
