import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class AliceGameEasy {
    public long findMinimumValue(long x, long y) {
        long len, len2;
        long ret = 0;
        len = getLen(x, y);
        if (x == 0) {
            return (len >= 0) ? 0 : -1;
        }

        while (x > 0) {
            len = getLen(x, y);
            if (len > 0) {
                if (y == 0) return ret + len;
                len2 = getLen(x - len, y);
                if (len2 > 0) {
                    ret++;
                    x -= len;
                } else {
                    y -= len;
                }
            } else {
                return -1;
            }
        }

        return ret;
    }

    private long getLen(long x, long y) {
        long t = x + y;
        long tt = t * 2;
        long len = (long) Math.floor(Math.sqrt(1.0 * tt));
        return (len * (len + 1) == tt) ? len : -1L;
    }


    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, long p0, long p1, boolean hasAnswer, long p2) {
        System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
        System.out.println("]");
        AliceGameEasy obj;
        long answer;
        obj = new AliceGameEasy();
        long startTime = System.currentTimeMillis();
        answer = obj.findMinimumValue(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p2);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p2;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        long p0;
        long p1;
        long p2;

        // ----- test 0 -----
        p0 = 0L;
        p1 = 4L;
        p2 = -1L;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 0 -----
        p0 = 7L;
        p1 = 14L;
        p2 = 2L;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 10L;
        p1 = 0L;
        p2 = 4L;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 932599670050L;
        p1 = 67400241741L;
        p2 = 1047062L;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = 7L;
        p1 = 13L;
        p2 = -1L;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = 0L;
        p1 = 0L;
        p2 = 0L;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = 100000L;
        p1 = 400500L;
        p2 = 106L;
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    //
    // Alice and Kirito just played a game.
    // The game consisted of a finite (possibly empty) sequence of turns.
    // You do not know the exact number of turns.
    // The turns were numbered starting from 1.
    // In each turn, exactly one of our two players won.
    // The winner of turn i scored i points.
    //
    //
    //
    // You are given two longs x and y.
    // Find out whether it is possible that at the end of the game Alice had exactly x points and Kirito had exactly y points.
    // If it is possible, return the smallest number of turns Alice could have won.
    // If the given final result is not possible, return -1 instead.
    //
    //
    // DEFINITION
    // Class:AliceGameEasy
    // Method:findMinimumValue
    // Parameters:long, long
    // Returns:long
    // Method signature:long findMinimumValue(long x, long y)
    //
    //
    // CONSTRAINTS
    // -x and y will be between 0 and 1,000,000,000,000(10^12), inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // 7
    // 14
    //
    // Returns: 2
    //
    // This final result is possible.
    // One possibility is that Alice won turns 1, 2, and 4 (for 1+2+4 = 7 points) and Kirito won turns 3, 5, and 6 (for 3+5+6 = 14 points).
    // However, there are also some other possibilities in which Alice only won two of the six turns, so the correct answer is 2.
    //
    // 1)
    // 10
    // 0
    //
    // Returns: 4
    //
    // There must have been four turns and Alice must have won all four of them.
    //
    // 2)
    // 932599670050
    // 67400241741
    //
    // Returns: 1047062
    //
    // Watch out for integer overflow.
    //
    // 3)
    // 7
    // 13
    //
    // Returns: -1
    //
    //
    //
    // 4)
    // 0
    // 0
    //
    // Returns: 0
    //
    //
    //
    // 5)
    // 100000
    // 400500
    //
    // Returns: 106
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
