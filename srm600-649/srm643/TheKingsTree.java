import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

/**
 * srm643
 */
public class TheKingsTree {
    ArrayList<ArrayList<Integer>> t = new ArrayList<ArrayList<Integer>>();
    int[][][] mem = new int[51][51][51];
    int[] p;
    public int getNumber(int[] parent) {
        p = parent;
        for (int[][] a : mem) 
            for (int[] aa : a)
                Arrays.fill(aa, -1);
        for (int i = 0; i < 51; ++i) {
            t.add(new ArrayList<Integer>());
        }
        for (int i = 0; i < p.length; ++i) {
            t.get(p[i]).add(i + 1);
        }

        // parent-attached cost of painting the tree under the node 
        int ret = solve(0, 0, 0);
        // cost of painting the nodes themselves
        ret += p.length + 1;
        return ret;
    }
    int solve(int c, int r, int g) {
        if (mem[c][r][g] != -1)
            return mem[c][r][g];
        int ans1 = r;
        for (int i = 0; i < t.get(c).size(); i++)
            ans1 += solve(t.get(c).get(i), r + 1, g);
        int ans2 = g;
        for (int i = 0; i < t.get(c).size(); i++)
            ans2 += solve(t.get(c).get(i), r, g + 1);
        return mem[c][r][g] = Math.min(ans1, ans2);
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}");
        System.out.println("]");
        TheKingsTree obj;
        int answer;
        obj = new TheKingsTree();
        long startTime = System.currentTimeMillis();
        answer = obj.getNumber(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p1);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p1;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int p1;

        // ----- test 0 -----
        p0 = new int[] {0, 0, 0};
        p1 = 4;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] {0, 1, 2, 3, 4};
        p1 = 12;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] {0, 1, 2, 3, 1};
        p1 = 10;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] {0, 0, 1, 0, 4, 3, 5, 2, 0, 7, 9, 2, 4, 5, 3, 1};
        p1 = 26;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new int[] {};
        p1 = 1;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    //
    // The King of Byteland is going to decorate a rooted tree.
    // The tree has N vertices, numbered 0 through N-1.
    // Vertex 0 is the root of the tree.
    //
    //
    //
    //
    // You are given the description of the tree in a int[] parent.
    // For each valid i, the parent of vertex i+1 is parent[i].
    // Note that the number of the parent is always smaller than the number of the child.
    //
    //
    //
    //
    // Each vertex of the tree must be painted in one of two colors: red or green.
    // After the entire tree has been painted we can compute the cost of the painting.
    // For each i, the cost of painting vertex i is defined as the number of vertices that are in the subtree rooted at i and have the same color as vertex i.
    // For example, if a vertex is red and all other vertices in its subtree are green, the cost of painting this vertex is 1.
    // The cost of painting the entire tree is the sum of all costs of painting its vertices.
    //
    //
    //
    //
    // Return the minimum cost of painting the given tree.
    //
    //
    // DEFINITION
    // Class:TheKingsTree
    // Method:getNumber
    // Parameters:int[]
    // Returns:int
    // Method signature:int getNumber(int[] parent)
    //
    //
    // CONSTRAINTS
    // -N will be between 1 and 50, inclusive.
    // -parent will contain exactly N-1 elements.
    // -For each i, parent[i] will be between 0 and i, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {0, 0, 0}
    //
    // Returns: 4
    //
    // The root vertex 0 has three children: vertices 1, 2, and 3.
    // One optimal way to color this tree is to color all three children red and their parent green.
    //
    // 1)
    // {0, 1, 2, 3, 4}
    //
    // Returns: 12
    //
    // Color any three vertices green and the other three red.
    //
    // 2)
    // {0, 1, 2, 3, 1}
    //
    // Returns: 10
    //
    //
    //
    // 3)
    // {0, 0, 1, 0, 4, 3, 5, 2, 0, 7, 9, 2, 4, 5, 3, 1}
    //
    // Returns: 26
    //
    //
    //
    // 4)
    // {}
    //
    // Returns: 1
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
