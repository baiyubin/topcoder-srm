import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class DifferentStrings {
    /**
     * 441
     * @param A
     * @param B
     * @return
     */
    public int minimize(String A, String B) {
        int n = A.length(), m = B.length();
        int ret = A.length();
        for (int i = 0; i <= m - n; i++) {
            ret = Math.min(ret, diff(A, B.substring(i, i + n)));
        }
        return ret;
    }

    public int diff(String a, String b) {
        int ret = 0;
        for (int i = 0; i < a.length(); i++) {
            if (a.charAt(i) != b.charAt(i)) ret++;
        }
        return ret;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String p0, String p1, boolean hasAnswer, int p2) {
        System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + "\"" + p1 + "\"");
        System.out.println("]");
        DifferentStrings obj;
        int answer;
        obj = new DifferentStrings();
        long startTime = System.currentTimeMillis();
        answer = obj.minimize(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p2);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p2;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String p0;
        String p1;
        int p2;

        // ----- test 0 -----
        p0 = "koder";
        p1 = "topcoder";
        p2 = 1;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = "hello";
        p1 = "xello";
        p2 = 1;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = "abc";
        p1 = "topabcoder";
        p2 = 0;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = "adaabc";
        p1 = "aababbc";
        p2 = 2;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = "giorgi";
        p1 = "igroig";
        p2 = 6;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // If X and Y are two Strings of equal length N, then the difference between them is defined as the number of indices i where the i-th character of X and the i-th character of Y are different.  For example, the difference between the words "ant" and "art" is 1.
    //
    // You are given two Strings, A and B, where the length of A is less than or equal to the length of B.  You can apply an arbitrary number of operations to A, where each operation is one of the following:
    //
    //
    // Choose a character c and add it to the beginning of A.
    // Choose a character c and add it to the end of A.
    //
    //
    // Apply the operations in such a way that A and B have the same length and the difference between them is as small as possible.  Return this minimum possible difference.
    //
    // DEFINITION
    // Class:DifferentStrings
    // Method:minimize
    // Parameters:String, String
    // Returns:int
    // Method signature:int minimize(String A, String B)
    //
    //
    // CONSTRAINTS
    // -A and B will each contain between 1 and 50 characters, inclusive.
    // -A and B will both contain only lowercase letters ('a'-'z').
    // -The length of A will be less than or equal to the length of B.
    //
    //
    // EXAMPLES
    //
    // 0)
    // "koder"
    // "topcoder"
    //
    // Returns: 1
    //
    // You can prepend "top" to "koder" and you'll get "topkoder". The difference between "topkoder" and "topcoder" is 1.
    //
    // 1)
    // "hello"
    // "xello"
    //
    // Returns: 1
    //
    // A and B already have the same length so you cannot add any characters to A.
    //
    // 2)
    // "abc"
    // "topabcoder"
    //
    // Returns: 0
    //
    //
    //
    // 3)
    // "adaabc"
    // "aababbc"
    //
    // Returns: 2
    //
    //
    //
    // 4)
    // "giorgi"
    // "igroig"
    //
    // Returns: 6
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
