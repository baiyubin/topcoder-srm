import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TheFootballDivTwo {
    class Team implements Comparable<Team> {
        int score, number, matchLeft;

        public Team(int score, int number) {
            this.score = score;
            this.number = number;
            this.matchLeft = 2;
        }

        @Override
        public int compareTo(Team o) {
            return Integer.compare(this.score, o.score);
        }
    }

    /**
     * srm 646 1000pt
     * total pts to give = number of remaining matches = number of teams
     * each team can gain max 6 pts
     * own team gets 6 pts
     *
     * @param yourScore
     * @param scores
     * @param numberOfTeams
     * @return
     */
    public int find(int yourScore, int[] scores, int[] numberOfTeams) {
        int teams = 1;
        int n = scores.length;
        ArrayList<Team> t = new ArrayList<Team>();
        for (int i = 0; i < n; i++) {
            teams += numberOfTeams[i];
            t.add(new Team(scores[i], numberOfTeams[i]));
        }
        Collections.sort(t);
        yourScore += 6;
        int ptToGive = teams * 3 - 6;
        // give pt to worse teams
        for (int iter = 0; iter < 2; iter++) {
            for (int i = 0; i < n; i++) {
                Team curr = t.get(i);
                if (ptToGive > 0 && curr.score + 3 <= yourScore) {
                    if (ptToGive >= curr.number * 3) {
                        ptToGive -= curr.number * 3;
                        curr.score += 3;
                        curr.matchLeft -= 1;
                    } else {
                        int c = ptToGive / 3;
                        t.add(new Team(curr.score, curr.number - c));
                        curr.number = c;
                        curr.score += 3;
                        curr.matchLeft -= 1;
                        ptToGive = 0;
                    }
                }
            }
        }
    }

    // give pt to better teams
    return 0;
}

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, int[] p2, boolean hasAnswer, int p3) {
        System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p2.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p2[i]);
        }
        System.out.print("}");
        System.out.println("]");
        TheFootballDivTwo obj;
        int answer;
        obj = new TheFootballDivTwo();
        long startTime = System.currentTimeMillis();
        answer = obj.find(p0, p1, p2);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p3);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p3;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int p0;
        int[] p1;
        int[] p2;
        int p3;

        // ----- test 0 -----
        p0 = 4;
        p1 = new int[]{7};
        p2 = new int[]{1};
        p3 = 1;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 1;
        p1 = new int[]{7};
        p2 = new int[]{2};
        p3 = 2;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 1;
        p1 = new int[]{7, 1};
        p2 = new int[]{2, 1};
        p3 = 1;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = 11;
        p1 = new int[]{5, 12, 17, 19, 99, 13, 15, 14};
        p2 = new int[]{2, 4, 8, 2, 1, 3, 25, 3};
        p3 = 18;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // John and Brus are the managers of your football team.
    // The team is taking part in a tournament.
    // The tournament is almost over: each team still has exactly two matches to play (possibly both against the same opponent).
    // Note that two different teams play in each match.
    //
    //
    // There are no ties in this tournament.
    // Each match is played until one of the two teams wins.
    // The winner of a match gets 3 points, the loser gets 0 points.
    //
    //
    // You are given an int yourScore: the number of points your team has scored so far.
    // You are also given two int[]s scores and numberOfTeams that describe the other teams.
    // For each valid i, there are numberOfTeams[i] other teams that each have scored scores[i] points so far.
    // Note that the total number of teams in the tournament is 1 + sum(numberOfTeams).
    //
    //
    // At the end of the tournament, teams will be ranked by the total number of points.
    // Teams with the same number of points will be ranked according to their total score.
    //
    //
    // Given the above information, you are interested in the best possible (1-based) final rank of your team.
    // Note that you do not know which matches are still to be played, so you assume the best possible combination of matches that is consistent with the given information.
    //
    //
    // In other words, you want to find the smallest X such that there exists a valid set of future match results that causes your team to end in X-th place.
    // Note that your team's score can be arbitrarily good, so you may always assume that your team is placed above all other teams that have the same score as you.
    //
    //
    // Compute and return the X defined above.
    //
    //
    // DEFINITION
    // Class:TheFootballDivTwo
    // Method:find
    // Parameters:int, int[], int[]
    // Returns:int
    // Method signature:int find(int yourScore, int[] scores, int[] numberOfTeams)
    //
    //
    // NOTES
    // -The current scores given in yourScore and scores do not necessarily correspond to a valid game history. In particular, they do not have to be divisible by 3.
    //
    //
    // CONSTRAINTS
    // -yourScore will be between 0 and 100,000, inclusive.
    // -scores will contain between 1 and 47 elements, inclusive.
    // -scores and numberOfTeams will contain the same number of elements.
    // -Each element of scores will be between 0 and 100,000, inclusive.
    // -Each element of numberOfTeams will be between 1 and 100,000, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // 4
    // {7}
    // {1}
    //
    // Returns: 1
    //
    // There are two teams in the tournament.
    // They play two games against each other.
    // If your team wins both games it will be on the top of the scoreboard with 10 points.
    //
    // 1)
    // 1
    // {7}
    // {2}
    //
    // Returns: 2
    //
    // There are three teams.
    // Your team has 1 point and each of the other two teams has 7 points.
    // With three teams, the remaining matches are determined uniquely: each pair of teams must play a single match against each other.
    // The best possible final result for your team is to place second with 7 points.
    //
    // 2)
    // 1
    // {7, 1}
    // {2, 1}
    //
    // Returns: 1
    //
    // There are four teams - two with 1 point each and two with 7 points each.
    // If each 1-point team plays against each 7-point team and wins, each team will have 7 points in the end.
    //
    // 3)
    // 11
    // {5, 12, 17, 19, 99, 13, 15, 14}
    // {2, 4, 8, 2, 1, 3, 25, 3}
    //
    // Returns: 18
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
