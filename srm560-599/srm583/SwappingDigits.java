import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class SwappingDigits {
    public String minNumber(String num) {
        HashSet<String> result = new HashSet<String>();
        result.add(num);
        int n = num.length();
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                char[] arr = num.toCharArray();
                arr[i] = num.charAt(j);
                arr[j] = num.charAt(i);
                if (arr[0] != '0') result.add(new String(arr));
            }
        }
        return Collections.min(result);
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, String p1) {
        System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
        System.out.println("]");
        SwappingDigits obj;
        String answer;
        obj = new SwappingDigits();
        long startTime = System.currentTimeMillis();
        answer = obj.minNumber(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + "\"" + p1 + "\"");
        }
        System.out.println("Your answer:");
        System.out.println("\t" + "\"" + answer + "\"");
        if (hasAnswer) {
            res = answer.equals(p1);
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String p0;
        String p1;

        // ----- test 0 -----
        p0 = "596";
        p1 = "569";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = "93561";
        p1 = "13569";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = "5491727514";
        p1 = "1491727554";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = "10234";
        p1 = "10234";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = "93218910471211292416";
        p1 = "13218910471211292496";
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // Given is a String num. This String contains the digits of a (possibly large) positive integer. For example, num="1147" represents the integer 1147. The String num will not have any leading zeros.
    //
    // You are allowed to swap one pair of digits in the given number. In other words, you may choose a pair of distinct indices i and j, and swap the characters num[i] and num[j]. Note that you may also leave the original number unchanged. The new String must again describe a valid positive integer, i.e., it must not have any leading zeros.
    //
    // Find and return the String that represents the smallest possible integer that can be obtained.
    //
    // DEFINITION
    // Class:SwappingDigits
    // Method:minNumber
    // Parameters:String
    // Returns:String
    // Method signature:String minNumber(String num)
    //
    //
    // CONSTRAINTS
    // -The length of num will be between 2 and 50, inclusive.
    // -Each character of num will be between '0' and '9', inclusive.
    // -The first character of num will not be '0'.
    //
    //
    // EXAMPLES
    //
    // 0)
    // "596"
    //
    // Returns: "569"
    //
    // You can swap num[1] and num[2] to get the minimum integer.
    //
    // 1)
    // "93561"
    //
    // Returns: "13569"
    //
    //
    //
    // 2)
    // "5491727514"
    //
    // Returns: "1491727554"
    //
    //
    //
    // 3)
    // "10234"
    //
    // Returns: "10234"
    //
    // You can leave the original String num unchanged. Note that the result must not contain leading zeros.
    //
    // 4)
    // "93218910471211292416"
    //
    // Returns: "13218910471211292496"
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
