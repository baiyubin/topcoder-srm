import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class CartInSupermarketEasy {
	int[][] dp;
	public int calc(int N, int K) {
		dp = new int[120][120];
		for (int[] a : dp) {
			Arrays.fill(a, -1);
		}
		return go(N, K);
	}

	private int go(int n, int k) {
		if (dp[n][k] != -1) return dp[n][k];
		if (n == 0) return dp[n][k] = 0;

		dp[n][k] = n;
		dp[n][k] = Math.min(dp[n][k], go(n - 1, k) + 1);
		for (int i = 1; i < n; i++) {
			for (int kk = 0; kk <= k - 1; kk++) {
				dp[n][k] = Math.min(dp[n][k], Math.max(go(i, kk), go(n - i, k - 1 - kk)) + 1);
			}
		}
		return dp[n][k];
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		CartInSupermarketEasy obj;
		int answer;
		obj = new CartInSupermarketEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.calc(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int p0;
		int p1;
		int p2;

		// ----- test 0 -----
		p0 = 5;
		p1 = 0;
		p2 = 5;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = 5;
		p1 = 2;
		p2 = 4;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = 15;
		p1 = 4;
		p2 = 6;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = 7;
		p1 = 100;
		p2 = 4;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = 45;
		p1 = 5;
		p2 = 11;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 5 -----
		p0 = 100;
		p1 = 100;
		p2 = 8;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// You have a sequence that consists of N shopping carts.
	// You want to remove all of them as quickly as possible.
	//
	// The process of removing the carts will consist of one or more turns.
	// Each turn will take exactly one minute.
	// At the beginning of each turn, you will have some sequences of carts.
	// For each of those sequences you can choose between two options:
	//
	// split it (in an arbitrary place) into two shorter sequences
	// remove one shopping cart from the sequence
	//
	//
	// There is one additional constraint: during the entire process you can only choose to split a sequence at most K times.
	//
	// You are given the ints N and K.
	// Compute and return the smallest number of minutes in which it is possible to remove all the carts.
	//
	// DEFINITION
	// Class:CartInSupermarketEasy
	// Method:calc
	// Parameters:int, int
	// Returns:int
	// Method signature:int calc(int N, int K)
	//
	//
	// CONSTRAINTS
	// -N will be between 1 and 100, inclusive.
	// -K will be between 0 and 100, inclusive.
	//
	//
	// EXAMPLES
	//
	// 0)
	// 5
	// 0
	//
	// Returns: 5
	//
	// As K=0, you can never split any sequence. In each turn you have to remove one cart from your sequence. Hence, it will take 5 minutes to remove all 5 carts.
	//
	// 1)
	// 5
	// 2
	//
	// Returns: 4
	//
	// One optimal solution: {5} -> {2,3} -> {1,2} -> {1,1} -> {}. We used two splits: once when splitting the sequence of 5 carts into 2+3 and the second time when  splitting the sequence of 2 carts into 1+1.
	//
	// 2)
	// 15
	// 4
	//
	// Returns: 6
	//
	//
	//
	// 3)
	// 7
	// 100
	//
	// Returns: 4
	//
	// You don't have to split exactly K times.
	//
	// 4)
	// 45
	// 5
	//
	// Returns: 11
	//
	//
	//
	// 5)
	// 100
	// 100
	//
	// Returns: 8
	//
	//
	//
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
