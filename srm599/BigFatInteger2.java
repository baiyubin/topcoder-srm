import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class BigFatInteger2 {
    public String isDivisible(int A, int B, int C, int D) {
        HashMap<Integer, Long> mA = primeFactorsMap(A);
        HashMap<Integer, Long> mC = primeFactorsMap(C);
        for (int k : mA.keySet()) {
            mA.put(k, mA.get(k) * B);
        }
        for (int k : mC.keySet()) {
            mC.put(k, mC.get(k) * D);
        }
        boolean ret = true;
        for (int k : mC.keySet()) {
            if (!mA.containsKey(k) || mA.get(k) < mC.get(k)) {
                ret = false;
                break;
            }
        }
        return ret ? "divisible" : "not divisible";
    }

    public static HashMap<Integer, Long> primeFactorsMap(int number) {
        int n = number;
        HashMap<Integer, Long> factors = new HashMap<Integer, Long>();
        for (int i = 2; i <= n / i; i++) {
            while (n % i == 0) {
                if (factors.containsKey(i)) {
                    factors.put(i, factors.get(i) + 1);
                } else {
                    factors.put(i, 1L);
                }
                n /= i;
            }
        }
        if (n > 1) {
            if (factors.containsKey(n)) {
                factors.put(n, factors.get(n) + 1);
            } else {
                factors.put(n, 1L);
            }
        }
        return factors;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, boolean hasAnswer, String p4) {
        System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3);
        System.out.println("]");
        BigFatInteger2 obj;
        String answer;
        obj = new BigFatInteger2();
        long startTime = System.currentTimeMillis();
        answer = obj.isDivisible(p0, p1, p2, p3);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + "\"" + p4 + "\"");
        }
        System.out.println("Your answer:");
        System.out.println("\t" + "\"" + answer + "\"");
        if (hasAnswer) {
            res = answer.equals(p4);
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int p0;
        int p1;
        int p2;
        int p3;
        String p4;

        // ----- test 0 -----
        p0 = 6;
        p1 = 1;
        p2 = 2;
        p3 = 1;
        p4 = "divisible";
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 2;
        p1 = 1;
        p2 = 6;
        p3 = 1;
        p4 = "not divisible";
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 1000000000;
        p1 = 1000000000;
        p2 = 1000000000;
        p3 = 200000000;
        p4 = "divisible";
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = 8;
        p1 = 100;
        p2 = 4;
        p3 = 200;
        p4 = "not divisible";
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = 999999937;
        p1 = 1000000000;
        p2 = 999999929;
        p3 = 1;
        p4 = "not divisible";
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = 2;
        p1 = 2;
        p2 = 4;
        p3 = 1;
        p4 = "divisible";
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
