import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TwoLLogo {
    class Pair {
        public int x, y;
        public Pair(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    public List<Pair> v = new ArrayList<Pair>();
    int n, m;
    int[][] width, height;
    public long cross(int i, int j) {
        Pair a = v.get(i);
        Pair b = v.get(j);
        int ax = a.x;
        int bx = b.x;
        int ay = a.y;
        int by = b.y;
        long aw = width[a.y][a.x];
        long ah = height[a.y][a.x];
        long bw = width[b.y][b.x];
        long bh = height[b.y][b.x];
        if (ax == bx && by - bh < ay) {
            return aw * bw * ah * (bh - (by - ay) + 1);
        }
        if (ay == by && ax + aw >= bx) {
            return ah * bh * bw * (aw - (bx - ax) + 1);
        }
        if (ax < bx && ay < by && ax + aw >= bx && by - bh <= ay) {
            return ah * bw * (aw - (bx - ax) + 1) * (bh - (by - ay) + 1);
        }
        return 0;
    }

    public long countWays(String[] grid) {
        n = grid.length;
        m = grid[0].length();
        width = new int[n][m];
        height = new int[n][m];
        boolean[][] g = new boolean[n][m];
        for (int i = 0; i < n; i++) {
            char[] row = grid[i].toCharArray();
            for (int j = 0; j < m; j++) {
                g[i][j] = row[j] == '.';
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++)
                if (g[i][j]) {
                    int ii = i - 1, jj = j + 1;
                    int a = 0, b = 0;
                    while (ii >= 0 && ii < n && g[ii][j]) {
                        ii--;
                        a++;
                    }
                    while (jj >= 0 && jj < m && g[i][jj]) {
                        jj++;
                        b++;
                    }
                    width[i][j] = b;
                    height[i][j] = a;
                }
        }
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                if (width[i][j] > 0 && height[i][j] > 0) v.add(new Pair(j, i));

        long ret = 0;

        for (int i = 0; i < v.size(); i++)
            for (int j = i + 1; j < v.size(); j++) {
                Pair a = v.get(i);
                Pair b = v.get(j);
                ret += width[a.y][a.x] * width[b.y][b.x] * height[a.y][a.x] * height[b.y][b.x];
                ret -= cross(i, j);
            }

        return ret;

    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, long p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}");
        System.out.println("]");
        TwoLLogo obj;
        long answer;
        obj = new TwoLLogo();
        long startTime = System.currentTimeMillis();
        answer = obj.countWays(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p1);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p1;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String[] p0;
        long p1;

        // ----- test 0 -----
        // p0 = new String[] {"....", "...."};
        // p1 = 1L;
        // all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new String[] {".##..",
                           "...#.",
                           ".#.#.",
                           "#...#"
                          };
        p1 = 3L;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new String[] {"..#.", "#.#.", "....", "..#."};
        p1 = 4L;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new String[] {"..", ".."};
        p1 = 0L;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new String[] {".#.#", "....", ".#.#", "...."};
        p1 = 34L;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = new String[] {"##############", "##############", "#.############", "#.############", "#.############", "#.############", "#.############", "#.############", "#.#####.######", "#.#####.######", "#.#####.######", "#....##.######", "#######.######", "#######.######", "#######.######", "#######.######", "#######.######", "#######.######", "#######......#", "##############"};
        p1 = 1350L;
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------

        // ----- test 6 -----
        p0 = new String[] {"#......", ".#....#", ".#.#...", "#....#.", ".##..#.", ".#.....", ".....#.", ".#.#...", ".#...#.", "..##..."};
        p1 = 2386L;
        all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
        // ------------------

        // ----- test 7 -----
        p0 = new String[] {};
        p1 = 5020791386L;
        all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
