import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TheKingsFactorization {
    public long[] getVector(long N, long[] primes) {
        ArrayList<Long> ret = new ArrayList<Long>();
        for (long p : primes) {
            while (N % p == 0) {
                N /= p;
                ret.add(p);
            }
        }
        long p = primes[0];
        while (N > 1L && !BigInteger.valueOf(N).isProbablePrime(100)) {
            while (N % p != 0) {
                p++;
            }
            while (N % p == 0) {
                N /= p;
                ret.add(p);
            }
        }
        if (N > 1L) {
            ret.add(N);
        }
        long[] retArray = new long[ret.size()];
        for (int i = 0; i < ret.size(); i++) {
            retArray[i] = ret.get(i);
        }
        Arrays.sort(retArray);
        return retArray;
    }

    public long[] getVector2(long N, long[] primes) {
        int m = primes.length;
        long[] primes2 = new long[m];
        for (long p : primes) {
            N /= p;
        }
        for (int i = 0; i < m - 1; i++) {
            for (long j = primes[i]; j <= primes[i + 1]; j++) {
                if (N % j == 0) {
                    primes2[i] = j;
                    N /= j;
                    break;
                }
            }
        }
        long[] ret;
        if (N == 1) {
            ret = new long[2 * m - 1];
        } else {
            ret = new long[2 * m];
            primes2[m - 1] = N;
        }
        for (int i = 0; i < m - 1; i++) {
            ret[i * 2] = primes[i];
            ret[i * 2 + 1] = primes2[i];
        }
        ret[2 * m - 2] = primes[m - 1];
        if (ret.length == 2 * m) {
            ret[2 * m - 1] = primes2[m - 1];
        }
        return ret;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, long p0, long[] p1, boolean hasAnswer, long[] p2) {
        System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}");
        System.out.println("]");
        TheKingsFactorization obj;
        long[] answer;
        obj = new TheKingsFactorization();
        long startTime = System.currentTimeMillis();
        answer = obj.getVector(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.print("\t" + "{");
            for (int i = 0; p2.length > i; ++i) {
                if (i > 0) {
                    System.out.print(",");
                }
                System.out.print(p2[i]);
            }
            System.out.println("}");
        }
        System.out.println("Your answer:");
        System.out.print("\t" + "{");
        for (int i = 0; answer.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(answer[i]);
        }
        System.out.println("}");
        if (hasAnswer) {
            if (answer.length != p2.length) {
                res = false;
            } else {
                for (int i = 0; answer.length > i; ++i) {
                    if (answer[i] != p2[i]) {
                        res = false;
                    }
                }
            }
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        long p0;
        long[] p1;
        long[] p2;

        // ----- test 0 -----
        p0 = 980000140000004278L;
        p1 = new long[]{2, 700000069};
        p2 = new long[]{2, 700000031, 700000069};
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 0 -----
        p0 = 12L;
        p1 = new long[]{2L, 3L};
        p2 = new long[]{2L, 2L, 3L};
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 7L;
        p1 = new long[]{7L};
        p2 = new long[]{7L};
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 1764L;
        p1 = new long[]{2L, 3L, 7L};
        p2 = new long[]{2L, 2L, 3L, 3L, 7L, 7L};
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = 49L;
        p1 = new long[]{7L};
        p2 = new long[]{7L, 7L};
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = 210L;
        p1 = new long[]{2L, 5L};
        p2 = new long[]{2L, 3L, 5L, 7L};
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = 100000L;
        p1 = new long[]{2L, 2L, 2L, 5L, 5L};
        p2 = new long[]{2L, 2L, 2L, 2L, 2L, 5L, 5L, 5L, 5L, 5L};
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    //
    // The King of Byteland likes integer factorization.
    // Your task is to help him factor the number N.
    // You will be given the long N and you should return a long[] containing all prime factors of N sorted in non-decreasing order.
    // Note that some primes may occur multiple times in the prime factorization of N.
    // For example, for N = 60 the only correct return value is {2, 2, 3, 5} because 2*2*3*5 = 60.
    //
    //
    //
    //
    // To make this task easier, the King has decided to give you a hint.
    // He already knows the correct factorization and he will tell you every second number in the correct return value.
    // More precisely, in addition to N you will be given a long[] primes.
    // The number of elements in primes will be (M+1)/2, rounded down, where M is the number of elements in the correct return value.
    // For each valid i, primes[i] will be equal to the element 2i of the correct return value.
    // (All indices are 0-based.)
    //
    //
    //
    //
    // Given N and primes, return the long[] containing the factorization of N.
    //
    //
    // DEFINITION
    // Class:TheKingsFactorization
    // Method:getVector
    // Parameters:long, long[]
    // Returns:long[]
    // Method signature:long[] getVector(long N, long[] primes)
    //
    //
    // CONSTRAINTS
    // -N will be between 2 and 1,000,000,000,000,000,000 (10^18), inclusive.
    // -primes will contain the correct prime factors (as defined in the problem statement).
    //
    //
    // EXAMPLES
    //
    // 0)
    // 12
    // {2, 3}
    //
    // Returns: {2, 2, 3 }
    //
    //
    //
    // 1)
    // 7
    // {7}
    //
    // Returns: {7 }
    //
    //
    //
    // 2)
    // 1764
    // {2, 3, 7}
    //
    // Returns: {2, 2, 3, 3, 7, 7 }
    //
    //
    //
    // 3)
    // 49
    // {7}
    //
    // Returns: {7, 7 }
    //
    //
    //
    // 4)
    // 210
    // {2, 5}
    //
    // Returns: {2, 3, 5, 7 }
    //
    //
    //
    // 5)
    // 100000
    // {2, 2, 2, 5, 5}
    //
    // Returns: {2, 2, 2, 2, 2, 5, 5, 5, 5, 5 }
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
