import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class EightRooks {
    public String isCorrect(String[] board) {
        boolean[] col = new boolean[8];
        boolean[] row = new boolean[8];
        int counter = 0;
        for (int i = 0; i < 8; ++i) {
            for (int j = 0; j < 8; ++j) {
                if (board[i].charAt(j) == 'R') {
                    row[i] = col[j] = true;
                    counter++;
                }
            }
        }
        boolean result = counter == 8;
        for (boolean b : col) {
            result &= b;
        }
        for (boolean b : row) {
            result &= b;
        }
        return result ? "Correct" : "Incorrect";
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, String p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}");
        System.out.println("]");
        EightRooks obj;
        String answer;
        obj = new EightRooks();
        long startTime = System.currentTimeMillis();
        answer = obj.isCorrect(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + "\"" + p1 + "\"");
        }
        System.out.println("Your answer:");
        System.out.println("\t" + "\"" + answer + "\"");
        if (hasAnswer) {
            res = answer.equals(p1);
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String[] p0;
        String p1;

        // ----- test 0 -----
        p0 = new String[] {"R.......", ".R......", "..R.....", "...R....", "....R...", ".....R..", "......R.", ".......R"};
        p1 = "Correct";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new String[] {"........", "....R...", "........", ".R......", "........", "........", "..R.....", "........"};
        p1 = "Incorrect";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new String[] {"......R.", "....R...", "...R....", ".R......", "R.......", ".....R..", "..R.....", ".......R"};
        p1 = "Correct";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new String[] {"......R.", "....R...", "...R....", ".R......", "R.......", ".......R", "..R.....", ".......R"};
        p1 = "Incorrect";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new String[] {"........", "........", "........", "........", "........", "........", "........", "........"};
        p1 = "Incorrect";
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // Cat Snuke is playing a puzzle called Eight Rooks Puzzle.
    //
    //
    // In this puzzle, he must put exactly eight rooks onto an 8x8 chessboard. No two rooks must be in the same row, and no two rooks must be in the same column.
    //
    //
    // You are given a String[] board. The j-th character of the i-th element of board is either 'R' or '.'. If this is 'R', the cell in row i, column j contains a rook. Otherwise the cell doesn't contain a rook.
    //
    //
    // Determine whether Snuke solved the puzzle correctly. If he solved the puzzle correctly, return "Correct". Otherwise return "Incorrect".
    //
    //
    // DEFINITION
    // Class:EightRooks
    // Method:isCorrect
    // Parameters:String[]
    // Returns:String
    // Method signature:String isCorrect(String[] board)
    //
    //
    // CONSTRAINTS
    // -board will contain exactly 8 elements.
    // -Each element of board will contain exactly 8 characters.
    // -Each character in board will be either 'R' or '.'.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {"R.......",
    //  ".R......",
    //  "..R.....",
    //  "...R....",
    //  "....R...",
    //  ".....R..",
    //  "......R.",
    //  ".......R"}
    //
    // Returns: "Correct"
    //
    //
    //
    // 1)
    // {"........",
    //  "....R...",
    //  "........",
    //  ".R......",
    //  "........",
    //  "........",
    //  "..R.....",
    //  "........"}
    //
    // Returns: "Incorrect"
    //
    // The number of rooks is not eight.
    //
    // 2)
    // {"......R.",
    //  "....R...",
    //  "...R....",
    //  ".R......",
    //  "R.......",
    //  ".....R..",
    //  "..R.....",
    //  ".......R"}
    //
    // Returns: "Correct"
    //
    //
    //
    // 3)
    // {"......R.",
    //  "....R...",
    //  "...R....",
    //  ".R......",
    //  "R.......",
    //  ".......R",
    //  "..R.....",
    //  ".......R"}
    //
    // Returns: "Incorrect"
    //
    // The rightmost column contains two rooks.
    //
    // 4)
    // {"........",
    //  "........",
    //  "........",
    //  "........",
    //  "........",
    //  "........",
    //  "........",
    //  "........"}
    //
    // Returns: "Incorrect"
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
