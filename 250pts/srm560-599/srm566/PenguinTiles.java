import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class PenguinTiles {
    public int minMoves(String[] tiles) {
        int n = tiles.length;
        int m = tiles[0].length();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (tiles[i].charAt(j) == '.') {
                    if (i == n - 1 && j == m - 1) {
                        return 0;
                    } else if (i == n - 1 || j == m - 1) {
                        return 1;
                    } else {
                        return 2;
                    }
                }
            }
        }
        return -1;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}");
        System.out.println("]");
        PenguinTiles obj;
        int answer;
        obj = new PenguinTiles();
        long startTime = System.currentTimeMillis();
        answer = obj.minMoves(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p1);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p1;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String[] p0;
        int p1;

        // ----- test 0 -----
        p0 = new String[] {"PP","P."};
        p1 = 0;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new String[] {"PPPPPPPP",".PPPPPPP"};
        p1 = 1;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new String[] {"PPP","P.P","PPP"};
        p1 = 2;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new String[] {"P.","PP","PP","PP"};
        p1 = 1;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new String[] {".PPP","PPPP","PPPP","PPPP"};
        p1 = 2;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    //
    // Percy has just received a new game called Penguin Tiles. The game is played on a rectangular grid. Except for one square, each square of the grid contains a tile with a part of an image of a penguin. The one remaining square is empty, and it is called the open square. The player is allowed to slide one of the tiles adjacent to the open square onto the open square. After several moves the tile game is supposed to form a picture with the bottom right corner containing the open square.
    //
    //
    //
    // Percy's version of Penguin Tiles is a misprint. Instead of each tile containing a different part of a penguin all tiles contain an image of the same penguin. In other words each pair of tiles in Percy's Penguin Tiles is indistinguishable.
    //
    //
    //
    // Percy has decided to play with the game anyway but instead of moving just one tile at a time he has decided to move several tiles at once. In one move, Percy can either move some consecutive vertical tiles one square vertically, or some consecutive horizontal tiles one square horizontally. Of course, one of the tiles has to be moved onto the open square.
    // (In other words, instead of moving several tiles one at a time, Percy may move them all at once, if they all lie in the same row or in the same column.)
    //
    //
    //
    //
    //
    //
    // You are given a String[] tiles representing the game. The j-th character of the i-th element of tiles is 'P' if the square at row i, column j contains a tile, and it is '.' (a period) for the open square. Return the minimum number of moves to complete Percy's game.
    //
    //
    // DEFINITION
    // Class:PenguinTiles
    // Method:minMoves
    // Parameters:String[]
    // Returns:int
    // Method signature:int minMoves(String[] tiles)
    //
    //
    // CONSTRAINTS
    // -tiles will contain between 2 and 50 elements, inclusive.
    // -Each element of tiles will contain between 2 and 50 characters, inclusive.
    // -Each element of tiles will contain the same number of characters.
    // -Each character of each element of tiles will be either 'P' or '.'.
    // -tiles will contain exactly 1 occurrence of the character '.'.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {"PP",
    //  "P."}
    //
    // Returns: 0
    //
    // The open tile is already in the bottom right corner.
    //
    // 1)
    // {"PPPPPPPP",
    //  ".PPPPPPP"}
    //
    // Returns: 1
    //
    //
    //
    // 2)
    // {"PPP",
    //  "P.P",
    //  "PPP"}
    //
    // Returns: 2
    //
    //
    //
    // 3)
    // {"P.",
    //  "PP",
    //  "PP",
    //  "PP"}
    //
    // Returns: 1
    //
    //
    //
    // 4)
    // {".PPP",
    //  "PPPP",
    //  "PPPP",
    //  "PPPP"}
    //
    // Returns: 2
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
