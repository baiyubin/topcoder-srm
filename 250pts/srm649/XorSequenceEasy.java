import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class XorSequenceEasy {
	/**
	 * only using log(N) bitmasks, why this can work?
	 * xor with 0 keeps original bit, with 1 inverts the bit
	 *
	 * each bit is independent !!! 
	 * whether a bit can generate better results can be retrieved separately
	 * 
	 * @param  A [description]
	 * @param  N [description]
	 * @return   [description]
	 */
    public int getmax(int[] A, int N) {
        int lenA = A.length;
        String ns = Integer.toBinaryString(N);
        int M = ns.length();

        int totalCount = getCount(A);
        int prevMask = 0;
        for (int i = 0; i < M; i++) {
            int currMask = prevMask ^ (1 << i);

            int[] C = new int[lenA];
            for (int j = 0; j < lenA; j++) {
                C[j] = A[j] ^ currMask;
            }

            int cnt = getCount(C);
            if (cnt > totalCount) {
                prevMask = currMask;
                totalCount = cnt;
            }
        }

        return totalCount;
    }
    public int getCount(int[] a) {
    	int cnt = 0;
    	for (int i = 0; i < a.length; ++i) {
    		for (int j = i + 1; j < a.length; ++j) {
    			if (a[i] < a[j]) cnt++;
    		}
    	}
    	return cnt;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, boolean hasAnswer, int p2) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + p1);
        System.out.println("]");
        XorSequenceEasy obj;
        int answer;
        obj = new XorSequenceEasy();
        long startTime = System.currentTimeMillis();
        answer = obj.getmax(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p2);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p2;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int p1;
        int p2;

        // ----- test 0 -----
        p0 = new int[] {3, 2, 1, 0, 3, 2};
        p1 = 4;
        p2 = 8;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] {3, 0, 4, 6, 1, 5, 7, 6};
        p1 = 8;
        p2 = 21;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9};
        p1 = 16;
        p2 = 76;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] {5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5};
        p1 = 8;
        p2 = 0;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new int[] {408024109, 11635919, 196474438, 117649705, 812669700, 553475508, 445349752, 271145432, 730417256, 738416295, 147699711, 880268351, 816031019, 686078705, 1032012284, 182546393, 875376506, 220137366, 906190345, 16216108, 799485093, 715669847, 413196148, 122291044, 777206980, 68706223, 769896725, 212567592, 809746340, 964776169, 928126551, 228208603, 918774366, 352800800, 849040635, 941604920, 326686120, 920977486, 964528038, 659998484, 207195539, 607901477, 725914710, 655525412, 949610052, 142750431, 766838105, 1024818573, 836758851, 97228667};
        p1 = 1073741824;
        p2 = 720;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // You are given a int[] A and an int N that is a power of 2.
    // All elements of A are between 0 and N-1, inclusive.
    //
    // You can now choose an integer B which is between 0 and N-1, inclusive.
    // This integer determines a new sequence C defined as follows:
    // For each valid i, C[i] = (A[i] xor B).
    //
    // Given the sequence C, we will count the pairs of indices (i,j) such that both i<j and C[i]<C[j].
    // Compute and return the largest result we can obtain.
    //
    // DEFINITION
    // Class:XorSequenceEasy
    // Method:getmax
    // Parameters:int[], int
    // Returns:int
    // Method signature:int getmax(int[] A, int N)
    //
    //
    // NOTES
    // -XOR (exclusive or) is a binary operation, performed on two numbers in binary notation. First, the shorter number is prepended with leading zeroes until both numbers have the same number of digits (in binary). Then, the result is calculated as follows: for each bit where the numbers differ the result has 1 in its binary representation. It has 0 in all other positions.
    // -For example 42 XOR 7 is performed as follows. First, the numbers are converted to binary: 42 is 101010 and 7 is 111. Then the shorter number is prepended with leading zeros until both numbers have the same number of digits. This means 7 becomes 000111. Then 101010 XOR 000111 = 101101 (the result has ones only in the positions where the two numbers differ). Then the result can be converted back to decimal notation. In this case 101101 = 45, so 42 XOR 7 = 45.
    //
    //
    // CONSTRAINTS
    // -N will be between 2 and 1,073,741,824 (2^30), inclusive.
    // -N will be a power of 2.
    // -The number of elements in A will be between 1 and 50, inclusive.
    // -Each element in A will be between 0 and N-1, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {3,2,1,0,3,2}
    // 4
    //
    // Returns: 8
    //
    // For B=3 we get C={0,1,2,3,0,1}.
    // For this C there are 8 pairs (i,j) such that i<j and C[i]<C[j].
    // These are the 8 pairs: (0,1), (0,2), (0,3), (0,5), (1,2), (1,3), (2,3), and (4,5).
    // No other choice of B produces more than 8 pairs.
    //
    // 1)
    // {3,0,4,6,1,5,7,6}
    // 8
    //
    // Returns: 21
    //
    //
    //
    // 2)
    // {3,1,4,1,5,9,2,6,5,3,5,8,9,7,9}
    // 16
    //
    // Returns: 76
    //
    //
    //
    // 3)
    // {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}
    // 8
    //
    // Returns: 0
    //
    // Regardless of the value of B you choose, all elements in C will be equal.
    // Thus, the number of pairs we seek is always zero.
    //
    // 4)
    // {408024109,11635919,196474438,117649705,812669700,553475508,445349752,271145432,730417256,738416295
    // ,147699711,880268351,816031019,686078705,1032012284,182546393,875376506,220137366,906190345,16216108
    // ,799485093,715669847,413196148,122291044,777206980,68706223,769896725,212567592,809746340,964776169
    // ,928126551,228208603,918774366,352800800,849040635,941604920,326686120,920977486,964528038,659998484
    // ,207195539,607901477,725914710,655525412,949610052,142750431,766838105,1024818573,836758851,97228667}
    // 1073741824
    //
    // Returns: 720
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
