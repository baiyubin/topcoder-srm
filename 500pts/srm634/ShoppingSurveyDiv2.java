import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ShoppingSurveyDiv2 {
    public int minValue(int N, int[] s) {
        int prev = s[0];
        for (int i = 1; i < s.length; i++) {
            if (prev + s[i] <= N) {
                return 0;
            } else {
                prev = prev + s[i] - N;
            }
        }
        return prev;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, boolean hasAnswer, int p2) {
        System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}");
        System.out.println("]");
        ShoppingSurveyDiv2 obj;
        int answer;
        obj = new ShoppingSurveyDiv2();
        long startTime = System.currentTimeMillis();
        answer = obj.minValue(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p2);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p2;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int p0;
        int[] p1;
        int p2;

        // ----- test 0 -----
        p0 = 5;
        p1 = new int[] {3, 3};
        p2 = 1;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 100;
        p1 = new int[] {97};
        p2 = 97;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 10;
        p1 = new int[] {9, 9, 9, 9, 9};
        p2 = 5;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = 7;
        p1 = new int[] {1, 2, 3};
        p2 = 0;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = 5;
        p1 = new int[] {3, 3, 3};
        p2 = 0;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    //
    // A store sells M different items, conveniently numbered 0 through M-1.
    // For a shopping survey you interviewed N customers.
    // Each customer responded to the survey with a list of items they've bought.
    // Each customer bought at most one of each item.
    // It is possible that some customers did not buy anything at all.
    //
    //
    //
    // After collecting the responses, you've summed up the results and found that s[i] people have bought item i.
    // Due to an unfortunate accident, you've then lost the actual survey responses.
    // All you have left are the values s[i] you computed.
    //
    //
    //
    // You are now supposed to report the number of big shoppers among the survey respondents.
    // A big shopper is defined as a customer who has bought all M items.
    // Of course, having lost the detailed responses, you might be unable to determine the actual number of big shoppers.
    //
    //
    //
    // You are given the int N and the int[] s with M elements.
    // Compute and return the smallest possible number of big shoppers.
    //
    //
    //
    // DEFINITION
    // Class:ShoppingSurveyDiv2
    // Method:minValue
    // Parameters:int, int[]
    // Returns:int
    // Method signature:int minValue(int N, int[] s)
    //
    //
    // CONSTRAINTS
    // -N will be between 1 and 100, inclusive.
    // -s will contain between 1 and 100 elements, inclusive.
    // -Each element in s will be between 0 and N, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // 5
    // {3, 3}
    //
    // Returns: 1
    //
    //
    // There are 5 customers and 2 items in the store.
    // Each of the items was bought by three of the customers.
    // Since there are five people and a total of six bought items, we must have at least one big shopper.
    // And we can easily verify that there could have been exactly one big shopper and four other customers who have bought one item each.
    //
    // 1)
    // 100
    // {97}
    //
    // Returns: 97
    //
    //
    //
    // 2)
    // 10
    // {9, 9, 9, 9, 9}
    //
    // Returns: 5
    //
    //
    //
    // 3)
    // 7
    // {1, 2, 3}
    //
    // Returns: 0
    //
    //
    //
    // 4)
    // 5
    // {3, 3, 3}
    //
    // Returns: 0
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
