import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class XorBoardDivTwo
{
	public int theMax(String[] board)
	{
		int ret = 0;
        int n = board.length, m = board[0].length();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int currRet = 0;
                for (int ii = 0; ii < n; ii++) {
                    for (int jj = 0; jj < m; jj++) {
                        boolean bi = (ii == i);
                        boolean bj = (jj == j);
                        if (bi ^ bj) {
                            currRet += board[ii].charAt(jj) == '1' ? 0 : 1;
                        } else {
                            currRet += board[ii].charAt(jj) == '1' ? 1 : 0;
                        }
                    }
                }
                ret = Math.max(ret, currRet);
            }
        }
        return ret;
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		XorBoardDivTwo obj;
		int answer;
		obj = new XorBoardDivTwo();
		long startTime = System.currentTimeMillis();
		answer = obj.theMax(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new String[]{"101","010","101"};
		p1 = 9;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"111","111","111"};
		p1 = 5;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"0101001","1101011"};
		p1 = 9;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"000","001","010","011","100","101","110","111"};
		p1 = 15;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"000000000000000000000000","011111100111111001111110","010000000100000001000000","010000000100000001000000","010000000100000001000000","011111100111111001111110","000000100000001000000010","000000100000001000000010","000000100000001000000010","011111100111111001111110","000000000000000000000000"};
		p1 = 105;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Fox Jiro has a rectangular board, divided into a grid of square cells.
	// Each cell in the grid contains either the character '0', or the character '1'.
	// The String[] board contains the current state of the board.
	// The j-th character of the i-th element of board is the character in row i, column j of the grid.
	// 
	// Jiro now has to make exactly two flips. 
	// In the first flip, he must pick a row and flip all characters in that row.
	// (When flipped, a '0' turns to a '1' and vice versa.)
	// In the second flip, he must pick a column and flip all characters in that column.
	// 
	// You are given the String[] board.
	// Return the maximum number of '1's in the grid after Jiro makes the two flips.
	// 
	// DEFINITION
	// Class:XorBoardDivTwo
	// Method:theMax
	// Parameters:String[]
	// Returns:int
	// Method signature:int theMax(String[] board)
	// 
	// 
	// CONSTRAINTS
	// -board will contain between 1 and 50 elements, inclusive.
	// -Each element of board will contain the same number of characters.
	// -Each element of board will contain between 1 and 50 characters, inclusive.
	// -Each character in board will be '0' or '1'.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {"101",
	//  "010",
	//  "101"}
	// 
	// Returns: 9
	// 
	// Jiro can obtain 9 '1's by flipping the center row and then the center column.
	// 
	// 1)
	// {"111",
	//  "111",
	//  "111"}
	// 
	// Returns: 5
	// 
	// Jiro has to make both flips, even if that decreases the number of '1's.
	// 
	// 2)
	// {"0101001",
	//  "1101011"}
	// 
	// Returns: 9
	// 
	// 
	// 
	// 3)
	// {"000",
	//  "001",
	//  "010",
	//  "011",
	//  "100",
	//  "101",
	//  "110",
	//  "111"}
	// 
	// Returns: 15
	// 
	// 
	// 
	// 4)
	// {"000000000000000000000000",
	//  "011111100111111001111110",
	//  "010000000100000001000000",
	//  "010000000100000001000000",
	//  "010000000100000001000000",
	//  "011111100111111001111110",
	//  "000000100000001000000010",
	//  "000000100000001000000010",
	//  "000000100000001000000010",
	//  "011111100111111001111110",
	//  "000000000000000000000000"}
	// 
	// 
	// Returns: 105
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
