import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ThePermutationGameDiv2
{
	public long findMin(int N)
	{
		long result = 1;
        for (int i = 1; i <= N; i++) {
            result = lcm(result, i);
        }
        return result;
    }
    public long lcm(long a, long b) {
        return a / gcd(a, b) * b;
    }
    public long gcd(long a, long b) {
        if (b == 0) return a;
        else return gcd(b, a % b);
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, boolean hasAnswer, long p1) {
		System.out.print("Test " + testNum + ": [" + p0);
		System.out.println("]");
		ThePermutationGameDiv2 obj;
		long answer;
		obj = new ThePermutationGameDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.findMin(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		long p1;
		
		// ----- test 0 -----
		p0 = 2;
		p1 = 2L;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = 6L;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 6;
		p1 = 60L;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 11;
		p1 = 27720L;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 25;
		p1 = 26771144400L;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// Alice and Bob are playing a game called "The Permutation Game".
	// The game is parameterized with the int N.
	// At the start of the game, Alice chooses a positive integer x, and Bob chooses a permutation of the first N positive integers.
	// Let p be Bob's permutation.
	// Alice will start at 1, and apply the permutation to this value x times.
	// More formally, let f(1) = p[1], and f(m) = p[f(m-1)] for all m >= 2.
	// Alice's final value will be f(x).
	// 
	// Alice wants to choose the smallest x such that f(x) = 1 for any permutation Bob can provide.
	// 
	// Compute and return the value of such x.
	// 
	// 
	// DEFINITION
	// Class:ThePermutationGameDiv2
	// Method:findMin
	// Parameters:int
	// Returns:long
	// Method signature:long findMin(int N)
	// 
	// 
	// NOTES
	// -The return value will fit into a signed 64-bit integer.
	// -A permutation of the first N positive integers is a sequence of length N that contains each of the integers 1 through N exactly once. The i-th (1-indexed) element of a permutation p is denoted by p[i].
	// 
	// 
	// CONSTRAINTS
	// -N will be between 1 and 35 inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 2
	// 
	// Returns: 2
	// 
	//  
	// Bob can choose the permutations {1,2} or {2,1}.
	// If Alice chooses 1, then, Bob can choose the permutation {2,1}, which would would make f(1) = 2.
	// However, if Alice chooses 2, no matter which permutation Bob chooses, Alice will get f(2) = 1.
	// Thus the answer in this case is 2.
	// 
	// 
	// 1)
	// 3
	// 
	// Returns: 6
	// 
	// 
	// 
	// 2)
	// 6
	// 
	// Returns: 60
	// 
	// 
	// 
	// 3)
	// 11
	// 
	// Returns: 27720
	// 
	// 
	// 
	// 4)
	// 25
	// 
	// Returns: 26771144400
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
