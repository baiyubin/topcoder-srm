import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class PiecewiseLinearFunctionDiv2 {
    public int[] countSolutions(int[] Y, int[] query) {
        int n = Y.length;
        int[] ret = new int[query.length];

        for (int i = 0; i < query.length; i++) {
            for (int j = 0; j < n - 1; j++) {
                int r = solve(Y[j], Y[j + 1], query[i]);
                if (r == -1 || ret[i] == -1) {
                    ret[i] = -1;
                } else if (r == 1 && query[i] == Y[j] && j != 0) {

                } else {
                    ret[i] += r;
                }
            }
        }
        return ret;
    }

    private int solve(int start, int end, int q) {
        if (start == end && end == q) {
            return -1;
        } else if (start <= q && end >= q) {
            return 1;
        } else if (start >= q && end <= q) {
            return 1;
        } else {
            return 0;
        }
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int[] p2) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}");
        System.out.println("]");
        PiecewiseLinearFunctionDiv2 obj;
        int[] answer;
        obj = new PiecewiseLinearFunctionDiv2();
        long startTime = System.currentTimeMillis();
        answer = obj.countSolutions(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.print("\t" + "{");
            for (int i = 0; p2.length > i; ++i) {
                if (i > 0) {
                    System.out.print(",");
                }
                System.out.print(p2[i]);
            }
            System.out.println("}");
        }
        System.out.println("Your answer:");
        System.out.print("\t" + "{");
        for (int i = 0; answer.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(answer[i]);
        }
        System.out.println("}");
        if (hasAnswer) {
            if (answer.length != p2.length) {
                res = false;
            } else {
                for (int i = 0; answer.length > i; ++i) {
                    if (answer[i] != p2[i]) {
                        res = false;
                    }
                }
            }
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int[] p1;
        int[] p2;

        // ----- test 0 -----
        p0 = new int[] {1,4,-1,2};
        p1 = new int[] {-2,-1,0,1};
        p2 = new int[] {0,1,2,3};
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] {0,0};
        p1 = new int[] {-1,0,1};
        p2 = new int[] {0,-1,0};
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] {2,4,8,0,3,-6,10};
        p1 = new int[] {0,1,2,3,4,0,65536};
        p2 = new int[] {3,4,5,4,3,3,0};
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] {-178080289,-771314989,-237251715,-949949900,-437883156,-835236871,-316363230,-929746634,-671700962};
        p1 = new int[] {-673197622,-437883156,-251072978,221380900,-771314989,-949949900,-910604034,-671700962,-929746634,-316363230};
        p2 = new int[] {8,6,3,0,7,1,4,8,3,4};
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // F is a function that is defined on all real numbers from the closed interval [1,N].
    // You are given a int[] Y with N elements.
    // For each i (1 <= i <= N) we have F(i) = Y[i-1].
    // Additionally, you know that F is piecewise linear: for each i, on the interval [i,i+1] F is a linear function.
    // The function F is uniquely determined by this information.
    // For example, if F(4)=1 and F(5)=6 then we must have F(4.7)=4.5.
    //
    // As another example, this is the plot of the function F for Y = {1, 4, -1, 2}.
    //
    //
    //
    // You are also given a int[] query.
    // For each i, compute the number of solutions to the equation F(x) = query[i].
    // Note that sometimes this number of solutions can be infinite.
    //
    // Return a int[] of the same length as query.
    // For each i, element i of the return value should be -1 if the equation F(x) = query[i] has an infinite number of solutions.
    // Otherwise, element i of the return value should be the actual number of solutions this equation has.
    //
    // DEFINITION
    // Class:PiecewiseLinearFunctionDiv2
    // Method:countSolutions
    // Parameters:int[], int[]
    // Returns:int[]
    // Method signature:int[] countSolutions(int[] Y, int[] query)
    //
    //
    // CONSTRAINTS
    // -Y will contain between 2 and 50 elements, inclusive.
    // -Each element of Y will be between -1,000,000,000 and 1,000,000,000, inclusive.
    // -query will contain between 1 and 50 elements, inclusive.
    // -Each element of query will be between -1,000,000,000 and 1,000,000,000, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {1, 4, -1, 2}
    // {-2, -1, 0, 1}
    //
    // Returns: {0, 1, 2, 3 }
    //
    // This is the example from the problem statement. The detailed information about the queries is:
    //
    // There is no such x that F(x) = -2 is satisfied.
    // F(x) = -1 is only true for x = 3.
    // F(x) = 0 has two roots: 2.8 and 10/3.
    // F(x) = 1 has three roots: 1, 2.6 and 11/3.
    //
    //
    // 1)
    // {0, 0}
    // {-1, 0, 1}
    //
    // Returns: {0, -1, 0 }
    //
    // This function's plot is a horizontal segment between points (1, 0) and (2, 0). F(x) = 0 is satisfied for any x between 1 and 2 and thus the number of solutions is infinite. For any other value on the right-hand side, it has no solutions.
    //
    // 2)
    // {2, 4, 8, 0, 3, -6, 10}
    // {0, 1, 2, 3, 4, 0, 65536}
    //
    // Returns: {3, 4, 5, 4, 3, 3, 0 }
    //
    //
    //
    // 3)
    // {-178080289, -771314989, -237251715, -949949900, -437883156, -835236871, -316363230, -929746634, -671700962}
    //
    // {-673197622, -437883156, -251072978, 221380900, -771314989, -949949900, -910604034, -671700962, -929746634, -316363230}
    //
    // Returns: {8, 6, 3, 0, 7, 1, 4, 8, 3, 4 }
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
