import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class BacteriesColony
{
	public int[] performTheExperiment(int[] colonies)
	{
        int n = colonies.length;
		int[][] c = new int[2][n];
        int[] ret = new int[n];
        for (int i = 0; i < n; i++) {
            c[0][i] = colonies[i];
        }
        c[1][0] = c[0][0];
        c[1][n - 1] = c[0][n - 1];
        for (int i = 1; i < 200; i++) {
            if (eq(c)) {
                for (int j = 0; j < n; j++) {
                    ret[j] = c[0][j];
                }
                break;
            } else {
                for (int j = 1; j < n - 1; j++) {
                    if (c[(i - 1) % 2][j] < c[(i - 1) % 2][j + 1] &&
                        c[(i - 1) % 2][j] < c[(i - 1) % 2][j - 1]) {
                        c[i % 2][j] = c[(i - 1) % 2][j] + 1;
                    } else if (c[(i - 1) % 2][j] > c[(i - 1) % 2][j + 1] &&
                            c[(i - 1) % 2][j] > c[(i - 1) % 2][j - 1]) {
                        c[i % 2][j] = c[(i - 1) % 2][j] - 1;
                    } else {
                        c[i % 2][j] = c[(i - 1) % 2][j];
                    }
                }
            }
        }
        return ret;
    }

    private boolean eq(int[][] c) {
        int n = c[0].length;
        for (int i = 1; i < n - 1; i++) {
            if (c[0][i] != c[1][i]) {
                return false;
            }
        }
        return true;
    }

    // BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int[] p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		BacteriesColony obj;
		int[] answer;
		obj = new BacteriesColony();
		long startTime = System.currentTimeMillis();
		answer = obj.performTheExperiment(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print(p1[i]);
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(answer[i]);
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (answer[i] != p1[i]) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		
		// ----- test 0 -----
		p0 = new int[]{5,3,4,6,1};
		p1 = new int[]{5,4,4,4,1};
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{1,5,4,9};
		p1 = new int[]{1,4,5,9};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{78,34,3,54,44,99};
		p1 = new int[]{78,34,34,49,49,99};
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{32,68,50,89,34,56,47,30,82,7,21,16,82,24,91};
		p1 = new int[]{32,59,59,59,47,47,47,47,47,18,18,19,53,53,91};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Grazyna works in a laboratory.
	// Her team is about to perform an experiment with special bacteria.
	// 
	// 
	// There is a row of vessels.
	// Each vessel contains a colony of bacteria.
	// The colonies may currently have different sizes.
	// Namely, for each valid i there are currently colonies[i] bacteria in the i-th vessel (0-based index).
	// 
	// 
	// Grazyna has a theory about how the colony sizes change.
	// According to the theory, the colony sizes only change during nights and it only happens in two specific cases:
	// 
	// If during a day a colony finds itself immediately between two larger colonies, during the next night its size will increase by 1.
	// If during a day a colony finds itself immediately between two smaller colonies, during the next night its size will decrease by 1.
	// 
	// Note that the colonies in the first and last vessel never change their sizes as they are never between two colonies.
	// Also note that multiple colonies can change their size each night.
	// 
	// 
	// The experiment will go on for as long as some colonies keep changing their sizes.
	// You are given the int[] colonies.
	// Compute the result of the experiment, assuming that the colony sizes change according to Grazyna's theory.
	// Return a int[] with the same number of elements as colonies.
	// For each valid i, element i of the return value should be the final size of the colony in the i-th vessel.
	// 
	// 
	// DEFINITION
	// Class:BacteriesColony
	// Method:performTheExperiment
	// Parameters:int[]
	// Returns:int[]
	// Method signature:int[] performTheExperiment(int[] colonies)
	// 
	// 
	// NOTES
	// -For each valid input the experiment will terminate after finitely many steps.
	// 
	// 
	// CONSTRAINTS
	// -colonies will have between 3 and 50 elements, inclusive.
	// -Each element of colonies will be between 1 and 100, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {5, 3, 4, 6, 1 }
	// 
	// Returns: {5, 4, 4, 4, 1 }
	// 
	// 
	// The colony sizes during the first day are given as input: {5, 3, 4, 6, 1}.
	// During the first night colony 1 (0-based index) will grow and colony 3 will shrink.
	// During the second day the colony sizes will be {5, 4, 4, 5, 1}.
	// During the second night colony 3 will shrink again.
	// During the third day the colony sizes will be {5, 4, 4, 4, 1}.
	// There are no more changes during the third night, so that is the final state and the experiment ends.
	// 
	// 
	// 1)
	// {1, 5, 4, 9 }
	// 
	// Returns: {1, 4, 5, 9 }
	// 
	// During the first night colony 1 will shrink from 5 to 4 and at the same time colony 2 will grow from 4 to 5. Afterwards there will be no more changes.
	// 
	// 2)
	// {78, 34, 3, 54, 44, 99 }
	// 
	// Returns: {78, 34, 34, 49, 49, 99 }
	// 
	// 
	// 
	// 3)
	// {32, 68, 50, 89, 34, 56, 47, 30, 82, 7, 21, 16, 82, 24, 91 }
	// 
	// Returns: {32, 59, 59, 59, 47, 47, 47, 47, 47, 18, 18, 19, 53, 53, 91 }
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
