import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TheBrickTowerEasyDivTwo
{
	public int find(int redCount, int redHeight, int blueCount, int blueHeight)
	{
        HashSet<Integer> set = new HashSet<Integer>();
        // start with red
        int rc = redCount, bc = blueCount;
        int curr = redHeight;
        set.add(curr);
        rc--;
        boolean isR = false;
        while (rc > 0 || bc > 0) {
            if (isR) {
                if (rc == 0) break;
                curr += redHeight;
                set.add(curr);
                rc--;
                isR = false;
            } else {
                if (bc == 0) break;
                curr += blueHeight;
                set.add(curr);
                bc--;
                isR = true;
            }
        }
        // start from blue
        rc = redCount; bc = blueCount;
        curr = blueHeight;
        set.add(curr);
        bc--;
        isR = true;
        while (rc > 0 || bc > 0) {
            if (isR) {
                if (rc == 0) break;
                curr += redHeight;
                set.add(curr);
                rc--;
                isR = false;
            } else {
                if (bc == 0) break;
                curr += blueHeight;
                set.add(curr);
                bc--;
                isR = true;
            }
        }
        return set.size();
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, boolean hasAnswer, int p4) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3);
		System.out.println("]");
		TheBrickTowerEasyDivTwo obj;
		int answer;
		obj = new TheBrickTowerEasyDivTwo();
		long startTime = System.currentTimeMillis();
		answer = obj.find(p0, p1, p2, p3);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p4);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p4;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		int p4;
		
		// ----- test 0 -----
		p0 = 1;
		p1 = 2;
		p2 = 3;
		p3 = 4;
		p4 = 4;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 4;
		p1 = 4;
		p2 = 4;
		p3 = 7;
		p4 = 12;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 7;
		p1 = 7;
		p2 = 4;
		p3 = 4;
		p4 = 13;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 47;
		p1 = 47;
		p2 = 47;
		p3 = 47;
		p4 = 94;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// John and Brus are building towers using toy bricks.
	// They have two types of bricks: red and blue ones.
	// The number of red bricks they have is redCount and each of them has a height of redHeight.
	// The number of blue bricks they have is blueCount and each of them has a height of blueHeight.
	// 
	// 
	// 
	// A tower is built by placing bricks one atop another.
	// A brick can be placed either on the ground, or on a brick of a different color.
	// (I.e., you are not allowed to put two bricks of the same color immediately on one another.)
	// A tower has to consist of at least one brick.
	// The height of a tower is the sum of all heights of bricks that form the tower.
	// Two towers are considered to be different if they have different heights.
	// (Two towers of the same height are considered the same, even if they differ in the number and colors of bricks that form them.)
	// 
	// 
	// 
	// You are given the ints redCount, redHeight, blueCount and blueHeight.
	// Return the number of different towers that John and Brus can build.
	// 
	// 
	// 
	// DEFINITION
	// Class:TheBrickTowerEasyDivTwo
	// Method:find
	// Parameters:int, int, int, int
	// Returns:int
	// Method signature:int find(int redCount, int redHeight, int blueCount, int blueHeight)
	// 
	// 
	// CONSTRAINTS
	// -redCount will be between 1 and 47, inclusive.
	// -redHeight will be between 1 and 47, inclusive.
	// -blueCount will be between 1 and 47, inclusive.
	// -blueHeight will be between 1 and 47, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 1
	// 2
	// 3
	// 4
	// 
	// Returns: 4
	// 
	// John and Brus have 1 red brick of height 2 and 3 blue bricks of height 4. Using these bricks, it's possible to build 4 towers:
	// red (height 2);
	// blue (height 4);
	// red, blue (height 6);
	// blue, red, blue (height 10).
	// 
	// 1)
	// 4
	// 4
	// 4
	// 7
	// 
	// Returns: 12
	// 
	// 
	// 
	// 2)
	// 7
	// 7
	// 4
	// 4
	// 
	// Returns: 13
	// 
	// 
	// 
	// 3)
	// 47
	// 47
	// 47
	// 47
	// 
	// Returns: 94
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
