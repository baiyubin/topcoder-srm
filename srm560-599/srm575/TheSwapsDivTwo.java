public class TheSwapsDivTwo {
    public int find(int[] sequence) {
        int n = sequence.length;
        HashSet<ArrayList<Integer>> set = new HashSet<ArrayList<Integer>>();
        ArrayList<Integer> curr = new ArrayList<Integer>();
        for (int i = 0; i < n; i++) {
            curr.add(sequence[i]);
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                Collections.swap(curr, i, j);
                set.add(new ArrayList<Integer>(curr));
                Collections.swap(curr, i, j);
            }
        }
        return set.size();
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}");
        System.out.println("]");
        TheSwapsDivTwo obj;
        int answer;
        obj = new TheSwapsDivTwo();
        long startTime = System.currentTimeMillis();
        answer = obj.find(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p1);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p1;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int p1;

        // ----- test 0 -----
        p0 = new int[] {4, 7, 4};
        p1 = 3;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] {1, 47};
        p1 = 1;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] {9, 9, 9, 9};
        p1 = 1;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] {22, 16, 36, 35, 14, 9, 33, 6, 28, 12, 18, 14, 47, 46, 29, 22, 14, 17, 4, 15, 28, 6, 39, 24, 47, 37};
        p1 = 319;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // John has a sequence of integers.
    // Brus is going to choose two different positions in John's sequence and swap the elements at those positions.
    // (The two swapped elements may have the same value.)
    // Return the number of different sequences Brus can obtain after he makes the swap.
    //
    //
    // DEFINITION
    // Class:TheSwapsDivTwo
    // Method:find
    // Parameters:int[]
    // Returns:int
    // Method signature:int find(int[] sequence)
    //
    //
    // CONSTRAINTS
    // -sequence will contain between 2 and 47 elements, inclusive.
    // -Each element of sequence will be between 1 and 47, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {4, 7, 4}
    //
    // Returns: 3
    //
    // If Brus swaps elements 0 and 1 (0-based indices), the sequence will change to {7, 4, 4}.
    // If he swaps elements 1 and 2 instead, the sequence will change to {4, 4, 7}.
    // Finally, if the swaps elements 0 and 2, the sequence will remain {4, 7, 4}.
    // These three outcomes are all distinct.
    //
    //
    // 1)
    // {1, 47}
    //
    // Returns: 1
    //
    // Brus has to swap the only two elements, producing the sequence {47, 1}.
    // Note that Brus has to make the swap, he cannot keep the original sequence.
    //
    //
    // 2)
    // {9, 9, 9, 9}
    //
    // Returns: 1
    //
    // Regardless of which two elements Brus swaps, the resulting sequence will always be {9, 9, 9, 9}.
    //
    // 3)
    // {22, 16, 36, 35, 14, 9, 33, 6, 28, 12, 18, 14, 47, 46, 29, 22, 14, 17, 4, 15, 28, 6, 39, 24, 47, 37}
    //
    // Returns: 319
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
