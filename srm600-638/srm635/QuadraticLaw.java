import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class QuadraticLaw {
    public long getTime(long d) {
        double dd = (double) d;
        long t = (long) Math.sqrt(dd);
        while (t * (t + 1) <= d) {
            t++;
        }
        return t - 1;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, long p0, boolean hasAnswer, long p1) {
        System.out.print("Test " + testNum + ": [" + p0);
        System.out.println("]");
        QuadraticLaw obj;
        long answer;
        obj = new QuadraticLaw();
        long startTime = System.currentTimeMillis();
        answer = obj.getTime(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p1);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p1;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        long p0;
        long p1;

        // ----- test 0 -----
        p0 = 1L;
        p1 = 0L;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 2L;
        p1 = 1L;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 5L;
        p1 = 1L;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = 6L;
        p1 = 2L;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = 7L;
        p1 = 2L;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = 1482L;
        p1 = 38L;
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------

        // ----- test 6 -----
        p0 = 1000000000000000000L;
        p1 = 999999999L;
        all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
        // ------------------

        // ----- test 7 -----
        p0 = 31958809614643170L;
        p1 = 178770270L;
        all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    //
    // "N?mec's quadratic law: how many minutes the teacher was late to the lesson, that many minutes squared he'll end the lesson earlier."
    //
    //
    //
    // In other words, if the teacher is t minutes late (for some non-negative integer t), he should end the lesson t2 minutes early. Of course, this means the teacher can't be too late, because a lesson can't end before even starting. It is, however, possible for the teacher to arrive and end the lesson immediately (in fact, he then only arrives to tell the students that the lesson's cancelled).
    //
    //
    //
    // You're given a long d. The lesson was supposed to take d minutes. Compute and return the largest non-negative integer t such that the teacher can be t minutes late.
    //
    //
    // DEFINITION
    // Class:QuadraticLaw
    // Method:getTime
    // Parameters:long
    // Returns:long
    // Method signature:long getTime(long d)
    //
    //
    // CONSTRAINTS
    // -d will be between 1 and 1,000,000,000,000,000,000, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // 1
    //
    // Returns: 0
    //
    // The lesson was supposed to take 1 minute. The teacher can only be 0 minutes late, in which case he ends the lesson 0 minutes early (i.e. he arrives and ends the lecture on time).
    //
    // 1)
    // 2
    //
    // Returns: 1
    //
    // It's possible for the teacher to be 1 minute late and end the lecture 1 minute early (so there's no lecture at all).
    //
    // 2)
    // 5
    //
    // Returns: 1
    //
    //
    //
    // 3)
    // 6
    //
    // Returns: 2
    //
    //
    //
    // 4)
    // 7
    //
    // Returns: 2
    //
    //
    //
    // 5)
    // 1482
    //
    // Returns: 38
    //
    //
    //
    // 6)
    // 1000000000000000000
    //
    // Returns: 999999999
    //
    //
    //
    // 7)
    // 31958809614643170
    //
    // Returns: 178770270
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
