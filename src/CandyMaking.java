import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class CandyMaking {
    public double findSuitableDensity(int[] containerVolume, int[] desiredWeight) {
        double maxD = Double.MIN_VALUE, minD = Double.MAX_VALUE;
        int n = containerVolume.length;
        for (int i = 0; i < n; i++) {
            double d = 1.0 * desiredWeight[i] / containerVolume[i];
            maxD = Math.max(maxD, d);
            minD = Math.min(minD, d);
        }
        double leftD = minD, rightD = maxD;
        double leftDiff = 0, rightDiff = 0;
        leftDiff = diff(leftD, containerVolume, desiredWeight);
        rightDiff = diff(rightD, containerVolume, desiredWeight);
        double EPS = 1e-12;
        while ( Math.abs(rightD - leftD) > EPS * leftD ) {
            double leftMid = leftD + 1.0 / 3 * (rightD - leftD);
            double rightMid = leftD + 2.0 / 3 * (rightD - leftD);
            leftDiff = diff(leftMid, containerVolume, desiredWeight);
            rightDiff = diff(rightMid, containerVolume, desiredWeight);
            if (Math.abs(leftDiff) < Math.abs(rightDiff)) {
                rightD = rightMid;
            } else {
                leftD = leftMid;
            }
        }
        return leftDiff;
    }

    public double diff(double d, int[] containerVolume, int[] desiredWeight) {
        double ret = 0.0;
        for (int i = 0; i < containerVolume.length; i++) {
            ret += Math.abs(desiredWeight[i] - d * containerVolume[i]);
        }
        return ret;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, double p2) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}");
        System.out.println("]");
        CandyMaking obj;
        double answer;
        obj = new CandyMaking();
        long startTime = System.currentTimeMillis();
        answer = obj.findSuitableDensity(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p2);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == answer && Math.abs(p2 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p2));
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int[] p1;
        double p2;

        // ----- test 0 -----
        p0 = new int[] {8, 10, 3, 1, 1, 10, 3, 7, 1, 5, 2, 6, 5, 1, 9, 6, 4, 3, 9, 7, 5, 5, 4, 2, 3, 1, 7, 9, 3, 8, 5, 5, 8, 7, 3, 8, 2, 2, 6, 9, 8, 5, 5, 3, 1};
        p1 = new int[] {999991, 999998, 999993, 999995, 1000000, 999997, 999993, 999994, 999999, 1000000, 999997, 999993, 999995, 999999, 999992, 999999, 999999, 999991, 999997, 999997, 999995, 999992, 999995, 999992, 999998, 999994, 999995, 999993, 999994, 1000000, 999994, 999992, 999997, 999993, 999993, 999998, 1000000, 999997, 999992, 999996, 999996, 999996, 999998, 999991, 999999};
        p2 = 1.8285632857142862E7;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] {10, 10};
        p1 = new int[] {1000, 2000};
        p2 = 1000.0D;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] {10, 20, 40};
        p1 = new int[] {4000, 2000, 1000};
        p2 = 5250.0D;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] {1234, 1541, 3321, 1234, 123, 123, 3414, 123, 12, 2442, 1421, 1223, 3232, 1123, 2121};
        p1 = new int[] {3213, 1231, 232143, 44312, 132132, 142424, 123123, 41341, 41244, 21312, 232131, 2312, 2322, 11, 2223};
        p2 = 983673.2727272725D;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new int[] {30621, 30620, 2};
        p1 = new int[] {1, 1, 1000000};
        p2 = 999999.9999673415D;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
