import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ColorfulBricks
{
	public int countLayouts(String bricks)
	{
		char[] c = bricks.toCharArray();
        Arrays.sort(c);
        int colors = 1;
        for (int i = 1; i < c.length; i++) {
            if (c[i] != c[i - 1]) colors++;
        }
        if (colors == 2) {
            return 2;
        } else if (colors == 1) {
            return 1;
        } else {
            return 0;
        }
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		ColorfulBricks obj;
		int answer;
		obj = new ColorfulBricks();
		long startTime = System.currentTimeMillis();
		answer = obj.countLayouts(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		int p1;
		
		// ----- test 0 -----
		p0 = "ABAB";
		p1 = 2;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "AAA";
		p1 = 1;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "WXYZ";
		p1 = 0;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Beaver Bindu has some colored bricks.
	// Each color is described by an uppercase letter.
	// Bricks of each color all look exactly the same.
	// You are given a String bricks.
	// Each character of bricks represents the color of one of Bindu's bricks.
	// 
	// 
	// 
	// Bindu wants to arrange all her bricks into a row.
	// A row of bricks is nice if there is at most one pair of adjacent bricks which have different colors.
	// 
	// 
	// Return the number of ways in which Bindu can form a nice row, using all her bricks.
	// (Two ways are considered identical if they correspond to the same sequence of brick colors.)
	// 
	// 
	// 
	// 
	// DEFINITION
	// Class:ColorfulBricks
	// Method:countLayouts
	// Parameters:String
	// Returns:int
	// Method signature:int countLayouts(String bricks)
	// 
	// 
	// CONSTRAINTS
	// -bricks will contain between 1 and 50 characters, inclusive.
	// -Each character of bricks will be an uppercase letter ('A'-'Z').
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "ABAB"
	// 
	// Returns: 2
	// 
	// There are six possible ways to arrange all the bricks into a row: "AABB", "ABAB", "ABBA", "BAAB", "BABA" and "BBAA". Out of these, only "AABB" and "BBAA" have at most one pair of adjacent bricks with different colors.
	// 
	// 1)
	// "AAA"
	// 
	// Returns: 1
	// 
	// In this test case, all bricks have the same color. Hence, there is only one way to arrange them into a row. That row is nice, because it has no adjacent bricks of different colors.
	// 
	// 2)
	// "WXYZ"
	// 
	// Returns: 0
	// 
	// Since all four bricks are of different colors, the bricks at positions 0 and 1 will have different colors. Similarly, the bricks at positions 1 and 2 will also have different colors. Hence, no matter how the bricks are arranged in a row, the row will not be nice.
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
