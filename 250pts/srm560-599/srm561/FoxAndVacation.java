import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class FoxAndVacation {
    public int maxCities(int total, int[] d) {
        Arrays.sort(d);
        int curr = 0;
        for (int i = 0; i < d.length; i++) {
            if (d[i] <= total) {
                total -= d[i];
                curr++;
            } else {
                break;
            }
        }
        return curr;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, boolean hasAnswer, int p2) {
        System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}");
        System.out.println("]");
        FoxAndVacation obj;
        int answer;
        obj = new FoxAndVacation();
        long startTime = System.currentTimeMillis();
        answer = obj.maxCities(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p2);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p2;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int p0;
        int[] p1;
        int p2;

        // ----- test 0 -----
        p0 = 5;
        p1 = new int[] {2, 2, 2};
        p2 = 2;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 5;
        p1 = new int[] {5, 6, 1};
        p2 = 1;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 5;
        p1 = new int[] {6, 6, 6};
        p2 = 0;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = 6;
        p1 = new int[] {1, 1, 1, 1, 1};
        p2 = 5;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = 10;
        p1 = new int[] {7, 1, 5, 6, 1, 3, 4};
        p2 = 4;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = 50;
        p1 = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        p2 = 9;
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 6 -----
        p0 = 21;
        p1 = new int[] {14, 2, 16, 9, 9, 5, 5, 23, 25, 20, 8, 25, 6, 12, 3, 2, 4, 5, 10, 14, 19, 12, 25, 15, 14};
        p2 = 6;
        all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // Fox Ciel is planning to visit the Tourist Kingdom for total days.
    // This kingdom is full of lovely cities.
    // During her stay Ciel would like to visit as many different cities as possible.
    // She cannot visit more than one city on the same day.
    //
    //
    //
    // Additionally, different cities may require her to stay for a different number of days.
    // For each i, city i only counts as visited if Ciel spends at least d[i] days in the city.
    //
    //
    //
    // You are given the int total and the int[] d.
    // Return the maximal number of cities she can visit during her vacation.
    //
    // DEFINITION
    // Class:FoxAndVacation
    // Method:maxCities
    // Parameters:int, int[]
    // Returns:int
    // Method signature:int maxCities(int total, int[] d)
    //
    //
    // NOTES
    // -When solving the task, ignore travel times. (Fox Ciel always travels at night, and she can travel between any two cities very quickly.)
    //
    //
    // CONSTRAINTS
    // -total will be between 1 and 50, inclusive.
    // -d will contain between 1 and 50 elements, inclusive.
    // -Each element of d will be between 1 and 50, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // 5
    // {2,2,2}
    //
    // Returns: 2
    //
    // Fox Ciel's vacation lasts for 5 days. She needs at least 2 days to visit each of the cities, so she can visit at most 2 of them.
    //
    // 1)
    // 5
    // {5,6,1}
    //
    // Returns: 1
    //
    // She can only visit one city: either city 0, or city 2.
    //
    // 2)
    // 5
    // {6,6,6}
    //
    // Returns: 0
    //
    // This time the poor Fox Ciel cannot visit any city during her summer vacation.
    //
    // 3)
    // 6
    // {1,1,1,1,1}
    //
    // Returns: 5
    //
    // In this test case Ciel can visit all five cities.
    // Note that at the end of her trip each city either does count as visited, or it does not -- there is no way to "visit" the same city twice.
    //
    // 4)
    // 10
    // {7,1,5,6,1,3,4}
    //
    // Returns: 4
    //
    //
    //
    // 5)
    // 50
    // {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}
    //
    // Returns: 9
    //
    //
    //
    // 6)
    // 21
    // {14,2,16,9,9,5,5,23,25,20,8,25,6,12,3,2,4,5,10,14,19,12,25,15,14}
    //
    // Returns: 6
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
