import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class GreatFairyWar
{
	public int minHP(int[] dps, int[] hp)
	{
		int totalDPS = 0;
        int n = dps.length;
        for (int i = 0; i < n; i++) {
            totalDPS += dps[i];
        }
        int totalHP = 0;
        for (int i = 0; i < n; i++) {
            totalHP += totalDPS * hp[i];
            totalDPS -= dps[i];
        }
        return totalHP;
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		GreatFairyWar obj;
		int answer;
		obj = new GreatFairyWar();
		long startTime = System.currentTimeMillis();
		answer = obj.minHP(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int p2;
		
		// ----- test 0 -----
		p0 = new int[]{1,2};
		p1 = new int[]{3,4};
		p2 = 17;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{1,1,1,1,1,1,1,1,1,1};
		p1 = new int[]{1,1,1,1,1,1,1,1,1,1};
		p2 = 55;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{20,12,10,10,23,10};
		p1 = new int[]{5,7,7,5,7,7};
		p2 = 1767;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{5,7,7,5,7,7};
		p1 = new int[]{20,12,10,10,23,10};
		p2 = 1998;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{30,2,7,4,7,8,21,14,19,12};
		p1 = new int[]{2,27,18,19,14,8,25,13,21,30};
		p2 = 11029;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{1};
		p1 = new int[]{1};
		p2 = 1;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// You are a wizard.
	// You are facing N fairies, numbered 0 through N-1.
	// Your goal is to defeat all of them.
	// You can only attack one fairy at a time.
	// Moreover, you must fight the fairies in order: you can only attack fairy X+1 after you defeat fairy X.
	// On the other hand, all fairies that have not been defeated yet will attack you all the time.
	// 
	// 
	// 
	// Each fairy has two characteristics: her damage per second (dps) and her amount of hit points.
	// Your damage per second is 1.
	// That is, you are able to reduce an opponent's hit points by 1 each second.
	// In other words, if a fairy has H hit points, it takes you H seconds to defeat her.
	// 
	// 
	// 
	// You are given two int[]s, each of length N: dps and hp.
	// For each i, dps[i] is the damage per second of fairy i, and hp[i] is her initial amount of hit points.
	// We assume that your number of hit points is sufficiently large to avoid defeat when fighting the fairies.
	// Compute and return the total number of hit points you'll lose during the fight.
	// In other words, return the total amount of damage the attacking fairies will deal.
	// 
	// DEFINITION
	// Class:GreatFairyWar
	// Method:minHP
	// Parameters:int[], int[]
	// Returns:int
	// Method signature:int minHP(int[] dps, int[] hp)
	// 
	// 
	// NOTES
	// -Damage per second (dps) of a person P is the rate at which P can deal damage to their opponents.
	// 
	// 
	// CONSTRAINTS
	// -dps will contain between 1 and 30 elements, inclusive.
	// -dps and hp will contain the same number of elements.
	// -Each element in dps will be between 1 and 30, inclusive.
	// -Each element in hp will be between 1 and 30, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1,2}
	// {3,4}
	// 
	// Returns: 17
	// 
	// It will take you 3 seconds to defeat fairy 0 and then 4 seconds to defeat fairy 1.
	// During the first 3 seconds both fairies attack you, dealing 1+2 = 3 damage each second.
	// During the next 4 seconds fairy 1 continues to attack you, dealing 2 damage each second.
	// The total number of hit points you lose is 3*(1+2) + 4*2 = 9 + 8 = 17.
	// 
	// 1)
	// {1,1,1,1,1,1,1,1,1,1}
	// {1,1,1,1,1,1,1,1,1,1}
	// 
	// Returns: 55
	// 
	// The answer is 10+9+...+3+2+1 = 55.
	// 
	// 2)
	// {20,12,10,10,23,10}
	// {5,7,7,5,7,7}
	// 
	// Returns: 1767
	// 
	// 
	// 
	// 3)
	// {5,7,7,5,7,7}
	// {20,12,10,10,23,10}
	// 
	// Returns: 1998
	// 
	// 
	// 
	// 4)
	// {30,2,7,4,7,8,21,14,19,12}
	// {2,27,18,19,14,8,25,13,21,30}
	// 
	// Returns: 11029
	// 
	// 
	// 
	// 5)
	// {1}
	// {1}
	// 
	// Returns: 1
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
