import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class NarrowPassage2Easy {
    public int count(int[] size, int maxSizeSum) {
        ArrayList<Integer> curr = new ArrayList<Integer>();
        for (int i = 0; i < size.length; i++) {
            curr.add(i);
        }
        HashSet<ArrayList<Integer>> result = new HashSet<ArrayList<Integer>>();
        result.add(new ArrayList<Integer>(curr));
        ArrayDeque<ArrayList<Integer>> q = new ArrayDeque<ArrayList<Integer>>();
        q.add(curr);
        while (!q.isEmpty()) {
            ArrayList<Integer> e = q.poll();
            for (int i = 0; i < size.length - 1; i++) {
                if (size[e.get(i)] + size[e.get(i + 1)] <= maxSizeSum) {
                    Collections.swap(e, i, i + 1);
                    if (!result.contains(e)) {
                        ArrayList<Integer> arr = new ArrayList<Integer>(e);
                        q.add(arr);
                        result.add(arr);
                    }
                    Collections.swap(e, i, i + 1);
                }
            }
        }
        return result.size();
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, boolean hasAnswer, int p2) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + p1);
        System.out.println("]");
        NarrowPassage2Easy obj;
        int answer;
        obj = new NarrowPassage2Easy();
        long startTime = System.currentTimeMillis();
        answer = obj.count(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p2);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p2;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int p1;
        int p2;

        // ----- test 0 -----
        p0 = new int[] {1, 2, 3};
        p1 = 3;
        p2 = 2;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] {1, 2, 3};
        p1 = 1000;
        p2 = 6;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] {1, 2, 3};
        p1 = 4;
        p2 = 3;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] {1, 1, 1, 1, 1, 1};
        p1 = 2;
        p2 = 720;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new int[] {2, 4, 6, 1, 3, 5};
        p1 = 8;
        p2 = 60;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = new int[] {1000};
        p1 = 1000;
        p2 = 1;
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // There is a narrow passage.
    // Inside the passage there are some wolves.
    // You are given a int[] size that contains the sizes of those wolves, from left to right.
    //
    //
    //
    // The passage is so narrow that some pairs of wolves cannot pass by each other.
    // More precisely, two adjacent wolves may swap places if and only if the sum of their sizes is maxSizeSum or less.
    // Assuming that no wolves leave the passage, what is the number of different permutations of wolves in the passage?
    // Note that two wolves are considered different even if they have the same size.
    //
    //
    //
    // Compute and return the number of permutations of wolves that can be obtained from their initial order by swapping a pair of wolves zero or more times.
    //
    // DEFINITION
    // Class:NarrowPassage2Easy
    // Method:count
    // Parameters:int[], int
    // Returns:int
    // Method signature:int count(int[] size, int maxSizeSum)
    //
    //
    // CONSTRAINTS
    // -size will contain between 1 and 6 elements, inclusive.
    // -Each element in size will be between 1 and 1,000, inclusive.
    // -maxSizeSum will be between 1 and 1,000, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {1, 2, 3}
    // 3
    //
    // Returns: 2
    //
    // From {1, 2, 3}, you can swap 1 and 2 to get {2, 1, 3}. But you can't get other permutations.
    //
    // 1)
    // {1, 2, 3}
    // 1000
    //
    // Returns: 6
    //
    // Here you can swap any two adjacent wolves. Thus, all 3! = 6 permutations are possible.
    //
    // 2)
    // {1, 2, 3}
    // 4
    //
    // Returns: 3
    //
    // You can get {1, 2, 3}, {2, 1, 3} and {2, 3, 1}.
    //
    // 3)
    // {1,1,1,1,1,1}
    // 2
    //
    // Returns: 720
    //
    // All of these wolves are different, even though their sizes are the same. Thus, there are 6! different permutations possible.
    //
    // 4)
    // {2,4,6,1,3,5}
    // 8
    //
    // Returns: 60
    //
    //
    //
    // 5)
    // {1000}
    // 1000
    //
    // Returns: 1
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
