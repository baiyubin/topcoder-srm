import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

/**
 * SRM 631
 *
 */
public class CatsOnTheLineDiv2 {
    /**
     * greedy approach to move edges to bost sides as far as possible
     * @param  position
     * @param  count
     * @param  time
     * @return
     */
    public String getAnswer(int[] position, int[] count, int time) {
        int left = Integer.MIN_VALUE, right = Integer.MAX_VALUE;
        int N = position.length;
        int sum = 0;
        for (int c : count) {
            sum += c;
            /// Consider the case where too many cats in the same spot
            /// This got me WA first time
            if (c > 2 * time + 1) return "Impossible";
        }
        boolean goLeft = false;
        for (int c = 0; c < sum; ++c) {
            goLeft = !goLeft;
            if (goLeft) {
                int minI = -1;
                for (int i = 0; i < N; ++i) {
                    if (count[i] != 0) {
                        if (minI == -1) {
                            minI = i;
                        } else if (position[i] < position[minI]) {
                            minI = i;
                        }
                    }
                }
                if (position[minI] - time > left) {
                    left = position[minI] - time;
                } else {
                    left++;
                }
                count[minI]--;
            } else {
                // go right
                int maxI = -1;
                for (int i = 0; i < N; ++i) {
                    if (count[i] != 0) {
                        if (maxI == -1) {
                            maxI = i;
                        } else if (position[i] > position[maxI]) {
                            maxI = i;
                        }
                    }
                }
                if (position[maxI] + time < right) {
                    right = position[maxI] + time;
                } else {
                    right--;
                }
                count[maxI]--;
            }
        }
        return (left < right) ? "Possible" : "Impossible";
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int p2, boolean hasAnswer, String p3) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}" + "," + p2);
        System.out.println("]");
        CatsOnTheLineDiv2 obj;
        String answer;
        obj = new CatsOnTheLineDiv2();
        long startTime = System.currentTimeMillis();
        answer = obj.getAnswer(p0, p1, p2);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + "\"" + p3 + "\"");
        }
        System.out.println("Your answer:");
        System.out.println("\t" + "\"" + answer + "\"");
        if (hasAnswer) {
            res = answer.equals(p3);
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int[] p1;
        int p2;
        String p3;

        // ----- test 0 -----
        p0 = new int[] { -100, -200, -300, -400};
        p1 = new int[] {1, 1, 1, 4};
        p2 = 1;
        p3 = "Impossible";
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 0 -----
        p0 = new int[] {0};
        p1 = new int[] {7};
        p2 = 3;
        p3 = "Possible";
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] {0};
        p1 = new int[] {8};
        p2 = 2;
        p3 = "Impossible";
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] {0, 1};
        p1 = new int[] {3, 1};
        p2 = 0;
        p3 = "Impossible";
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] {5, 0, 2};
        p1 = new int[] {2, 3, 5};
        p2 = 2;
        p3 = "Impossible";
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new int[] {5, 1, -10, 7, 12, 2, 10, 20};
        p1 = new int[] {3, 4, 2, 7, 1, 4, 3, 4};
        p2 = 6;
        p3 = "Possible";
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
