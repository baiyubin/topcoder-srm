public class DeerInZooDivTwo {
    public int[] getminmax(int N, int K) {
        int[] ret = new int[2];
        int lost = 0;

        // max
        if (K % 2 == 1) {
            lost = (K + 1) / 2;
        } else {
            lost = K / 2;
        }
        if (lost >= N) {
            ret[1] = 0;
        } else {
            ret[1] = N - lost;
        }

        // min
        if (K >= N) {
            ret[0] = 0;
        } else {
            ret[0] = N - K;
        }
        return ret;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, int[] p2) {
        System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
        System.out.println("]");
        DeerInZooDivTwo obj;
        int[] answer;
        obj = new DeerInZooDivTwo();
        long startTime = System.currentTimeMillis();
        answer = obj.getminmax(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.print("\t" + "{");
            for (int i = 0; p2.length > i; ++i) {
                if (i > 0) {
                    System.out.print(",");
                }
                System.out.print(p2[i]);
            }
            System.out.println("}");
        }
        System.out.println("Your answer:");
        System.out.print("\t" + "{");
        for (int i = 0; answer.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(answer[i]);
        }
        System.out.println("}");
        if (hasAnswer) {
            if (answer.length != p2.length) {
                res = false;
            } else {
                for (int i = 0; answer.length > i; ++i) {
                    if (answer[i] != p2[i]) {
                        res = false;
                    }
                }
            }
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int p0;
        int p1;
        int[] p2;

        // ----- test 0 -----
        p0 = 3;
        p1 = 2;
        p2 = new int[] {1,2};
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 3;
        p1 = 3;
        p2 = new int[] {0,1};
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 10;
        p1 = 0;
        p2 = new int[] {10,10};
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = 654;
        p1 = 321;
        p2 = new int[] {333,493};
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = 100;
        p1 = 193;
        p2 = new int[] {0,3};
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // Brus and Gogo came to the zoo today.
    // It's the season when deer shed their antlers.
    // There are N deer in the zoo.
    // Initially, each deer had exactly two antlers, but since then some deer may have lost one or both antlers.
    // (Now there may be some deer with two antlers, some with one, and some with no antlers at all.)
    //
    // Brus and Gogo went through the deer enclosure and they collected all the antlers already lost by the deer.
    // The deer have lost exactly K antlers in total.
    // Brus and Gogo are now trying to calculate how many deer have not lost any antlers yet.
    //
    // Return a int[] with exactly two elements {x,y}, where x is the smallest possible number
    // of deer that still have two antlers, and y is the largest possible number of those deer.
    //
    // DEFINITION
    // Class:DeerInZooDivTwo
    // Method:getminmax
    // Parameters:int, int
    // Returns:int[]
    // Method signature:int[] getminmax(int N, int K)
    //
    //
    // CONSTRAINTS
    // -N will be between 1 and 1000, inclusive.
    // -K will be between 0 and 2N, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // 3
    // 2
    //
    // Returns: {1, 2 }
    //
    // There are two possibilities:
    // Either the K=2 antlers come from two different deer, or they come from the same deer.
    // In the first case, there is 1 deer with two antlers (and two other with one antler each),
    // in the second case there are 2 deer with two antlers each (and one deer with none).
    //
    // 1)
    // 3
    // 3
    //
    // Returns: {0, 1 }
    //
    //
    //
    // 2)
    // 10
    // 0
    //
    // Returns: {10, 10 }
    //
    // All deer still have 2 horns.
    //
    // 3)
    // 654
    // 321
    //
    // Returns: {333, 493 }
    //
    //
    //
    // 4)
    // 100
    // 193
    //
    // Returns: {0, 3 }
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
