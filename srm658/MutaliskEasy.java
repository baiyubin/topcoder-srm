import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class MutaliskEasy {
	int[][][] memo = new int[61][61][61];
	static int INF = 100;
	public int minimalAttacks(int[] x) {
		for (int[][] arr2 : memo) {
			for (int[] arr : arr2) {
				Arrays.fill(arr, INF);
			}
		}
		memo[0][0][0] = 0;
		int[] input = new int[3];
		for (int i = 0; i < x.length; i++) {
			input[i] = x[i];
		}
		return dp(input);
	}
	private int dp(int[] x) {
		cleanup(x);
		int a = x[0], b = x[1], c = x[2];
		if (memo[a][b][c] != INF) {
			return memo[a][b][c];
		}
		int[] input;
		int result = INF;
		int[][] perm = new int[][] {{1, 3, 9}, {1, 9, 3}, {3, 1, 9}, {3, 9, 1}, {9, 1, 3}, {9, 3, 1}};
		for (int[] p : perm) {
			input = new int[] {a - p[0], b - p[1], c - p[2]};
			result = Math.min(result, 1 + dp(input));
		}
		return memo[a][b][c] = result;
	}
	private void cleanup(int[] x) {
		x[0] = Math.max(0, x[0]);
		x[1] = Math.max(0, x[1]);
		x[2] = Math.max(0, x[2]);
		Arrays.sort(x);
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		MutaliskEasy obj;
		int answer;
		obj = new MutaliskEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.minimalAttacks(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int[] p0;
		int p1;

		// ----- test 0 -----
		p0 = new int[] {12, 10, 4};
		p1 = 2;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new int[] {54, 18, 6};
		p1 = 6;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new int[] {55, 60, 53};
		p1 = 13;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new int[] {1, 1, 1};
		p1 = 1;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = new int[] {60, 40};
		p1 = 9;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------

		// ----- test 5 -----
		p0 = new int[] {60};
		p1 = 7;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Fox Ciel is writing an AI for the game Starcraft and she needs your help.
	//
	//
	// In Starcraft, one of the available units is a mutalisk.
	// Mutalisks are very useful for harassing Terran bases.
	// Fox Ciel has one mutalisk.
	// The enemy base contains one or more Space Construction Vehicles (SCVs).
	// Each SCV has some amount of hit points.
	//
	//
	// When the mutalisk attacks, it can target up to three different SCVs.
	//
	// The first targeted SCV will lose 9 hit points.
	// The second targeted SCV (if any) will lose 3 hit points.
	// The third targeted SCV (if any) will lose 1 hit point.
	//
	// If the hit points of a SCV drop to 0 or lower, the SCV is destroyed.
	// Note that you may not target the same SCV twice in the same attack.
	//
	//
	// You are given a int[] HP containing the current hit points of your enemy's SCVs.
	// Return the smallest number of attacks in which you can destroy all these SCVs.
	//
	// DEFINITION
	// Class:MutaliskEasy
	// Method:minimalAttacks
	// Parameters:int[]
	// Returns:int
	// Method signature:int minimalAttacks(int[] x)
	//
	//
	// CONSTRAINTS
	// -x will contain between 1 and 3 elements, inclusive.
	// -Each element in x will be between 1 and 60, inclusive.
	//
	//
	// EXAMPLES
	//
	// 0)
	// {12,10,4}
	//
	// Returns: 2
	//
	// You can destroy all SCVs in two attacks as follows:
	//
	// Target the SCVs in the order 0, 2, 1. Their hit points after the attack will be {12-9, 10-1, 4-3} = {3, 9, 1}.
	// Target the SCVs in the order 1, 0, 2. Their hit points will drop exactly to {0, 0, 0}.
	//
	//
	// 1)
	// {54,18,6}
	//
	// Returns: 6
	//
	// You should attack 6 times, always in the order 0, 1, 2.
	//
	// 2)
	// {55,60,53}
	//
	// Returns: 13
	//
	//
	//
	// 3)
	// {1,1,1}
	//
	// Returns: 1
	//
	//
	//
	// 4)
	// {60, 40}
	//
	// Returns: 9
	//
	//
	//
	// 5)
	// {60}
	//
	// Returns: 7
	//
	//
	//
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
