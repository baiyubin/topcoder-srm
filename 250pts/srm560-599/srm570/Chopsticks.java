import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class Chopsticks {
    public int getmax(int[] length) {
        Arrays.sort(length);
        int ret = 0, i = 1;
        while (i < length.length) {
            if (length[i] == length[i - 1]) {
                ret++;
                i += 2;
            } else {
                i++;
            }
        }
        return ret;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}");
        System.out.println("]");
        Chopsticks obj;
        int answer;
        obj = new Chopsticks();
        long startTime = System.currentTimeMillis();
        answer = obj.getmax(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p1);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p1;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int p1;

        // ----- test 0 -----
        p0 = new int[] {5,5};
        p1 = 1;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] {1,2,3,2,1,2,3,2,1};
        p1 = 4;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] {1};
        p1 = 0;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] {1,2,3,4,5,6,7,8,9};
        p1 = 0;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new int[] {35,35,35,50,16,30,10,10,35,50,16,16,16,30,50,30,16,35,50,30,10,50,50,16,16,10,35,50,50,50,16,35,35,30,35,10,50,10,50,50,16,30,35,10,10,30,10,10,16,35};
        p1 = 24;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // Cat Carol wants to invite some of her friends to a lunch at her house.
    // Carol has some chopsticks of possibly different lengths.
    // Each of the invited guests must receive two chopsticks.
    // Additionally, the two chopsticks given to each guest must have exactly the same length.
    //
    // You are given a int[] length.
    // Each element of length is the length of one of Carol's chopsticks.
    // Compute and return the maximum number of friends Carol may invite.
    //
    // DEFINITION
    // Class:Chopsticks
    // Method:getmax
    // Parameters:int[]
    // Returns:int
    // Method signature:int getmax(int[] length)
    //
    //
    // CONSTRAINTS
    // -length will contain between 1 and 50 elements, inclusive.
    // -Each element of length will be between 1 and 100, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {5,5}
    //
    // Returns: 1
    //
    // Two chopsticks have the same length. Carol can invite one friend.
    //
    // 1)
    // {1,2,3,2,1,2,3,2,1}
    //
    // Returns: 4
    //
    // Carol can make one pair of chopsticks of length 1, two pairs of chopsticks of length 2, and one pair of chopsticks of length 3. She can invite four guests in total.
    //
    // 2)
    // {1}
    //
    // Returns: 0
    //
    // Carol has only one chopstick. Carol can't invite anybody.
    //
    // 3)
    // {1,2,3,4,5,6,7,8,9}
    //
    // Returns: 0
    //
    // No two chopsticks have the same length. Carol can't invite anybody.
    //
    // 4)
    // {35,35,35,50,16,30,10,10,35,50,16,16,16,30,50,30,16,35,50,30,10,50,50,16,16,
    // 10,35,50,50,50,16,35,35,30,35,10,50,10,50,50,16,30,35,10,10,30,10,10,16,35}
    //
    // Returns: 24
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
