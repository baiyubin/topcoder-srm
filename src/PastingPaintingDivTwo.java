import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class PastingPaintingDivTwo
{
    int n, m, overlap;
	public long countColors(String[] clipboard, int T)
	{
		n = clipboard.length;
        m = clipboard[0].length();
        overlap = Math.min(n, m);

	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int p1, boolean hasAnswer, long p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		PastingPaintingDivTwo obj;
		long answer;
		obj = new PastingPaintingDivTwo();
		long startTime = System.currentTimeMillis();
		answer = obj.countColors(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		long p2;
		
		// ----- test 0 -----
		p0 = new String[]{"..B","B..","BB."};
		p1 = 3;
		p2 = 10L;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"B...","....","....","...B"};
		p1 = 2;
		p2 = 4L;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{"BBB"};
		p1 = 10000;
		p2 = 30000L;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"."};
		p1 = 1000000000;
		p2 = 0L;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{"BB.",".B."};
		p1 = 100;
		p2 = 201L;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new String[]{"..........B..........",".........B.B.........","........B...B........",".......B.....B.......","......B..B.B..B......",".....B...B.B...B.....","....B...........B....","...B...B.....B...B...","..B.....BBBBBB....B..",".B..........BB.....B.","BBBBBBBBBBBBBBBBBBBBB"};
		p1 = 1000000000;
		p2 = 21000000071L;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Cucumber Boy likes drawing pictures.  Today, he plans to draw a picture using a very simple graphics editor.
	// 
	// The editor has the following functions:
	// 
	// The canvas is an infinite two-dimensional grid of pixels.
	// There are only two colors: black, and transparent. These are denoted 'B' and '.' (a period), respectively.
	// The editor has a clipboard that contains a rectangular picture.
	// The editor can take the picture in the clipboard and paste it onto any corresponding rectangle of the canvas. The user just has to select the pixel of the canvas where the upper left corner of the clipboard will be pasted.
	// When pasting the picture, the black pixels of the picture in the clipboard will overwrite their corresponding pixels on the canvas. The pixels that are transparent in the clipboard picture do not change the canvas.
	// 
	// 
	// At this moment, all pixels on the infinite canvas are transparent.  Cucumber Boy has already stored a picture in the clipboard.  You are given this picture as a String[] clipboard.
	// 
	// Cucumber Boy now wants to paste the clipboard picture onto the canvas exactly T times in a row.
	// For each i, when pasting the clipboard for the i-th time, he will choose the pixel (i,i) as the upper left corner of the pasted picture.
	// 
	// You are given the String[] clipboard and the int T.  Return the number of black pixels on the canvas after all the pasting is finished.
	// 
	// DEFINITION
	// Class:PastingPaintingDivTwo
	// Method:countColors
	// Parameters:String[], int
	// Returns:long
	// Method signature:long countColors(String[] clipboard, int T)
	// 
	// 
	// CONSTRAINTS
	// -clipboard will contain between 1 and 50 elements, inclusive.
	// -Each element of clipboard will contain between 1 and 50 characters, inclusive.
	// -Each element of clipboard will contain the same number of characters.
	// -Each character of each element of clipboard will be 'B' or '.'.
	// -T will be between 1 and 1,000,000,000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {
	// "..B",
	// "B..",
	// "BB."
	// }
	// 3
	// 
	// Returns: 10
	// 
	// 
	// 
	// 1)
	// {
	// "B...",
	// "....",
	// "....",
	// "...B"
	// }
	// 2
	// 
	// Returns: 4
	// 
	// 
	// 
	// 2)
	// {"BBB"}
	// 10000
	// 
	// Returns: 30000
	// 
	// 
	// 
	// 3)
	// {"."}
	// 1000000000
	// 
	// Returns: 0
	// 
	// 
	// 
	// 4)
	// {
	// "BB.",
	// ".B."
	// }
	// 100
	// 
	// Returns: 201
	// 
	// 
	// 
	// 5)
	// {
	// "..........B..........",
	// ".........B.B.........",
	// "........B...B........",
	// ".......B.....B.......",
	// "......B..B.B..B......",
	// ".....B...B.B...B.....",
	// "....B...........B....",
	// "...B...B.....B...B...",
	// "..B.....BBBBBB....B..",
	// ".B..........BB.....B.",
	// "BBBBBBBBBBBBBBBBBBBBB"
	// }
	// 1000000000
	// 
	// Returns: 21000000071
	// 
	// Note that the answer may overflow a 32-bit integer variable.
	// 
	// 
	// This is the image of clipboard in this example.
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
