import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

/**
 * srm633
 */
public class GCDLCMEasy {
	int[] value;
	int n;
	HashMap<Integer, HashMap<Integer, Integer>> gcd;
	HashMap<Integer, HashMap<Integer, Integer>> lcm;

	public String possible(int n, int[] A, int[] B, int[] G, int[] L) {
		this.n = n;

		gcd = new HashMap<Integer, HashMap<Integer, Integer>>();
		lcm = new HashMap<Integer, HashMap<Integer, Integer>>();

		for (int i = 0; i < A.length; i++) {
			if (gcd.get(A[i]) == null) {
				gcd.put(A[i], new HashMap<Integer, Integer>());
			}
			gcd.get(A[i]).put(B[i], G[i]);
			if (gcd.get(B[i]) == null) {
				gcd.put(B[i], new HashMap<Integer, Integer>());
			}
			gcd.get(B[i]).put(A[i], G[i]);
			if (lcm.get(A[i]) == null) {
				lcm.put(A[i], new HashMap<Integer, Integer>());
			}
			lcm.get(A[i]).put(B[i], L[i]);
			if (lcm.get(B[i]) == null) {
				lcm.put(B[i], new HashMap<Integer, Integer>());
			}
			lcm.get(B[i]).put(A[i], L[i]);
		}

		boolean ret = true;
		value = new int[n];
		Arrays.fill(value, -1);
		for (int i = 0; i < n; i++) {
			if (value[i] == -1) {
				for (value[i] = 1; value[i] <= 10000; value[i]++) {
					int[] backup = new int[n];
					System.arraycopy(value, 0, backup, 0, value.length);
					if (dfs(i)) break;
					value = backup;
				}
			}
			if (value[i] > 10000) {
				ret = false;
				break;
			}
		}

		return ret ? "Solution exists" : "Solution does not exist";
	}
	public boolean dfs(int curr) {
		if (gcd.get(curr) == null) return true;
		for (Integer child : gcd.get(curr).keySet()) {
			int g = gcd.get(curr).get(child);
			int l = lcm.get(curr).get(child);
			if (value[curr] % g != 0 || l % value[curr] != 0) return false;
			int nextValue = l / value[curr] * g;
			if (gcd(value[curr], nextValue) != g || lcm(value[curr], nextValue) != l) return false;
			if (value[child] == -1) {
				value[child] = nextValue;
				if (!dfs(child)) return false;
			} else if (value[child] != nextValue) {
				return false;
			}
		}
		return true;
	}
	public int gcd(int a, int b) {
		return (b == 0) ? a : gcd(b, a % b);
	}
	public int lcm(int a, int b) {
		return b / gcd(a, b) * a;
	}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, int[] p2, int[] p3, int[] p4, boolean hasAnswer, String p5) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p2[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p3.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p3[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p4.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p4[i]);
		}
		System.out.print("}");
		System.out.println("]");
		GCDLCMEasy obj;
		String answer;
		obj = new GCDLCMEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.possible(p0, p1, p2, p3, p4);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p5 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p5);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int p0;
		int[] p1;
		int[] p2;
		int[] p3;
		int[] p4;
		String p5;


		// ----- test 3 -----
		p0 = 2;
		p1 = new int[] {0};
		p2 = new int[] {1};
		p3 = new int[] {1234};
		p4 = new int[] {5678};
		p5 = "Solution does not exist";
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		// ----- test 0 -----
		p0 = 4;
		p1 = new int[] {0, 1, 2, 3};
		p2 = new int[] {1, 2, 3, 0};
		p3 = new int[] {6, 6, 6, 6};
		p4 = new int[] {12, 12, 12, 12};
		p5 = "Solution exists";
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = 5;
		p1 = new int[] {0, 1, 2, 3, 4};
		p2 = new int[] {1, 2, 3, 4, 0};
		p3 = new int[] {6, 6, 6, 6, 6};
		p4 = new int[] {12, 12, 12, 12, 12};
		p5 = "Solution does not exist";
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = 2;
		p1 = new int[] {0, 0};
		p2 = new int[] {1, 1};
		p3 = new int[] {123, 123};
		p4 = new int[] {456, 789};
		p5 = "Solution does not exist";
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = 6;
		p1 = new int[] {0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4};
		p2 = new int[] {1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5, 4, 5, 5};
		p3 = new int[] {2, 2, 3, 3, 1, 2, 5, 1, 5, 1, 7, 7, 3, 5, 7};
		p4 = new int[] {30, 42, 30, 42, 210, 70, 30, 210, 70, 210, 42, 70, 105, 105, 105};
		p5 = "Solution exists";
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------

		// ----- test 5 -----
		p0 = 500;
		p1 = new int[] {0};
		p2 = new int[] {1};
		p3 = new int[] {10000};
		p4 = new int[] {10000};
		p5 = "Solution exists";
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
// PROBLEM STATEMENT
// Your task is to find n positive integers.
// We will label them x[0] through x[n-1].
//
//
//
// We will give you some information about these integers.
// Namely, for some pairs of integers we will tell you both their greatest common divisor (GCD) and their least common multiple (LCM).
//
//
//
// You are given the int n and four int[]s: A, B, G, and L.
// These int[]s will all have the same number of elements.
// Their meaning is as follows:
// For each valid i, the integers x[ A[i] ] and x[ B[i] ] must have the greatest common divisor G[i] and the least common multiple L[i].
//
//
//
// Return "Solution exists" (quotes for clarity) if there is at least one way to choose x[0] through x[n-1] so that all requirements are satisfied.
// Otherwise, return "Solution does not exist".
//
// DEFINITION
// Class:GCDLCMEasy
// Method:possible
// Parameters:int, int[], int[], int[], int[]
// Returns:String
// Method signature:String possible(int n, int[] A, int[] B, int[] G, int[] L)
//
//
// NOTES
// -The greatest common divisor (GCD) of two positive integers x and y is the largest positive integer z such that z divides x and at the same time z divides y.
// -The least common multiple (LCM) of two positive integers x and y is the smallest positive integer z such that x divides z and at the same time y divides z.
// -For example, the GCD of 10 and 15 is 5, and the LCM of 10 and 15 is 30.
//
//
// CONSTRAINTS
// -n will be between 1 and 500, inclusive.
// -A will contain between 1 and 500 elements, inclusive.
// -A and B will contain the same number of elements.
// -A and G will contain the same number of elements.
// -A and L will contain the same number of elements.
// -Each element in A will be between 0 and n-1, inclusive.
// -Each element in B will be between 0 and n-1, inclusive.
// -For each i, A[i] and B[i] will be different.
// -Each element in G will be between 1 and 10,000, inclusive.
// -Each element in L will be between 1 and 10,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// 4
// {0,1,2,3}
// {1,2,3,0}
// {6,6,6,6}
// {12,12,12,12}
//
// Returns: "Solution exists"
//
// We have 4 unknown integers: x[0], x[1], x[2], and x[3].
// The given A, B, G, and L encode the following information:
//
// The GCD of x[0] and x[1] must be 6 and their LCM must be 12.
// The GCD of x[1] and x[2] must be 6 and their LCM must be 12.
// The GCD of x[2] and x[3] must be 6 and their LCM must be 12.
// The GCD of x[3] and x[0] must be 6 and their LCM must be 12.
//
// There are two valid solutions.
// In one of them, x[0] = x[2] = 6 and x[1] = x[3] = 12.
//
// 1)
// 5
// {0,1,2,3,4}
// {1,2,3,4,0}
// {6,6,6,6,6}
// {12,12,12,12,12}
//
// Returns: "Solution does not exist"
//
//
//
// 2)
// 2
// {0,0}
// {1,1}
// {123,123}
// {456,789}
//
// Returns: "Solution does not exist"
//
// The LCM of x[0] and x[1] cannot be 456 and 789 at the same time.
//
// 3)
// 2
// {0}
// {1}
// {1234}
// {5678}
//
// Returns: "Solution does not exist"
//
// The LCM of x[0] and x[1] must always be a multiple of their GCD.
//
// 4)
// 6
// {0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4}
// {1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5, 4, 5, 5}
// {2, 2, 3, 3, 1, 2, 5, 1, 5, 1, 7, 7, 3, 5, 7}
// {30, 42, 30, 42, 210, 70, 30, 210, 70, 210, 42, 70, 105, 105, 105}
//
//
// Returns: "Solution exists"
//
// There is one solution: {6, 10, 14, 15, 21, 35}.
//
// 5)
// 500
// {0}
// {1}
// {10000}
// {10000}
//
// Returns: "Solution exists"
//
//
//
// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
