import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class LittleElephantAndBooks {
    /**
     * srm 592
     * @param  pages  [description]
     * @param  number [description]
     * @return        [description]
     */
    public int getNumber(int[] pages, int number) {
        Arrays.sort(pages);
        int ret = 0;
        for (int i = 0; i < number - 1; i++) {
            ret += pages[i];
        }
        ret += pages[number];
        return ret;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, boolean hasAnswer, int p2) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + p1);
        System.out.println("]");
        LittleElephantAndBooks obj;
        int answer;
        obj = new LittleElephantAndBooks();
        long startTime = System.currentTimeMillis();
        answer = obj.getNumber(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p2);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p2;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int p1;
        int p2;

        // ----- test 0 -----
        p0 = new int[] {1, 2};
        p1 = 1;
        p2 = 2;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] {74, 7, 4, 47, 44};
        p1 = 3;
        p2 = 58;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] {3, 1, 9, 7, 2, 8, 6, 4, 5};
        p1 = 7;
        p2 = 29;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] {74, 86, 32, 13, 100, 67, 77};
        p1 = 2;
        p2 = 80;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    //
    // Little Elephant from the Zoo of Lviv has a bunch of books.
    // You are given a int[] pages.
    // Each element of pages is the number of pages in one of those books.
    // There are no two books with the same number of pages.
    //
    //
    //
    //
    // You are also given a int number.
    // As a homework from the teacher, Little Elephant must read exactly number of his books during the summer.
    // (Little Elephant has strictly more than number books.)
    //
    //
    //
    //
    // All other elephants in the school also got the exact same homework.
    // Little Elephant knows that the other elephants are lazy:
    // they will simply pick the shortest number books, so that they have to read the smallest possible total number of pages.
    // Little Elephant wants to be a good student and read a bit more than the other elephants.
    // He wants to pick the subset of books with the second smallest number of pages.
    // In other words, he wants to pick a subset of books with the following properties:
    //
    // There are exactly number books in the chosen subset.
    // The total number of pages of those books is greater than the smallest possible total number of pages.
    // The total number of pages of those books is as small as possible (given the above conditions).
    //
    //
    //
    //
    //
    // Return the total number of pages Little Elephant will have to read.
    //
    //
    // DEFINITION
    // Class:LittleElephantAndBooks
    // Method:getNumber
    // Parameters:int[], int
    // Returns:int
    // Method signature:int getNumber(int[] pages, int number)
    //
    //
    // CONSTRAINTS
    // -pages will contain between 2 and 50 elements, inclusive.
    // -Each element of pages will be between 1 and 100, inclusive.
    // -There will be no two equal elements in pages.
    // -number will be between 1 and N-1, inclusive, where N is the number of elements in pages.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {1, 2}
    // 1
    //
    // Returns: 2
    //
    // There are two books: one with 1 page, the other with 2 pages.
    // As number=1, each of the elephants has to read one book.
    // The lazy elephants will read the 1-page book, so our Little Elephant should read the 2-page one.
    // Thus, the number of pages read by Little Elephant is 2.
    //
    // 1)
    // {74, 7, 4, 47, 44}
    // 3
    //
    // Returns: 58
    //
    // The lazy elephants will read books 1, 2, and 4 (0-based indices).
    // Their total number of pages is 7+4+44 = 55.
    // Little Elephant should pick books 1, 2, and 3, for a total of 7+4+47 = 58 pages.
    // (Note that Little Elephant is allowed to pick any subset, except for the minimal one.
    // In particular, he may read some of the books read by the other elephants.)
    //
    // 2)
    // {3, 1, 9, 7, 2, 8, 6, 4, 5}
    // 7
    //
    // Returns: 29
    //
    //
    //
    // 3)
    // {74, 86, 32, 13, 100, 67, 77}
    // 2
    //
    // Returns: 80
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
