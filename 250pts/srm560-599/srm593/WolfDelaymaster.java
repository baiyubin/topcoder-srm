import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class WolfDelaymaster {
    public String check(String str) {
        StringBuilder sb = new StringBuilder(str);
        boolean ret = true;
        while (sb.length() > 0) {
            // count w
            int ctw = 0;
            for (int i = 0; i < sb.length(); i++) {
                if (sb.charAt(i) == 'w') {
                    ctw++;
                } else {
                    break;
                }
            }
            if (ctw == 0 || sb.length() < ctw * 4 ) {
                ret = false;
                break;
            }
            // construct valid
            StringBuilder sb2 = new StringBuilder();
            for (char c: "wolf".toCharArray()) {
                for (int i = 0; i < ctw; i++) {
                    sb2.append(c);
                }
            }
            // judge equal
            if (sb.substring(0, ctw * 4).equals(sb2.toString())) {
                // continue
                sb.delete(0, ctw * 4);
            } else {
                ret = false;
                break;
            }
        }
        return ret ? "VALID" : "INVALID";
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, String p1) {
        System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
        System.out.println("]");
        WolfDelaymaster obj;
        String answer;
        obj = new WolfDelaymaster();
        long startTime = System.currentTimeMillis();
        answer = obj.check(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + "\"" + p1 + "\"");
        }
        System.out.println("Your answer:");
        System.out.println("\t" + "\"" + answer + "\"");
        if (hasAnswer) {
            res = answer.equals(p1);
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String p0;
        String p1;

        // ----- test 0 -----
        p0 = "wolf";
        p1 = "VALID";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = "wolfwolfwwoollffwolfwwwooolllff";
        p1 = "INVALID";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = "wolfwwoollffwwwooolllfffwwwwoooollllffff";
        p1 = "VALID";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = "flowolf";
        p1 = "INVALID";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // Wolf Sothe is playing the game Delaymaster.
    // In this game, he can create new words according to the following rules:
    //
    // For each positive integer n, the string which consists of n copies of 'w', then n copies of 'o', then n copies of 'l', and finally n copies of 'f' is a valid word.
    // The concatenation of two valid words is a valid word.
    // Only the words that can be obtained by rules 1 and 2 are valid. There are no other valid words.
    //
    //
    // Thus, for example:
    //
    // By rule 1, "wolf", "wwoollff", and "wwwooolllfff" are valid words.
    // Then, by rule 2, "wolfwwoollff" is a valid word.
    // By applying rule 2 twice, "wolfwwoollffwolf" is a valid word.
    // The string "wfol" is not a valid word (order matters).
    // The string "wwolfolf" is not a valid word (we can only concatenate, not insert one word into another).
    // The string "wwwoolllfff" is not a valid word (only two 'o's instead of three).
    //
    //
    // You are given a String str.
    // Return "VALID" if str is a valid word and "INVALID" otherwise.
    // Note that the return value is case-sensitive: you must return the strings "VALID" and "INVALID" in all-uppercase.
    //
    // DEFINITION
    // Class:WolfDelaymaster
    // Method:check
    // Parameters:String
    // Returns:String
    // Method signature:String check(String str)
    //
    //
    // CONSTRAINTS
    // -str will contain between 1 and 50 characters, inclusive.
    // -Each character in str will be 'w', 'o', 'l' or 'f'.
    //
    //
    // EXAMPLES
    //
    // 0)
    // "wolf"
    //
    // Returns: "VALID"
    //
    // The first valid word from the examples in the problem statement.
    //
    // 1)
    // "wwolfolf"
    //
    // Returns: "INVALID"
    //
    // The second invalid word from the examples in the problem statement.
    //
    // 2)
    // "wolfwwoollffwwwooolllfffwwwwoooollllffff"
    //
    // Returns: "VALID"
    //
    //
    //
    // 3)
    // "flowolf"
    //
    // Returns: "INVALID"
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
