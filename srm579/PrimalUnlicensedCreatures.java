public class PrimalUnlicensedCreatures
{
	public int maxWins(int initialLevel, int[] grezPower)
	{
		Arrays.sort(grezPower);
        int curr = initialLevel;
        int ret = 0;
        for (int i : grezPower) {
            if (curr > i) {
                curr += (i >> 1);
                ret++;
            }
        }
        return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		PrimalUnlicensedCreatures obj;
		int answer;
		obj = new PrimalUnlicensedCreatures();
		long startTime = System.currentTimeMillis();
		answer = obj.maxWins(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int[] p1;
		int p2;
		
		// ----- test 0 -----
		p0 = 31;
		p1 = new int[]{10,20,30};
		p2 = 3;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 20;
		p1 = new int[]{24,5,6,38};
		p2 = 3;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 20;
		p1 = new int[]{3,3,3,3,3,1,25};
		p2 = 6;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 4;
		p1 = new int[]{3,13,6,4,9};
		p2 = 5;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 7;
		p1 = new int[]{7,8,9,10};
		p2 = 0;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// The Primal Grez are ferocious creatures. They constantly fight each other. When a Grez wins a battle against another Grez, the winner captures the loser's essence, thus becoming stronger. More formally:
	// The power level of each Grez is a positive integer.
	// A Grez can only defeat creatures that have a strictly smaller power level.
	// When a Grez of power level X defeats a Grez of power level Y, the first Grez's power level is increased to X + Y/2. Note that Y/2 represents integer division, i.e., the fractional part is discarded. For example, for Y=3 we have Y/2 = 1.
	// 
	// Your goal is to help a Grez that currently has power level equal to int initialLevel battle against a set of other Grez. For each i, Grez number i (0-based index) has a power level equal to grezPower[i]. Your Grez can challenge the other creatures in any order.
	// 
	// You are given the int initialLevel and the int[] grezPower. Return the maximum number of creatures your Grez can defeat, one after another.
	// 
	// 
	// DEFINITION
	// Class:PrimalUnlicensedCreatures
	// Method:maxWins
	// Parameters:int, int[]
	// Returns:int
	// Method signature:int maxWins(int initialLevel, int[] grezPower)
	// 
	// 
	// CONSTRAINTS
	// -initialLevel will be between 1 and 1000, inclusive.
	// -grezPower will contain between 1 and 50 elements, inclusive.
	// -Each element of grezPower will be between 1 and 1000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 31
	// {10, 20, 30}
	// 
	// Returns: 3
	// 
	// It is possible to defeat all the available opponents. For example:
	// Defeat the creature with power level 30. Your creature's power level becomes 31 + 15 = 46.
	// Defeat the creature with power level 10. Your creature's power level becomes 46 + 5 = 51.
	// Defeat the creature with power level 20. Your creature's power level becomes 51 + 10 = 61.
	// 
	// 
	// 
	// 
	// 1)
	// 20
	// {24, 5, 6, 38}
	// 
	// Returns: 3
	// 
	// It is best to defeat creatures 1 and 2 before facing creature 0. Your creature's power level will be 25 when facing
	// creature 0. It is not possible to defeat creature 3.
	// 
	// 2)
	// 20
	// {3, 3, 3, 3, 3, 1, 25 }
	// 
	// Returns: 6
	// 
	// It is possible to defeat the 6 weakest creatures. After that your creature's power level will be 25, which is not strong enough to defeat another level 25 creature.
	// 
	// 3)
	// 4
	// {3, 13, 6, 4, 9}
	// 
	// Returns: 5
	// 
	// 
	// 
	// 4)
	// 7
	// {7, 8, 9, 10}
	// 
	// Returns: 0
	// 
	// All the available opponents are too strong for your creature to defeat.
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
