import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TallShoes
{
	int n;
	boolean[][] connected = new boolean[60][60];
	int[][] mHeight = new int[60][60];
	public int maxHeight(int N, int[] X, int[] Y, int[] height, long B)
	{
		n = N;
		for (int i = 0; i < X.length; ++i) {
			int a = X[i], b = Y[i];
		    connected[a][b] = connected[b][a] = true;
		    mHeight[a][b] = mHeight[b][a] = height[i];
		}
		int left = 0, right = (int) 1e9;
		while (left < right) {
			int mid = (left + right) >> 1;
			if (valid(mid, B)) {
				left = mid + 1;
			} else {
				right = mid;
			}
		}
		return left - 1;
	}
	/**
	 * bfs
	 * @param  h 
	 * @param  B 
	 * @return   
	 */
	public boolean valid(int h, long B) {
		ArrayDeque<Integer> city = new ArrayDeque<Integer>();
		ArrayDeque<Long> budget = new ArrayDeque<Long>();
		long[] remain = new long[n];
        Arrays.fill(remain, -1);
		city.add(0);
		budget.add(B);
		remain[0] = B;
		// start = 0, end = n - 1
		while (!city.isEmpty()) {
			int c = city.pollFirst();
			long b = budget.pollFirst();
			for (int i = 0; i < n; ++i) {
			    if (connected[c][i]) {
			    	long b1 = b;
			    	if (mHeight[c][i] < h) {
				    	b1 -= 1L * (h - mHeight[c][i]) * (h - mHeight[c][i]);
				    }
				    if (b1 >= 0 && b1 > remain[i]) {
				    	city.add(i);
				    	budget.add(b1);
						remain[i] = b1;
				    }
			    }
			}
		}
		return remain[n - 1] >= 0;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, int[] p2, int[] p3, long p4, boolean hasAnswer, int p5) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p2[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p3.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p3[i]);
		}
		System.out.print("}" + "," + p4);
		System.out.println("]");
		TallShoes obj;
		int answer;
		obj = new TallShoes();
		long startTime = System.currentTimeMillis();
		answer = obj.maxHeight(p0, p1, p2, p3, p4);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p5);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p5;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int[] p1;
		int[] p2;
		int[] p3;
		long p4;
		int p5;
		
		// ----- test 0 -----
		p0 = 3;
		p1 = new int[]{0,1,0};
		p2 = new int[]{1,2,2};
		p3 = new int[]{3,4,2};
		p4 = 1L;
		p5 = 4;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 3;
		p1 = new int[]{0,1,0};
		p2 = new int[]{1,2,2};
		p3 = new int[]{3,4,2};
		p4 = 52L;
		p5 = 9;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 8;
		p1 = new int[]{0,0,3,3,4,4,4,7,7};
		p2 = new int[]{1,2,1,2,3,5,6,5,6};
		p3 = new int[]{1000,1000,1000,1000,1,1000,1000,1000,1000};
		p4 = 3L;
		p5 = 2;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 10;
		p1 = new int[]{0,1,2,3,4,5,6,7,8};
		p2 = new int[]{1,2,3,4,5,6,7,8,9};
		p3 = new int[]{0,0,0,0,0,0,0,0,0};
		p4 = 9876543210123L;
		p5 = 1047565;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 6;
		p1 = new int[]{0,0,0,0,0,1,1,1,1,2,2,2,3,3,4};
		p2 = new int[]{1,2,3,4,5,2,3,4,5,3,4,5,4,5,5};
		p3 = new int[]{999999,986588,976757,988569,977678,999999,967675,947856,955856,999999,975956,956687,999999,979687,999999};
		p4 = 0L;
		p5 = 999999;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// A king of a mystical land likes to wear very tall shoes.
	// The tall shoes are sometimes an inconvenience as they make traveling through the kingdom's road network difficult.
	// 
	// 
	// 
	// There are N cities in the kingdom.
	// The cities are numbered 0 through N-1.
	// The road network in the kingdom is connected: it is possible to get from any city to any other city by taking one or more roads.
	// Each road in the network is bidirectional and connects two different cities.
	// You are given the description of the road network in three int[]s: X, Y, and height, each with the same number of elements.
	// For each valid i, there is a road that connects cities X[i] and Y[i].
	// The value height[i] is the height limit for that road:
	// The king can travel along that road if and only if the height of his shoes is height[i] or less.
	// 
	// 
	// 
	// The king wants to walk from city 0 to city N-1.
	// While doing so, he wants to wear shoes that are as tall as possible.
	// Before he goes for the walk, he can increase the height limits for some roads.
	// The king has a budget of B dollars for the modifications.
	// Increasing the height limit of any road by k costs k^2 dollars.
	// The height limit of each road can only be increased at most once.
	// 
	// 
	// 
	// You are given the int N, the int[]s X, Y and height, and the long B.
	// Compute the maximum height of shoes the king may wear for his walk from city 0 to city N-1 after increasing the height limits appropriately.
	// 
	// 
	// DEFINITION
	// Class:TallShoes
	// Method:maxHeight
	// Parameters:int, int[], int[], int[], long
	// Returns:int
	// Method signature:int maxHeight(int N, int[] X, int[] Y, int[] height, long B)
	// 
	// 
	// CONSTRAINTS
	// -N will be between 2 and 50, inclusive.
	// -from, to, height will have between N-1 and N*(N-1)/2 elements, inclusive.
	// -Each element of X, Y will be between 0 and N-1, inclusive.
	// -For all i, X[i] != Y[i].
	// -Each undirected edge X[i], Y[i] will appear at most once.
	// -Each element of height will be between 0 and 10^6, inclusive. 
	// -The graph described by X and Y will be connected. 
	// -B will be between 0 and 10^15, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 3
	// {0, 1, 0}
	// {1, 2, 2}
	// {3, 4, 2}
	// 1
	// 
	// Returns: 4
	// 
	// 
	// In this example there are three roads: 0-1 (height limit 3), 1-2 (height limit 4), and 0-2 (height limit 2).
	// The king has a budget of 1 dollar.
	// The optimal way to use that budget is to increase the height limit for the 0-1 road from 3 to 4.
	// After that change, the king can use shoes of height 4 and walk along the path 0-1-2.
	// 
	// 
	// 1)
	// 3
	// {0, 1, 0}
	// {1, 2, 2}
	// {3, 4, 2}
	// 52
	// 
	// Returns: 9
	// 
	// Here we can increase the last road's height by 7 which will allow the king to wear shoes of height 9. Note that the king is not required to spend the entire budget.
	// 
	// 2)
	// 8
	// {0, 0, 3, 3, 4, 4, 4, 7, 7}
	// {1, 2, 1, 2, 3, 5, 6, 5, 6}
	// {1000, 1000, 1000, 1000, 1, 1000, 1000, 1000, 1000}
	// 3
	// 
	// Returns: 2
	// 
	// 
	// 
	// 3)
	// 10
	// {0,1,2,3,4,5,6,7,8}
	// {1,2,3,4,5,6,7,8,9}
	// {0,0,0,0,0,0,0,0,0}
	// 9876543210123
	// 
	// Returns: 1047565
	// 
	// 
	// 
	// 4)
	// 6
	// {0,0,0,0,0,1,1,1,1,2,2,2,3,3,4}
	// {1,2,3,4,5,2,3,4,5,3,4,5,4,5,5}
	// {999999,986588,976757,988569,977678,999999,967675,947856,955856,999999,975956,956687,999999,979687,999999}
	// 0
	// 
	// Returns: 999999
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
