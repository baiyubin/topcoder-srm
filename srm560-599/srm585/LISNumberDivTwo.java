import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class LISNumberDivTwo {
    /**
     * 585
     * @param seq
     * @return
     */
    public int calculate(int[] seq) {
        int ret = 1;
        for (int i = 1; i < seq.length; i++) {
            if (seq[i] <= seq[i - 1]) ret++;
        }
        return ret;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}");
        System.out.println("]");
        LISNumberDivTwo obj;
        int answer;
        obj = new LISNumberDivTwo();
        long startTime = System.currentTimeMillis();
        answer = obj.calculate(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p1);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p1;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int p1;

        // ----- test 0 -----
        p0 = new int[] {1,4,4,2,6,3};
        p1 = 4;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] {5,8,9,12,16,32,50};
        p1 = 1;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] {1,1,9,9,2,2,3,3};
        p1 = 6;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] {50,40,30,20,10};
        p1 = 5;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new int[] {42};
        p1 = 1;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // Let A be a sequence of integers. We want to create this sequence as a concatenation of some (one or more) strictly increasing sequences. The LISNumber of A is the smallest number of strictly increasing sequences we need.
    //
    // For example, the LISNumber of the sequence A = {1, 4, 4, 2, 6, 3} is 4, since A can be created as {1, 4} + {4} + {2, 6} + {3}, and there is no way to create A by concatenating 3 (or fewer) strictly increasing sequences.
    //
    // Another example: The LISNumber of the sequence B = {10, 20, 30} is 1, since B is already a strictly increasing sequence.
    //
    // Note that the optimal way of writing a sequence as a concatenation of some strictly increasing sequences is always unique.
    //
    // You are given a int[] seq. Return the LISNumber of the sequence seq.
    //
    // DEFINITION
    // Class:LISNumberDivTwo
    // Method:calculate
    // Parameters:int[]
    // Returns:int
    // Method signature:int calculate(int[] seq)
    //
    //
    // CONSTRAINTS
    // -seq will contain between 1 and 50 elements, inclusive.
    // -Each element of seq will be between 1 and 50, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {1, 4, 4, 2, 6, 3}
    //
    // Returns: 4
    //
    // This is the example from the problem statement.
    //
    // 1)
    // {5, 8, 9, 12, 16, 32, 50}
    //
    // Returns: 1
    //
    // In this case, seq itself is already strictly increasing. Thus, the LISNumber of this sequence is 1.
    //
    // 2)
    // {1, 1, 9, 9, 2, 2, 3, 3}
    //
    // Returns: 6
    //
    // {1, 1, 9, 9, 2, 2, 3, 3} = {1} + {1, 9} + {9} + {2} + {2, 3} + {3}
    //
    // 3)
    // {50, 40, 30, 20, 10}
    //
    // Returns: 5
    //
    //
    //
    // 4)
    // {42}
    //
    // Returns: 1
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
