import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class FallingSand {
    public String[] simulate(String[] board) {
        int n = board.length;
        int m = board[0].length();
        char[][] b = new char[n][m];
        for (int i = 0; i < n; ++i) {
            b[i] = board[i].toCharArray();
        }
        for (int j = 0; j < m; ++j) {
            int low = n - 2, high = n - 1;
            while (low >= 0 && low < high) {
                if (b[high][j] == 'x' || b[high][j] == 'o') {
                    high--;
                    low = Math.min(low, high - 1);
                } else if (b[low][j] == 'x') {
                    high = low - 1;
                    low = low - 2;
                } else if (b[high][j] == '.' && b[low][j] == 'o') {
                    char s = b[high][j];
                    b[high][j] = b[low][j];
                    b[low][j] = s;
                    low--;
                } else {
                    low--;
                }
            }
        }
        String[] result = new String[n];
        for (int i = 0; i < n; ++i) {
            result[i] = new String(b[i]);
        }
        return result;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, String[] p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}");
        System.out.println("]");
        FallingSand obj;
        String[] answer;
        obj = new FallingSand();
        long startTime = System.currentTimeMillis();
        answer = obj.simulate(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.print("\t" + "{");
            for (int i = 0; p1.length > i; ++i) {
                if (i > 0) {
                    System.out.print(",");
                }
                System.out.print("\"" + p1[i] + "\"");
            }
            System.out.println("}");
        }
        System.out.println("Your answer:");
        System.out.print("\t" + "{");
        for (int i = 0; answer.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + answer[i] + "\"");
        }
        System.out.println("}");
        if (hasAnswer) {
            if (answer.length != p1.length) {
                res = false;
            } else {
                for (int i = 0; answer.length > i; ++i) {
                    if (!answer[i].equals(p1[i])) {
                        res = false;
                    }
                }
            }
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String[] p0;
        String[] p1;

        // ----- test 0 -----
        p0 = new String[] {"ooooo", "..x..", "....x", ".....", "....o"};
        p1 = new String[] {"..o..", "..x.o", "....x", ".....", "oo.oo"};
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new String[] {"..o..", "..x.o", "....x", ".....", "oo.oo"};
        p1 = new String[] {"..o..", "..x.o", "....x", ".....", "oo.oo"};
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new String[] {"ooooxooo.ooxo.oxoxoooox.....x.oo"};
        p1 = new String[] {"ooooxooo.ooxo.oxoxoooox.....x.oo"};
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new String[] {"o", ".", "o", ".", "o", ".", "."};
        p1 = new String[] {".", ".", ".", ".", "o", "o", "o"};
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new String[] {"oxxxxooo", "xooooxxx", "..xx.ooo", "oooox.o.", "..x....."};
        p1 = new String[] {"oxxxxooo", "x.oo.xxx", "..xxo...", ".oo.x.o.", "ooxo.ooo"};
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = new String[] {"..o..o..o..o..o..o..o..o..o..o..o", "o..o..o..o..o..o..o..o..o..o..o..", ".o..o..o..o..o..o..o..o..o..o..o.", "...xxx...xxx...xxxxxxxxx...xxx...", "...xxx...xxx...xxxxxxxxx...xxx...", "...xxx...xxx......xxx......xxx...", "...xxxxxxxxx......xxx......xxx...", "...xxxxxxxxx......xxx......xxx...", "...xxxxxxxxx......xxx......xxx...", "...xxx...xxx......xxx............", "...xxx...xxx...xxxxxxxxx...xxx...", "...xxx...xxx...xxxxxxxxx...xxx...", "..o..o..o..o..o..o..o..o..o..o..o", "o..o..o..o..o..o..o..o..o..o..o..", ".o..o..o..o..o..o..o..o..o..o..o."};
        p1 = new String[] {".................................", ".................................", "...ooo...ooo...ooooooooo...ooo...", "...xxx...xxx...xxxxxxxxx...xxx...", "...xxx...xxx...xxxxxxxxx...xxx...", "...xxxoooxxx......xxx......xxx...", "...xxxxxxxxx......xxx......xxx...", "...xxxxxxxxx......xxx......xxx...", "...xxxxxxxxx......xxx......xxx...", "...xxx...xxx......xxx............", "...xxx...xxx...xxxxxxxxx...xxx...", "...xxx...xxx...xxxxxxxxx...xxx...", ".................................", "ooo.........ooo.........ooo...ooo", "ooooooooooooooooooooooooooooooooo"};
        all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    //
    // You have a rectangular board that is placed vertically.
    // The board is divided into a grid of unit square cells.
    // Some grid cells contain obstacles and some cells contain a grain of sand.
    // All other cells are currently empty.
    //
    //
    //
    // You are given the description of the board as a String[] board.
    // The elements of board correspond to rows of the grid in the order from top to bottom.
    // (E.g., board[0] represents the topmost row of cells.)
    // Each character in each element of board represents one cell.
    // The character 'x' represents a cell with an obstacle, 'o' is a grain of sand, and '.' (period) is an empty cell.
    //
    //
    //
    // You would like to implement a simulation of falling sand.
    // The rules are as follows:
    //
    // The obstacles don't move.
    // Whenever there is an empty cell immediately below a grain of sand, the grain of sand moves into the empty cell.
    //
    //
    //
    //
    // Return the final configuration of the board after all grains of sand reach their final locations.
    //
    //
    // DEFINITION
    // Class:FallingSand
    // Method:simulate
    // Parameters:String[]
    // Returns:String[]
    // Method signature:String[] simulate(String[] board)
    //
    //
    // CONSTRAINTS
    // -board will contain between 1 and 50 elements, inclusive.
    // -Each element of board will have length between 1 and 50, inclusive.
    // -All elements of board will have the same length.
    // -Each character in each element of board will be one of 'x', 'o', and '.'.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {"ooooo",
    //  "..x..",
    //  "....x",
    //  ".....",
    //  "....o"}
    //
    // Returns: {"..o..", "..x.o", "....x", ".....", "oo.oo" }
    //
    //
    // The return value is:
    //
    //
    //
    // {"..o..",
    //  "..x.o",
    //  "....x",
    //  ".....",
    //  "oo.oo" }
    //
    //
    // 1)
    // {"..o..",
    //  "..x.o",
    //  "....x",
    //  ".....",
    //  "oo.oo" }
    //
    // Returns: {"..o..", "..x.o", "....x", ".....", "oo.oo" }
    //
    //
    //
    // 2)
    // {"ooooxooo.ooxo.oxoxoooox.....x.oo"}
    //
    // Returns: {"ooooxooo.ooxo.oxoxoooox.....x.oo" }
    //
    // Nothing changes in this case, since all the sand is already at the bottom of the grid.
    //
    // 3)
    // {"o",
    //  ".",
    //  "o",
    //  ".",
    //  "o",
    //  ".",
    //  "."}
    //
    // Returns: {".", ".", ".", ".", "o", "o", "o" }
    //
    //
    //
    // 4)
    // {"oxxxxooo",
    //  "xooooxxx",
    //  "..xx.ooo",
    //  "oooox.o.",
    //  "..x....."}
    //
    // Returns: {"oxxxxooo", "x.oo.xxx", "..xxo...", ".oo.x.o.", "ooxo.ooo" }
    //
    //
    // Note the final configuration of sand in the second column from the right.
    //
    //
    //
    // {"oxxxxooo",
    //  "x.oo.xxx",
    //  "..xxo...",
    //  ".oo.x.o.",
    //  "ooxo.ooo"}
    //
    //
    // 5)
    // {"..o..o..o..o..o..o..o..o..o..o..o",
    //  "o..o..o..o..o..o..o..o..o..o..o..",
    //  ".o..o..o..o..o..o..o..o..o..o..o.",
    //  "...xxx...xxx...xxxxxxxxx...xxx...",
    //  "...xxx...xxx...xxxxxxxxx...xxx...",
    //  "...xxx...xxx......xxx......xxx...",
    //  "...xxxxxxxxx......xxx......xxx...",
    //  "...xxxxxxxxx......xxx......xxx...",
    //  "...xxxxxxxxx......xxx......xxx...",
    //  "...xxx...xxx......xxx............",
    //  "...xxx...xxx...xxxxxxxxx...xxx...",
    //  "...xxx...xxx...xxxxxxxxx...xxx...",
    //  "..o..o..o..o..o..o..o..o..o..o..o",
    //  "o..o..o..o..o..o..o..o..o..o..o..",
    //  ".o..o..o..o..o..o..o..o..o..o..o."}
    //
    // Returns: {".................................", ".................................", "...ooo...ooo...ooooooooo...ooo...", "...xxx...xxx...xxxxxxxxx...xxx...", "...xxx...xxx...xxxxxxxxx...xxx...", "...xxxoooxxx......xxx......xxx...", "...xxxxxxxxx......xxx......xxx...", "...xxxxxxxxx......xxx......xxx...", "...xxxxxxxxx......xxx......xxx...", "...xxx...xxx......xxx............", "...xxx...xxx...xxxxxxxxx...xxx...", "...xxx...xxx...xxxxxxxxx...xxx...", ".................................", "ooo.........ooo.........ooo...ooo", "ooooooooooooooooooooooooooooooooo" }
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
