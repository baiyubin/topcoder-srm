import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TheDeviceDiv2 {
    public String identify(String[] plates) {
        int n = plates.length;
        int m = plates[0].length();
        if (n <= 2) return "NO";

        for (int j = 0; j < m; j++) {
            int tot = 0;
            for (int i = 0; i < n; i++) {
                tot += (plates[i].charAt(j) - '0');
            }
            if (tot == n || tot < 2) return "NO";
        }
        return "YES";
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, String p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}");
        System.out.println("]");
        TheDeviceDiv2 obj;
        String answer;
        obj = new TheDeviceDiv2();
        long startTime = System.currentTimeMillis();
        answer = obj.identify(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + "\"" + p1 + "\"");
        }
        System.out.println("Your answer:");
        System.out.println("\t" + "\"" + answer + "\"");
        if (hasAnswer) {
            res = answer.equals(p1);
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String[] p0;
        String p1;

        // ----- test 0 -----
        p0 = new String[] {"010","011","000"};
        p1 = "NO";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new String[] {"1","0","1","0"};
        p1 = "YES";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new String[] {"11111"};
        p1 = "NO";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new String[] {"0110011","0101001","1111010","1010010"};
        p1 = "NO";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new String[] {"101001011","011011010","010110010","111010100","111111111"};
        p1 = "YES";
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // Manao works at a laboratory on a highly classified project. From time to time, he is given a special device and has to determine its exact structure. Every such device operates on special plates. There are M bits written on each of the plates from left to right. The device has two inputs and a screen. Each input requires a plate. When two plates are connected to the device, M bits of output appear on the screen. Each bit of output is either a binary OR, AND or XOR of the corresponding bits of the input plates. Manao's task is to determine what operation is carried out for each of the bits.
    //
    // Manao has N plates. He is going to test the device on each possible pair of these plates and determine its structure by the outputs on the screen. It might be that the plates Manao has are not enough to uniquely identify every possible device. You are given String[] plates, where each element describes a plate Manao has. If these plates are certainly sufficient to determine the structure of the device completely, return "YES". Otherwise, return "NO".
    //
    // DEFINITION
    // Class:TheDeviceDiv2
    // Method:identify
    // Parameters:String[]
    // Returns:String
    // Method signature:String identify(String[] plates)
    //
    //
    // CONSTRAINTS
    // -plates will contain between 1 and 50 elements, inclusive.
    // -Each element of plates will be between 1 and 50 characters long, inclusive.
    // -All elements of plates will be of equal length.
    // -Each element of plates will contain characters from the set {'0', '1'} only.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {"010",
    //  "011",
    //  "000"}
    //
    // Returns: "NO"
    //
    // With these plates we cannot determine anything about the operation done on the first bit, because all of them give the same result. Also, we cannot be sure that we can determine the operation done on the third bit: if it is the AND operation, we can find this out (for example by using the first two plates), but we cannot distinguish between OR and XOR using the given plates.
    //
    //
    // 1)
    // {"1",
    //  "0",
    //  "1",
    //  "0"}
    //
    // Returns: "YES"
    //
    // Manao will see the result for every possible combination of bits, which is enough to distinguish between AND, OR and XOR.
    //
    // 2)
    // {"11111"}
    //
    //
    // Returns: "NO"
    //
    // A single plate is not enough for even one test.
    //
    // 3)
    // {"0110011",
    //  "0101001",
    //  "1111010",
    //  "1010010"}
    //
    // Returns: "NO"
    //
    // The operation done on the fifth bit from the left (1-based index) cannot be determined.
    //
    // 4)
    // {"101001011",
    //  "011011010",
    //  "010110010",
    //  "111010100",
    //  "111111111"}
    //
    // Returns: "YES"
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
