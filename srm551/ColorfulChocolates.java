import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ColorfulChocolates
{
    public static int INF = (int) 1e9;
	public int maximumSpread(String chocolates, int maxSwaps)
	{
		int n = chocolates.length();
        int[] count = new int[300];
        for (int i = 0; i < n; i++) {
            count[chocolates.charAt(i)]++;
        }
        int[] retSwap = new int[2550];
        Arrays.fill(retSwap, INF);
        for (int i = 'A'; i <= 'Z'; i++) {
            if (count[i] > 0) {
                ArrayList<Integer> pos = new ArrayList<Integer>();
                // find all pos of the same char
                for (int j = 0; j < n; j++) {
                    if (chocolates.charAt(j) == i) {
                        pos.add(j);
                    }
                }

                // enum all center pos, construct solution
                for (int j = 0; j < pos.size(); j++) {
                    int swaps = 0;
                    int left = j - 1;
                    int right = j + 1;
                    while (left >= 0 || right < n) {
                        int leftCost = INF, rightCost = INF;
                        if (left >= 0) {
                            leftCost = pos.get(j) - pos.get(left) - (j - left);
                        }
                        if (right < pos.size()) {
                            rightCost = pos.get(right) - pos.get(j) - (right - j);
                        }
                        int cost;
                        if (leftCost != INF || rightCost != INF) {
                            if (leftCost < rightCost) {
                                cost = leftCost;
                                left--;
                            } else {
                                cost = rightCost;
                                right++;
                            }
                            swaps += cost;
                            if (swaps <= maxSwaps) {
                                int len = right - left - 1;
                                retSwap[len] = Math.min(retSwap[swaps], swaps);
                            }
                        } else {
                            break;
                        }
                    }

                }

            }
        }
        int ret = 1;
        for (int i = retSwap.length - 1; i >= 0; i--) {
            if (retSwap[i] != INF) {
                ret = i;
                break;
            }
        }
        return ret;
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + p1);
		System.out.println("]");
		ColorfulChocolates obj;
		int answer;
		obj = new ColorfulChocolates();
		long startTime = System.currentTimeMillis();
		answer = obj.maximumSpread(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		int p1;
		int p2;
		
		// ----- test 1 -----
		p0 = "ABCDCBC";
		p1 = 2;
		p2 = 3;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------

        // ----- test 0 -----
        p0 = "ABCDCBC";
        p1 = 1;
        p2 = 2;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
		p0 = "ABBABABBA";
		p1 = 3;
		p2 = 4;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "ABBABABBA";
		p1 = 4;
		p2 = 5;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "QASOKZNHWNFODOQNHGQKGLIHTPJUVGKLHFZTGPDCEKSJYIWFOO";
		p1 = 77;
		p2 = 5;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Beaver Bindu has some chocolates arranged in a row.
	// The wrapping of each chocolate has a single color.
	// Multiple chocolates can share the same color.
	// In this problem, each of the possible colors is represented by an uppercase letter.
	// You are given a String chocolates.
	// For each i, the i-th chocolate (0-based index) in the row has the color chocolates[i].
	// 
	// 
	// The spread of a row of chocolates is the maximum number of adjacent chocolates that all share the same color.
	// Formally, the spread can be defined as the maximum value of (j-i+1), where i <= j and all the chocolates in the positions between i and j, inclusive, have the same color.
	// 
	// 
	// You are also given an int maxSwaps.
	// Bindu can swap any two adjacent chocolates.
	// She has decided to make at most maxSwaps such swaps.
	// 
	// 
	// Return the maximum spread she can obtain.
	// 
	// 
	// DEFINITION
	// Class:ColorfulChocolates
	// Method:maximumSpread
	// Parameters:String, int
	// Returns:int
	// Method signature:int maximumSpread(String chocolates, int maxSwaps)
	// 
	// 
	// CONSTRAINTS
	// -chocolates will contain between 1 and 50 characters, inclusive.
	// -Each character in chocolates will be an uppercase letter ('A'-'Z').
	// -maxSwaps will be between 1 and 2500, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "ABCDCBC"
	// 1
	// 
	// Returns: 2
	// 
	// One optimal solution is to swap chocolates at positions 2 and 3, obtaining the row "ABDCCBC", which has spread 2.
	// 
	// 
	// 1)
	// "ABCDCBC"
	// 2
	// 
	// Returns: 3
	// 
	// The only optimal solution is to produce the row "ABDCCCB".
	// 
	// 
	// 2)
	// "ABBABABBA"
	// 3
	// 
	// Returns: 4
	// 
	// The row "ABBBBAABA" can be produced with 3 swaps.
	// 
	// 3)
	// "ABBABABBA"
	// 4
	// 
	// Returns: 5
	// 
	// An optimal solution is to produce the row "AABBBBBAA".
	// 
	// 4)
	// "QASOKZNHWNFODOQNHGQKGLIHTPJUVGKLHFZTGPDCEKSJYIWFOO"
	// 77
	// 
	// Returns: 5
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
