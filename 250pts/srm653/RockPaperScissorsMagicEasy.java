import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class RockPaperScissorsMagicEasy {
	int[][] comb = new int[3000][3000];
	static int MOD = 1000000007;
	public int count(int[] card, int score) {
		for (int[] arr : comb) {
			Arrays.fill(arr, -1);
		}
		comb[0][0] = 1;
		int n = card.length;
		if (score > n) return 0;
		int m = n - score;
		long result = 1;
		for (int i = 0; i < m; i++) {
			result <<= 1;
			result %= MOD;
		}
		return (int) (result * comb(n, score) % MOD);
	}
	public int comb(int n, int k) {
		if (comb[n][k] != -1) return comb[n][k];
		if (n == 0) return comb[n][k] = 0;
		if (k == 0) return comb[n][k] = 1;
		return comb[n][k] = (comb(n - 1, k) % MOD + comb(n - 1, k - 1) % MOD);
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + p1);
		System.out.println("]");
		RockPaperScissorsMagicEasy obj;
		int answer;
		obj = new RockPaperScissorsMagicEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int[] p0;
		int p1;
		int p2;

		// ----- test 0 -----
		p0 = new int[] {0, 1, 2};
		p1 = 2;
		p2 = 6;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new int[] {1, 2};
		p1 = 0;
		p2 = 4;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new int[] {2, 2, 1, 0, 0};
		p1 = 10;
		p2 = 0;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new int[] {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2};
		p1 = 7;
		p2 = 286226628;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = new int[] {0, 1, 2, 0, 1, 2, 2, 1, 0};
		p1 = 8;
		p2 = 18;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	//
	// Alice and Bob are going to play a variant of the traditional rock-paper-scissors game.
	// Their game is played using cards.
	// Each card shows one of the three pictures: a rock, a paper, or scissors.
	// There is a sufficient supply of cards of each type.
	// Bob has already chosen a sequence of cards and he has arranged them into a row, face down.
	// It is now Alice's turn to do the same.
	// Once she does that, they will use the two sequences of cards to play the game:
	// For each i, Alice's i-th card and Bob's i-th card will be revealed and compared using the standard rules of rock-paper-scissors.
	// Whenever Alice's card wins, Alice gets a point.
	// Alice gets no points for a loss or a tie.
	//
	//
	//
	// Alice has marked Bob's cards, so now she can tell which card has which symbol on it.
	// You are given this information as a int[] card.
	// Each element of card is between 0 and 2, inclusive: 0 is a rock, 1 is a paper, and 2 are scissors.
	//
	//
	//
	// You are also given an int score.
	// Alice has just announced that she will get a total of score points.
	//
	//
	//
	// Let X be the number of sequences in which Alice can play her cards if she wants to achieve exactly score points.
	// Return the value (X modulo 1,000,000,007).
	//
	//
	// DEFINITION
	// Class:RockPaperScissorsMagicEasy
	// Method:count
	// Parameters:int[], int
	// Returns:int
	// Method signature:int count(int[] card, int score)
	//
	//
	// CONSTRAINTS
	// -The number of elements in card will be between 1 and 2,000, inclusive.
	// -All elements of card will be between 0 and 2, inclusive.
	// -score will be between 0 and 2,000, inclusive.
	//
	//
	// EXAMPLES
	//
	// 0)
	// {0,1,2}
	// 2
	//
	// Returns: 6
	//
	//
	// Bob has played his cards in the order rock-paper-scissors.
	// Alice wants to score 2 points.
	// Hence, she must win twice, and lose to Bob or tie him once.
	//
	//
	//
	// One possible way in which she can play her cards is paper-scissors-scissors:
	// her paper beats Bob's rock (1 point), scissors beat paper (1 point), and scissors tie with scissors (0 points).
	//
	//
	//
	// There are five other ways how Alice can score 2 points: paper-scissors-paper, paper-paper-rock, paper-rock-rock, rock-scissors-rock, and scissors-scissors-rock.
	//
	//
	// 1)
	// {1,2}
	// 0
	//
	// Returns: 4
	//
	//
	//
	// 2)
	// {2,2,1,0,0}
	// 10
	//
	// Returns: 0
	//
	//
	//
	// 3)
	// {0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}
	// 7
	//
	// Returns: 286226628
	//
	//
	//
	// 4)
	// {0,1,2,0,1,2,2,1,0}
	// 8
	//
	// Returns: 18
	//
	//
	//
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
