import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TheArithmeticProgression {
    public double minimumChange(int a, int b, int c) {
        double s = (a + c) / 2.0;
        return Math.abs(s - b);
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, boolean hasAnswer, double p3) {
        System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
        System.out.println("]");
        TheArithmeticProgression obj;
        double answer;
        obj = new TheArithmeticProgression();
        long startTime = System.currentTimeMillis();
        answer = obj.minimumChange(p0, p1, p2);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p3);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == answer && Math.abs(p3 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p3));
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int p0;
        int p1;
        int p2;
        double p3;

        // ----- test 0 -----
        p0 = 0;
        p1 = 1;
        p2 = 2;
        p3 = 0.0D;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 0;
        p1 = 2;
        p2 = 1;
        p3 = 1.5D;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 3;
        p1 = 2;
        p2 = 1;
        p3 = 0.0D;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = 4;
        p1 = 4;
        p2 = 8;
        p3 = 2.0D;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // A triple (x, y, z) is called an arithmetic progression if the equality y - x = z - y holds.
    //
    // You are given three ints a, b and c. Your goal is to change the triple (a, b, c) into an arithmetic progression.
    // You are only allowed to change one of the three numbers.
    // The change must proceed as follows:
    // First, you choose a non-negative real (not necessarily integer) number r.
    // Then, you either add r to one of the three given numbers, or you subtract r from one of them. Return the minimum value of r which allows you to create an arithmetic progression.
    //
    // DEFINITION
    // Class:TheArithmeticProgression
    // Method:minimumChange
    // Parameters:int, int, int
    // Returns:double
    // Method signature:double minimumChange(int a, int b, int c)
    //
    //
    // CONSTRAINTS
    // -a will be between 0 and 1000, inclusive.
    // -b will be between 0 and 1000, inclusive.
    // -c will be between 0 and 1000, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // 0
    // 1
    // 2
    //
    // Returns: 0.0
    //
    // The triple (0, 1, 2) is an arithmetic progression. Thus, you can choose r = 0.0 and add or subtract it from any of the given numbers without changing the triple.
    //
    // 1)
    // 0
    // 2
    // 1
    //
    // Returns: 1.5
    //
    // Note that while (0, 1, 2) is an arithmetic progression, you cannot rearrange the numbers within the triple. You can choose r = 1.5 and subtract it from b, obtaining the triple (0, 0.5, 1).
    //
    // 2)
    // 3
    // 2
    // 1
    //
    // Returns: 0.0
    //
    //
    //
    // 3)
    // 4
    // 4
    // 8
    //
    // Returns: 2.0
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
