import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class SkiResortsEasy {
    public int minCost(int[] altitude) {
        int ret = 0;
        for (int i = 1; i < altitude.length; i++) {
            if (altitude[i] > altitude[i - 1]) {
                ret += altitude[i] - altitude[i - 1];
                altitude[i] = altitude[i - 1];
            }
        }
        return ret;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}");
        System.out.println("]");
        SkiResortsEasy obj;
        int answer;
        obj = new SkiResortsEasy();
        long startTime = System.currentTimeMillis();
        answer = obj.minCost(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p1);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p1;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int p1;

        // ----- test 0 -----
        p0 = new int[] {30,20,20,10};
        p1 = 0;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] {5,7,3};
        p1 = 2;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] {6,8,5,4,7,4,2,3,1};
        p1 = 6;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] {749,560,921,166,757,818,228,584,366,88};
        p1 = 2284;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new int[] {712,745,230,200,648,440,115,913,627,621,186,222,741,954,581,193,266,320,798,745};
        p1 = 6393;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // Fox Ciel is the owner of a ski resort. The ski resort has N places numbered 0 through N-1. You are given a int[] altitude. For each i, the i-th element of altitude is the altitude of the place i.
    //
    //
    // The skiers would like to follow the path (place 0) -> (place 1) -> ... -> (place N-1). The trip will only be possible if the altitudes of the places are non-increasing. In order to make the trip possible, Ciel now needs to decrease the altitudes of some places. In other words, Ciel wants to decrease some of the altitudes so that altitude[0] >= altitude[1] >= ... >= altitude[N-1] holds. It costs 1 unit of money to decrease the altitude of one place by 1 unit of height.
    //
    //
    // Return the minimal cost required for the change.
    //
    // DEFINITION
    // Class:SkiResortsEasy
    // Method:minCost
    // Parameters:int[]
    // Returns:int
    // Method signature:int minCost(int[] altitude)
    //
    //
    // CONSTRAINTS
    // -altitude will contain between 2 and 50 elements, inclusive.
    // -Each element of altitude will be between 0 and 1,000, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {30, 20, 20, 10}
    //
    // Returns: 0
    //
    // The altitudes are already non-increasing, so Ciel doesn't need to change anything.
    //
    // 1)
    // {5, 7, 3}
    //
    // Returns: 2
    //
    // Ciel should change the altitude of place 1 (0-based index) from 7 to 5.
    // This changes the sequence of altitudes to {5, 5, 3}.
    // The cost of the change is 7 - 5 = 2 units of money.
    //
    // 2)
    // {6, 8, 5, 4, 7, 4, 2, 3, 1}
    //
    // Returns: 6
    //
    // Ciel should change the altitudes to {6, 6, 5, 4, 4, 4, 2, 2, 1}.
    //
    // 3)
    // {749, 560, 921, 166, 757, 818, 228, 584, 366, 88}
    //
    // Returns: 2284
    //
    //
    //
    // 4)
    // {712, 745, 230, 200, 648, 440, 115, 913, 627, 621, 186, 222, 741, 954, 581, 193, 266, 320, 798, 745}
    //
    // Returns: 6393
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
