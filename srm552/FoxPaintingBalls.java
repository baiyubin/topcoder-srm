import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class FoxPaintingBalls {
    public long theMax(long R, long G, long B, int N) {
        if (N == 1) return R + G + B;
        long total = (1 + N) * N / 2;
        long each = total / 3;
        long[] balls = new long[] {R, G, B};
        Arrays.sort(balls);
        if (total % 3 == 0) {
            return balls[0] / each;
        } else {
            long m = (R + G + B) / total;
            return Math.min(m, balls[0] / each);
        }
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, long p0, long p1, long p2, int p3, boolean hasAnswer, long p4) {
        System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3);
        System.out.println("]");
        FoxPaintingBalls obj;
        long answer;
        obj = new FoxPaintingBalls();
        long startTime = System.currentTimeMillis();
        answer = obj.theMax(p0, p1, p2, p3);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p4);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p4;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        long p0;
        long p1;
        long p2;
        int p3;
        long p4;

        // ----- test 0 -----
        p0 = 2L;
        p1 = 2L;
        p2 = 2L;
        p3 = 3;
        p4 = 1L;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 1L;
        p1 = 2L;
        p2 = 3L;
        p3 = 3;
        p4 = 0L;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 8L;
        p1 = 6L;
        p2 = 6L;
        p3 = 4;
        p4 = 2L;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = 7L;
        p1 = 6L;
        p2 = 7L;
        p3 = 4;
        p4 = 2L;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = 100L;
        p1 = 100L;
        p2 = 100L;
        p3 = 4;
        p4 = 30L;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = 19330428391852493L;
        p1 = 48815737582834113L;
        p2 = 11451481019198930L;
        p3 = 3456;
        p4 = 5750952686L;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 6 -----
        p0 = 1L;
        p1 = 1L;
        p2 = 1L;
        p3 = 1;
        p4 = 3L;
        all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // A Ball Triangle is a set of identical balls placed in a triangular shape. A Ball Triangle has N rows, numbered 1 to N from top to bottom. For all i, 1 <= i <= N, the i-th row contains i balls. For example, the following image shows a Ball Triangle with N=3.
    //
    //
    //
    //
    // Fox Jiro has infinitely many Ball Triangles. He can paint a Ball Triangle according to the following conditions:
    //
    // Each of the balls has to be painted either red, green, or blue.
    // No two adjacent balls may share the same color.
    //
    // The following image shows one valid coloring of a Ball Triangle for N=3.
    //
    //
    //
    //
    // Jiro wants to paint as many Ball Triangles as he can.
    // As long as he follows the rules above, he may color the Ball Triangles in any way he likes.
    // Some of the colored Ball Triangles may look exactly the same, but they don't have to.
    // The only other constraint is the total amount of paint available to Jiro:
    // In all the triangles together, he can paint at most R balls red, G balls green, and B balls blue.
    //
    // You are given the longs R, G, and B.
    // You are also given the int N.
    // Return the maximum possible number of Ball Triangles Jiro can paint.
    //
    // DEFINITION
    // Class:FoxPaintingBalls
    // Method:theMax
    // Parameters:long, long, long, int
    // Returns:long
    // Method signature:long theMax(long R, long G, long B, int N)
    //
    //
    // CONSTRAINTS
    // -R, G and B will each be between 0 and 1,000,000,000,000,000,000 (10^18), inclusive.
    // -N will be between 1 and 1,000,000,000, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // 2
    // 2
    // 2
    // 3
    //
    // Returns: 1
    //
    // Jiro can paint one Ball Triangle in the same way as in the image in the statement.
    //
    // 1)
    // 1
    // 2
    // 3
    // 3
    //
    // Returns: 0
    //
    // This time Jiro can paint no Ball Triangles.
    //
    // 2)
    // 8
    // 6
    // 6
    // 4
    //
    // Returns: 2
    //
    //
    //
    // 3)
    // 7
    // 6
    // 7
    // 4
    //
    // Returns: 2
    //
    //
    //
    // 4)
    // 100
    // 100
    // 100
    // 4
    //
    // Returns: 30
    //
    //
    //
    // 5)
    // 19330428391852493
    // 48815737582834113
    // 11451481019198930
    // 3456
    //
    // Returns: 5750952686
    //
    //
    //
    // 6)
    // 1
    // 1
    // 1
    // 1
    //
    // Returns: 3
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
