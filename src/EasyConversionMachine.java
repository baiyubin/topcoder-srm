import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class EasyConversionMachine
{
	public String isItPossible(String originalWord, String finalWord, int k)
	{
		int diff = 0;
        for (int i = 0; i < originalWord.length(); i++) {
            if (originalWord.charAt(i) != finalWord.charAt(i)) {
                diff++;
            }
        }
        return (diff % 2 == k % 2 && diff <= k) ? "POSSIBLE" : "IMPOSSIBLE";
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, String p1, int p2, boolean hasAnswer, String p3) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + "\"" + p1 + "\"" + "," + p2);
		System.out.println("]");
		EasyConversionMachine obj;
		String answer;
		obj = new EasyConversionMachine();
		long startTime = System.currentTimeMillis();
		answer = obj.isItPossible(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p3 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p3);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		String p1;
		int p2;
		String p3;
		
		// ----- test 0 -----
		p0 = "aababba";
		p1 = "bbbbbbb";
		p2 = 2;
		p3 = "IMPOSSIBLE";
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "aabb";
		p1 = "aabb";
		p2 = 1;
		p3 = "IMPOSSIBLE";
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "aaaaabaa";
		p1 = "bbbbbabb";
		p2 = 8;
		p3 = "POSSIBLE";
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "aaa";
		p1 = "bab";
		p2 = 4;
		p3 = "POSSIBLE";
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "aababbabaa";
		p1 = "abbbbaabab";
		p2 = 9;
		p3 = "IMPOSSIBLE";
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// We have a String originalWord. Each character of originalWord is either 'a' or 'b'. Timmy claims that he can convert it to finalWord using exactly k moves. In each move, he can either change a single 'a' to a 'b', or change a single 'b' to an 'a'.
	// 
	// You are given the Strings originalWord and finalWord, and the int k. Determine whether Timmy may be telling the truth.
	// If there is a possible sequence of exactly k moves that will turn originalWord into finalWord, return "POSSIBLE" (quotes for clarity).
	// Otherwise, return "IMPOSSIBLE".
	// 
	// DEFINITION
	// Class:EasyConversionMachine
	// Method:isItPossible
	// Parameters:String, String, int
	// Returns:String
	// Method signature:String isItPossible(String originalWord, String finalWord, int k)
	// 
	// 
	// NOTES
	// -Timmy may change the same letter multiple times. Each time counts as a different move.
	// 
	// 
	// CONSTRAINTS
	// -originalWord will contain between 1 and 50 characters, inclusive.
	// -finalWord and originalWord will contain the same number of characters.
	// -Each character in originalWord and finalWord will be 'a' or 'b'.
	// -k will be between 1 and 100, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "aababba"
	// "bbbbbbb"
	// 2
	// 
	// Returns: "IMPOSSIBLE"
	// 
	// It is not possible to reach finalWord in fewer than 4 moves.
	// 
	// 1)
	// "aabb"
	// "aabb"
	// 1
	// 
	// Returns: "IMPOSSIBLE"
	// 
	// The number of moves must be exactly k=1.
	// 
	// 2)
	// "aaaaabaa"
	// "bbbbbabb"
	// 8
	// 
	// Returns: "POSSIBLE"
	// 
	// Use each move to change each of the letters once.
	// 
	// 3)
	// "aaa"
	// "bab"
	// 4
	// 
	// Returns: "POSSIBLE"
	// 
	// The following sequence of 4 moves does the job:
	// aaa -> baa -> bab -> aab -> bab
	// 
	// 4)
	// "aababbabaa"
	// "abbbbaabab"
	// 9
	// 
	// Returns: "IMPOSSIBLE"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
