import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;
// srm 653
public class SingingEasy {
	int[][] memo;
	int[] p;

	public int solve(int[] pitch) {
		this.p = pitch;
		int n = pitch.length;
		memo = new int[n + 1][n + 1];
		for (int[] arr : memo) {
			Arrays.fill(arr, -1);
		}
		return dp(1, 0);
	}

	public int dp(int a, int b) {

		if (a == p.length) return 0;
		if (memo[a][b] != -1) return memo[a][b];
		int v1 = dp(a + 1, b) + Math.abs(p[a - 1] - p[a]);
		int v2 = dp(a + 1, a) + (b == 0 ? 0 : Math.abs(p[b - 1] - p[a]));
		return memo[a][b] = Math.min(v1, v2);
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		SingingEasy obj;
		int answer;
		obj = new SingingEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.solve(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int[] p0;
		int p1;
		// ----- test 0 -----
		p0 = new int[] {1, 2};
		p1 = 0;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		// ----- test 0 -----
		p0 = new int[] {1, 3, 8, 12, 13};
		p1 = 7;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new int[] {1, 5, 6, 2, 1};
		p1 = 3;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new int[] {5, 5, 5, 5, 4, 4, 4, 4};
		p1 = 0;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new int[] {1000000};
		p1 = 0;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = new int[] {24, 13, 2, 4, 54, 23, 12, 53, 12, 23, 42, 13, 53, 12, 24, 12, 11, 24, 42, 52, 12, 32, 42};
		p1 = 188;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	//
	// Alice and Bob are going to sing a song together.
	// For simplicity, we will assign the numbers 1 through 1,000,000 to the pitches that occur in the song (from the lowest to the highest).
	// Both Alice and Bob are able to sing all of these pitches.
	// You are given a int[] pitch containing the pitches of all notes in the song, in order.
	// Each note of the song will be sung by exactly one of our singers.
	//
	//
	//
	// Changing the pitch of one's voice is exhausting.
	// Given a sequence of pitches to sing, the difficulty for the singer can be computed by summing up the differences between consecutive pitches.
	// For example, the difficulty of the sequence 8, 8, 13, 12 is abs(8-8) + abs(13-8) + abs(12-13) = 0+5+1 = 6.
	//
	//
	//
	// The total difficulty of singing the song can be computed as the difficulty for Alice plus the difficulty for Bob.
	// Return the smallest possible total difficulty of singing the given song.
	//
	//
	// DEFINITION
	// Class:SingingEasy
	// Method:solve
	// Parameters:int[]
	// Returns:int
	// Method signature:int solve(int[] pitch)
	//
	//
	// CONSTRAINTS
	// -The number of elements in pitches will be between 1 and 2,000, inclusive.
	// -all elements in pitch will be between 1 and 1,000,000, inclusive.
	//
	//
	// EXAMPLES
	//
	// 0)
	// {1,3,8,12,13}
	//
	// Returns: 7
	//
	// One optimal solution is to let Alice sing the first two notes and Bob the remaining three.
	// Then, Alice will sing the sequence of pitches {1,3} and Bob will sing {8,12,13}.
	// The difficulty for Alice is abs(3-1) = 2.
	// The difficulty for Bob is abs(12-8) + abs(13-12) = 5.
	// Thus, the total difficulty is 2+5 = 7.
	//
	// 1)
	// {1,5,6,2,1}
	//
	// Returns: 3
	//
	// One optimal solution is to let our singers sing in the order Alice-Bob-Bob-Alice-Alice.
	// In this case Alice sings the sequence of pitches {1,2,1} and Bob sings {5,6}.
	// Hence the difficulty for Alice is 2 and the difficulty for Bob is 1.
	//
	// 2)
	// {5,5,5,5,4,4,4,4}
	//
	// Returns: 0
	//
	//
	//
	// 3)
	// {1000000}
	//
	// Returns: 0
	//
	//
	//
	// 4)
	// {24,13,2,4,54,23,12,53,12,23,42,13,53,12,24,12,11,24,42,52,12,32,42}
	//
	// Returns: 188
	//
	//
	//
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
