import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class RandomColoringDiv2
{
	public int getCount(int maxR, int maxG, int maxB, int startR, int startG, int startB, int d1, int d2)
	{
		int ret = 0;
        for (int r = 0; r < maxR; r++) {
            for (int g = 0; g < maxG; g++) {
                for (int b = 0; b < maxB; b++) {
                    boolean inside = Math.abs(r - startR) <= d2
                            && Math.abs(g - startG) <= d2
                            && Math.abs(b - startB) <= d2;
                    boolean bigEnough = Math.abs(r - startR) >= d1
                            || Math.abs(g - startG) >= d1
                            || Math.abs(b - startB) >= d1;
                    if (inside && bigEnough) ret++;
                }
            }
        }
        return ret;
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, boolean hasAnswer, int p8) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3 + "," + p4 + "," + p5 + "," + p6 + "," + p7);
		System.out.println("]");
		RandomColoringDiv2 obj;
		int answer;
		obj = new RandomColoringDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.getCount(p0, p1, p2, p3, p4, p5, p6, p7);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p8);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p8;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		int p4;
		int p5;
		int p6;
		int p7;
		int p8;
		
		// ----- test 0 -----
		p0 = 5;
		p1 = 1;
		p2 = 1;
		p3 = 2;
		p4 = 0;
		p5 = 0;
		p6 = 0;
		p7 = 1;
		p8 = 3;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 4;
		p1 = 2;
		p2 = 2;
		p3 = 0;
		p4 = 0;
		p5 = 0;
		p6 = 3;
		p7 = 3;
		p8 = 4;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 4;
		p1 = 2;
		p2 = 2;
		p3 = 0;
		p4 = 0;
		p5 = 0;
		p6 = 5;
		p7 = 5;
		p8 = 0;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 6;
		p1 = 9;
		p2 = 10;
		p3 = 1;
		p4 = 2;
		p5 = 3;
		p6 = 0;
		p7 = 10;
		p8 = 540;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 6;
		p1 = 9;
		p2 = 10;
		p3 = 1;
		p4 = 2;
		p5 = 3;
		p6 = 4;
		p7 = 10;
		p8 = 330;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 49;
		p1 = 59;
		p2 = 53;
		p3 = 12;
		p4 = 23;
		p5 = 13;
		p6 = 11;
		p7 = 22;
		p8 = 47439;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Little Arthur has a new frisbee and he would like to color it. A frisbee has the shape of a disc. Arthur will color the disc using two colors: one for the top side, one for the bottom side.
	// 
	// Each color is defined by three integer components: R, G, and B (meaning red, green, and blue, respectively), where 0 <= R < maxR, 0 <= G < maxG, and 0 <= B < maxB. It is known that Arthur can use any of the maxR*maxG*maxB possible colors.
	// 
	// Arthur is going to perform the coloring in the following way:
	// 
	// In the first step, he will color the top side of the frisbee using the color (startR, startG, startB).
	// In the second step, he will color the bottom side of the frisbee using a color that makes a good transition from the first color. (This is explained below.)
	// 
	// 
	// A transition from color (R, G, B) to color (R', G', B') is called good if all components differ by at most d2 units (formally, |R - R'| <= d2, |G - G'| <= d2, |B - B'| <= d2) and at least one component differs by at least d1 units (formally, at least one of the conditions |R - R'| >= d1, |G - G'| >= d1, |B - B'| >= d1 holds). Intuitively, a transition between two colors is called good if they are neither too similar, nor too different.
	// 
	// After coloring the top side Arthur is wondering how many different options there are now for the color of the bottom side of the frisbee.
	// 
	// Given ints maxR, maxG, maxB, startR, startG, startB, d1, and d2, return the number of valid colors that make a good transition from the color (startR, startG, startB).
	// 
	// DEFINITION
	// Class:RandomColoringDiv2
	// Method:getCount
	// Parameters:int, int, int, int, int, int, int, int
	// Returns:int
	// Method signature:int getCount(int maxR, int maxG, int maxB, int startR, int startG, int startB, int d1, int d2)
	// 
	// 
	// CONSTRAINTS
	// -maxR, maxG and maxB will each be between 1 and 100, inclusive.
	// -startR will be between 0 and maxR-1, inclusive.
	// -startG will be between 0 and maxG-1, inclusive.
	// -startB will be between 0 and maxB-1, inclusive.
	// -d1 and d2 will each be between 0 and 100, inclusive.
	// -d1 will be less than or equal to d2.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 5
	// 1
	// 1
	// 2
	// 0
	// 0
	// 0
	// 1
	// 
	// Returns: 3
	// 
	// Only the R component can change here. It has to change by at least 0 and at most 1. Thus the colors that make a good transition from color (2, 0, 0) here are (1, 0, 0), (2, 0, 0), and (3, 0, 0).
	// 
	// 1)
	// 4
	// 2
	// 2
	// 0
	// 0
	// 0
	// 3
	// 3
	// 
	// Returns: 4
	// 
	// Colors that make a good transition from color (0, 0, 0) here are (3, 0, 0), (3, 0, 1), (3, 1, 0), and (3, 1, 1).
	// 
	// 2)
	// 4
	// 2
	// 2
	// 0
	// 0
	// 0
	// 5
	// 5
	// 
	// Returns: 0
	// 
	// At least one component has to change by 5. There exists no color that makes a good transition from color (0, 0, 0) within the respective maxR, maxG, maxB constraints.
	// 
	// 3)
	// 6
	// 9
	// 10
	// 1
	// 2
	// 3
	// 0
	// 10
	// 
	// Returns: 540
	// 
	// All valid colors make a good transition from color (1, 2, 3).
	// 
	// 4)
	// 6
	// 9
	// 10
	// 1
	// 2
	// 3
	// 4
	// 10
	// 
	// Returns: 330
	// 
	// 
	// 
	// 5)
	// 49
	// 59
	// 53
	// 12
	// 23
	// 13
	// 11
	// 22
	// 
	// Returns: 47439
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
