import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class FoldingPaper2 {
    public int solve(int W, int H, int A) {
        List<Integer> wList = new ArrayList<>();
        List<Integer> hList = new ArrayList<>();

        for (int i = 1; i * i <= A; i++) {
            if (A % i == 0) {
                wList.add(A / i);
                hList.add(i);
            }
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < wList.size(); i++) {
            int w = wList.get(i);
            int h = hList.get(i);
            if (w <= W && h <= H) {
                res = Math.min(res, getFold(w, W) + getFold(h, H) );
            }
            if (h <= W && w <= H) {
                res = Math.min(res, getFold(h, W) + getFold(h, H) );
            }
        }
        if (res == Integer.MAX_VALUE)
            return -1;
        return res;
    }
    int getFold(int a, int b) {
        int fold = 0;
        while (b > a) {
            b = (b + 1) / 2;
            fold++;
        }
        return fold;
    }
    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, boolean hasAnswer, int p3) {
        System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
        System.out.println("]");
        FoldingPaper2 obj;
        int answer;
        obj = new FoldingPaper2();
        long startTime = System.currentTimeMillis();
        answer = obj.solve(p0, p1, p2);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p3);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p3;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int p0;
        int p1;
        int p2;
        int p3;

        // ----- test 3 -----
        p0 = 127;
        p1 = 129;
        p2 = 72;
        p3 = 8;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
        // ----- test 0 -----
        p0 = 536870912;
        p1 = 536870912;
        p2 = 2;
        p3 = 57;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
        // ----- test 0 -----
        p0 = 84;
        p1 = 286;
        p2 = 3003;
        p3 = 3;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 0 -----
        p0 = 775;
        p1 = 279;
        p2 = 225;
        p3 = 10;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
        // ----- test 0 -----
        p0 = 103;
        p1 = 201;
        p2 = 10403;
        p3 = 1;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 0 -----
        p0 = 5;
        p1 = 3;
        p2 = 12;
        p3 = 1;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 2;
        p1 = 2;
        p2 = 3;
        p3 = -1;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 4;
        p1 = 4;
        p2 = 1;
        p3 = 4;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = 1;
        p1 = 100000;
        p2 = 100000;
        p3 = 0;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = 1;
        p1 = 1;
        p2 = 2;
        p3 = -1;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    //
    // You have a rectangular piece of paper.
    // Its dimensions are W times H.
    // You want to have a paper with area A instead.
    // Therefore, you decided to fold the paper you have.
    // In each step you can fold the paper according to a straight line.
    // There are two restrictions: First, that line must always be parallel to one of the rectangle's sides.
    // Second, after each fold both dimensions of the new rectangle must be integers again.
    //
    //
    //
    // For example, suppose that your paper is 5 units wide and 3 units tall.
    // If you fold it according to a vertical line that is 4 units to the right of its left side, you will obtain a rectangle that is 4 units wide and 3 units tall.
    // If you fold it according to a horizontal line that is 1 unit below the top of the rectangle, you will get a rectangle that is 5 units wide and 2 units tall.
    //
    //
    //
    // You are given the ints W, H, and A.
    // If it is impossible to fold the paper into a valid rectangle with area A, return -1.
    // Otherwise, return the smallest number of times you need to fold the paper.
    //
    //
    // DEFINITION
    // Class:FoldingPaper2
    // Method:solve
    // Parameters:int, int, int
    // Returns:int
    // Method signature:int solve(int W, int H, int A)
    //
    //
    // CONSTRAINTS
    // -H, W will be between 1 and 1,000,000,000, inclusive.
    // -A will be between 1 and 100,000, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // 5
    // 3
    // 12
    //
    // Returns: 1
    //
    // The solution in this case is the first example mentioned above.
    //
    // 1)
    // 2
    // 2
    // 3
    //
    // Returns: -1
    //
    // A 2x2 square cannot be folded into a rectangle with area 3. Note that a rectangle that is 1.5 units wide and 2 units tall is not a solution: both dimensions of all rectangles you produce must be integers.
    //
    // 2)
    // 4
    // 4
    // 1
    //
    // Returns: 4
    //
    //
    //
    // 3)
    // 127
    // 129
    // 72
    //
    // Returns: 8
    //
    //
    //
    // 4)
    // 1
    // 100000
    // 100000
    //
    // Returns: 0
    //
    // The paper already has the desired area, so no folding is necessary.
    //
    // 5)
    // 1
    // 1
    // 2
    //
    // Returns: -1
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
