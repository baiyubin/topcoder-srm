import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

/**
 * SRM 604
 */
public class FoxConnection2 {
    static int MOD = 1000000007;
    boolean[][] linked;
    int n, want;
    long[][] dp;
    long ans;
    /**
     * DFS + DP on tree
     * 4-dimension dp
     *     (currPos, remainFox, startChild, endChild)
     *     how is the state defined? what will make the transition?
     * @param  A [description]
     * @param  B [description]
     * @param  k [description]
     * @return   [description]
     */
    public int ways(int[] A, int[] B, int k) {
        n = A.length + 1;
        linked = new boolean[n + 1][n + 1];
        dp = new long[n + 1][n + 1];
        for (int i = 0; i < A.length; ++i) {
            linked[A[i]][B[i]] = true;
            linked[B[i]][A[i]] = true;
        }
        for (long[] arr : dp) {
            Arrays.fill(arr, -1);
        }
        want = k;
        ans = 0;
        dfs(1, -1);
        return (int) ans;
    }
    private void dfs(int cur, int from) {
        long[] ret = new long[n + 1];
        ret[1] = 1;
        for (int i = 1; i <= n; ++i) {
            if (linked[cur][i]) {
                if (i == from) continue; // this makes it dfs
                dfs(i, cur);
                long[] nextRet = new long[n + 1];
                for (int j = 0; j <= n; ++j) {
                    for (int k = 0; k <= j; ++k) {
                        nextRet[j] = (nextRet[j] + ret[j - k] * dp[i][k]) % MOD;
                    }
                }
                for (int j = 0; j <= n; ++j) {
                    ret[j] = nextRet[j];
                }
            }
        }
        ret[0] = (ret[0] + 1) % MOD;
        for (int i = 0; i <= n; ++i) {
            dp[cur][i] = ret[i];
        }
        ans = (ans + dp[cur][want]) % MOD; // every node for once
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int p2, boolean hasAnswer, int p3) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}" + "," + p2);
        System.out.println("]");
        FoxConnection2 obj;
        int answer;
        obj = new FoxConnection2();
        long startTime = System.currentTimeMillis();
        answer = obj.ways(p0, p1, p2);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p3);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p3;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int[] p1;
        int p2;
        int p3;

        // ----- test 0 -----
        p0 = new int[] {1, 2, 3};
        p1 = new int[] {2, 3, 4};
        p2 = 2;
        p3 = 3;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] {1, 1, 1, 1};
        p1 = new int[] {2, 3, 4, 5};
        p2 = 3;
        p3 = 6;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] {1, 2, 3, 4};
        p1 = new int[] {2, 3, 4, 5};
        p2 = 3;
        p3 = 3;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] {1, 2, 2, 4, 4};
        p1 = new int[] {2, 3, 4, 5, 6};
        p2 = 3;
        p3 = 6;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new int[] {1, 2, 2, 4, 4};
        p1 = new int[] {2, 3, 4, 5, 6};
        p2 = 5;
        p3 = 4;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = new int[] {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        p1 = new int[] {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40};
        p2 = 20;
        p3 = 923263934;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 6 -----
        p0 = new int[] {2};
        p1 = new int[] {1};
        p2 = 1;
        p3 = 2;
        all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
