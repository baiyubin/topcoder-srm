import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class FoxAndSouvenirTheNext
{
	public String ableToSplit(int[] value)
	{
		int total = 0;
        for (int v : value) total += v;
        if (total % 2 == 1 || value.length % 2 == 1) return "Impossible";
        boolean[][] possible = new boolean[value.length / 2 + 1][total + 1];
        possible[0][0] = true;
        for (int pos = 0; pos < value.length; pos++) {
            for (int step = 1; step <= value.length / 2; step++) {
                for (int v = 1; v <= total / 2; v++) {
                    if (v - value[pos] >= 0 && possible[step - 1][v - value[pos]]) {
                        possible[step][v] = true;
                    }
                }
            }
        }
        return possible[value.length / 2][total / 2] ? "Possible" : "Impossible";
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		FoxAndSouvenirTheNext obj;
		String answer;
		obj = new FoxAndSouvenirTheNext();
		long startTime = System.currentTimeMillis();
		answer = obj.ableToSplit(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		String p1;

        p0 = new int[] {23, 15, 29, 19, 16, 16, 29, 29, 13, 19, 14, 23, 25, 25, 21};
        p1 = "Impossible";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;

		// ----- test 0 -----
		p0 = new int[]{1,2,3,4};
		p1 = "Possible";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{1,1,1,3};
		p1 = "Impossible";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------


		// ----- test 2 -----
		p0 = new int[]{1,1,2,3,5,8};
		p1 = "Possible";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{2,3,5,7,11,13};
		p1 = "Impossible";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48};
		p1 = "Possible";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50};
		p1 = "Impossible";
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Fox Ciel just returned home from her trip to New Fox City.
	// She has brought a bunch of souvenirs.
	// You are given their values in a int[] value.
	// 
	// 
	// Now she wants to give each souvenir either to her mother or to her father.
	// She would like to divide the souvenirs in a fair way.
	// More precisely:
	// 
	// The total number of souvenirs given to her mother must be the same as the total number of souvenirs given to her father.
	// At the same time, the total value of souvenirs given to her mother must be the same as the total value of souvenirs given to her father.
	// 
	// 
	// 
	// Return "Possible" if she can reach her goal, and "Impossible" otherwise.
	// 
	// DEFINITION
	// Class:FoxAndSouvenirTheNext
	// Method:ableToSplit
	// Parameters:int[]
	// Returns:String
	// Method signature:String ableToSplit(int[] value)
	// 
	// 
	// CONSTRAINTS
	// -value will contain between 1 and 50 elements, inclusive.
	// -Each element in value will be between 1 and 50, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1,2,3,4}
	// 
	// Returns: "Possible"
	// 
	// One valid solution is to give the souvenirs with values 1 and 4 to her mother and the other two to her father. Each parent receives two souvenirs, and as 1+4 = 2+3, the total value is also the same for both parents.
	// 
	// 1)
	// {1,1,1,3}
	// 
	// Returns: "Impossible"
	// 
	// There is no valid solution. Note that {1,1,1} and {3} is not a valid way to split the souvenirs: even though the total value is the same, the number of souvenirs is not.
	// 
	// 2)
	// {1,1,2,3,5,8}
	// 
	// Returns: "Possible"
	// 
	// We have 1+1+8 = 2+3+5.
	// 
	// 3)
	// {2,3,5,7,11,13}
	// 
	// Returns: "Impossible"
	// 
	// The sum of values is an odd number, so it is impossible.
	// 
	// 4)
	// {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48}
	// 
	// Returns: "Possible"
	// 
	// 
	// 
	// 5)
	// {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50}
	// 
	// Returns: "Impossible"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
