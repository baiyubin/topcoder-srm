import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ShufflingCardsDiv2
{
	public String shuffle(int[] permutation)
	{
		int n = permutation.length / 2;
        // before last interleave
        int[] first = new int[n];
        int[] second = new int[n];
        for (int i = 0; i < n; i++) {
            first[i] = permutation[2 * i];
            second[i] = permutation[2 * i + 1];
        }
        boolean ret = true;
        // make the odd parity the first half, even parity second half
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0 && first[i] > n) {
                boolean found = false;
                for (int j = i + 1; j < n; j+= 2) {
                    if (first[j] <= n) {
                        found = true;
                        int t = first[i];
                        first[i] = first[j];
                        first[j] = t;
                        break;
                    }
                }
                if (!found) {
                    ret = false;
                    break;
                }
            } else if (i % 2 == 1 && first[i] <= n) {
                boolean found = false;
                for (int j = i + 1; j < n; j+= 2) {
                    if (first[j] > n) {
                        found = true;
                        int t = first[i];
                        first[i] = first[j];
                        first[j] = t;
                        break;
                    }
                }
                if (!found) {
                    ret = false;
                    break;
                }
            }
        }
        for (int i = n; i < 2 * n; i++) {
            if (i % 2 == 0 && second[i % n] > n) {
                boolean found = false;
                for (int j = i + 1; j < 2 * n; j+= 2) {
                    if (second[j % n] <= n) {
                        found = true;
                        int t = second[i % n];
                        second[i % n] = second[j % n];
                        second[j % n] = t;
                        break;
                    }
                }
                if (!found) {
                    ret = false;
                    break;
                }
            } else if (i % 2 == 1 && second[i % n] <= n) {
                boolean found = false;
                for (int j = i + 1; j < 2 * n; j+= 2) {
                    if (second[j % n] > n) {
                        found = true;
                        int t = second[i % n];
                        second[i % n] = second[j % n];
                        second[j % n] = t;
                        break;
                    }
                }
                if (!found) {
                    ret = false;
                    break;
                }
            }
        }
        // return if possible
        return ret ? "Possible" : "Impossible";
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, String p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		ShufflingCardsDiv2 obj;
		String answer;
		obj = new ShufflingCardsDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.shuffle(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p1 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p1);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		String p1;
		
		// ----- test 0 -----
//		p0 = new int[]{1,2,3,4};
//		p1 = "Possible";
//		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{4,3,2,1};
		p1 = "Possible";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{1,3,2,4};
		p1 = "Impossible";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{1,4,2,5,3,6};
		p1 = "Impossible";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{8,5,4,9,1,7,6,10,3,2};
		p1 = "Possible";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Fox Ciel likes shuffling cards.
	// She uses a deck with 2N cards, numbered 1 through 2N.
	// 
	// Ciel always uses the same procedure when shuffling.
	// One round of shuffling looks as follows:
	// 
	// She splits the deck into two piles: the top N cards will be pile A, the bottom N cards pile B.
	// She takes pile A and rearranges the cards it contains arbitrarily.
	// She takes pile B and rearranges the cards it contains arbitrarily.
	// She interleaves the cards from the two piles, producing a single deck again. More precisely, if pile A has cards A1,A2,...,AN and pile B has cards B1,B2,...,BN then the new deck will be A1,B1,A2,B2,...,AN,BN. (Note that the first card has to come from pile A.)
	// 
	// 
	// For example, let N=2 and suppose that Ciel starts with the sorted deck 1,2,3,4.
	// One possible round of shuffling looks as follows:
	// 
	// She splits the deck into two piles: the cards 1,2 are pile A and the cards 3,4 are pile B.
	// She rearranges pile A into 1,2. (I.e., she keeps the cards in their current order.)
	// She rearranges pile B into 4,3.
	// She merges the two piles, obtaining the deck 1,4,2,3.
	// 
	// 
	// In the above example we have shown one of four possible outcomes of the shuffling process.
	// After the first round of shuffling, Ciel could have that deck in one of these four orders:
	// 
	// 1,3,2,4
	// 1,4,2,3
	// 2,3,1,4
	// 2,4,1,3
	// 
	// 
	// You are given a int[] permutation which contains a permutation of the 2N cards.
	// Ciel's deck is currently sorted: the cards are in the order 1,2,3,...,2N from top to bottom.
	// Ciel wants to make exactly two rounds of shuffling.
	// After the second round the order of cards in her deck should correspond to the given permutation.
	// Return "Possible" (quotes for clarity) if this can be done and "Impossible" otherwise.
	// 
	// DEFINITION
	// Class:ShufflingCardsDiv2
	// Method:shuffle
	// Parameters:int[]
	// Returns:String
	// Method signature:String shuffle(int[] permutation)
	// 
	// 
	// CONSTRAINTS
	// -permutation will contain between 4 and 200 elements, inclusive.
	// -The number of elements in permutation will be even.
	// -The elements of permutation will form a permutation of the numbers 1 through 2N, where 2N is the number of elements in permutation.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1,2,3,4}
	// 
	// Returns: "Possible"
	// 
	// Fox Ciel can make the following two shuffles: {1,2,3,4} -> {1,3,2,4} -> {1,2,3,4}.
	// 
	// Note that she cannot simply keep the deck in sorted order, the shuffling procedure does not allow that.
	// Luckily for Ciel, it is possible to shuffle the deck in the first round and to return the cards to their original places in the second round.
	// 
	// 1)
	// {4,3,2,1}
	// 
	// Returns: "Possible"
	// 
	// 
	// 
	// 2)
	// {1,3,2,4}
	// 
	// Returns: "Impossible"
	// 
	// Ciel can produce this permutation after the first round of shuffling.
	// However, it is not possible to start with a sorted deck and to have this permutation of cards after two rounds of shuffling.
	// 
	// 
	// 3)
	// {1,4,2,5,3,6}
	// 
	// Returns: "Impossible"
	// 
	// 
	// 
	// 4)
	// {8,5,4,9,1,7,6,10,3,2}
	// 
	// Returns: "Possible"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
