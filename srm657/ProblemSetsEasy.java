import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ProblemSetsEasy
{
	public int maxSets(int E, int EM, int M, int MH, int H)
	{
		int left = 0, right = E + EM + 1;
		while (left < right) {
			int mid = left + (right - left) / 2;
			if (valid(mid, E, EM, M, MH, H)) {
				left = mid + 1;
			} else {
				right = mid;
			}
		}
		return left - 1;	
	}
	private boolean valid(int t, int e, int em, int m, int mh, int h) {
		if (e < t) {
			if ( e + em < t) {
				return false;
			} else {
				em = e + em - t;
			}
		}
		if (em + m < t) {
			if (em + m + mh < t) {
				return false;
			} else {
				mh = em + m + mh - t;
			}
		}
		return mh + h >= t;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, boolean hasAnswer, int p5) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3 + "," + p4);
		System.out.println("]");
		ProblemSetsEasy obj;
		int answer;
		obj = new ProblemSetsEasy();
		long startTime = System.currentTimeMillis();
		answer = obj.maxSets(p0, p1, p2, p3, p4);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p5);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p5;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		int p4;
		int p5;
		
		// ----- test 3 -----
		p0 = 1;
		p1 = 2;
		p2 = 3;
		p3 = 4;
		p4 = 5;
		p5 = 3;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 0 -----
		p0 = 2;
		p1 = 2;
		p2 = 1;
		p3 = 2;
		p4 = 2;
		p5 = 3;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 100;
		p1 = 100;
		p2 = 100;
		p3 = 0;
		p4 = 0;
		p5 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 657;
		p1 = 657;
		p2 = 657;
		p3 = 657;
		p4 = 657;
		p5 = 1095;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 100000;
		p1 = 100000;
		p2 = 100000;
		p3 = 100000;
		p4 = 100000;
		p5 = 166666;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Cat Snuke came up with some problems. He wants to construct as many problem sets as possible using those problems.
	// 
	// Each problem set must contain exactly three problems: one for the Easy slot, one for the Medium slot, and one for the Hard slot. Each problem can only be assigned to a single slot in a single problem set. He came up with E + EM + M + MH + H problems in total. The distribution of the problems is as follows:
	// 
	// 
	// E problems can only be used in the Easy slot.
	// EM problems can be used either in the Easy slot or the Medium slot.
	// M problems can only be used in the Medium slot.
	// MH problems can be used either in the Medium slot or the Hard slot.
	// H problems can only be used in the Hard slot.
	// 
	// 
	// Return the maximal number of problem sets he can construct.
	// 
	// DEFINITION
	// Class:ProblemSetsEasy
	// Method:maxSets
	// Parameters:int, int, int, int, int
	// Returns:int
	// Method signature:int maxSets(int E, int EM, int M, int MH, int H)
	// 
	// 
	// CONSTRAINTS
	// -E, EM, M, MH, H must be between 0 and 100000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 2
	// 2
	// 1
	// 2
	// 2
	// 
	// Returns: 3
	// 
	// One of EM problems should be used for the Easy slot, and the other should be used for the Medium slot.
	// One of MH problems should be used for the Medium slot, and the other should be used for the Hard slot.
	// 
	// 1)
	// 100
	// 100
	// 100
	// 0
	// 0
	// 
	// Returns: 0
	// 
	// Unfortunately, no problem can be used for the Hard slot.
	// 
	// 2)
	// 657
	// 657
	// 657
	// 657
	// 657
	// 
	// Returns: 1095
	// 
	// 
	// 
	// 3)
	// 1
	// 2
	// 3
	// 4
	// 5
	// 
	// Returns: 3
	// 
	// 
	// 
	// 4)
	// 100000
	// 100000
	// 100000
	// 100000
	// 100000
	// 
	// Returns: 166666
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
