public class PathGameDiv2 {
    /**
     * SRM 637
     *
     * @param board
     * @return
     */
    public int calc(String[] board) {
        int n = board[0].length();
        int[][] dp = new int[n + 1][4];
        for (int[] arr : dp) {
            Arrays.fill(arr, -1);
        }
        Arrays.fill(dp[0], 0);
        for (int i = 1; i <= n; i++) {

            if (board[0].charAt(i - 1) == '.' && board[1].charAt(i - 1) == '.') {
                dp[i][0] = Math.max(dp[i - 1][0], dp[i][0]);
                dp[i][0] = Math.max(dp[i - 1][1], dp[i][0]);
                dp[i][0] = Math.max(dp[i - 1][2], dp[i][0]);

                dp[i][1] = Math.max(dp[i - 1][0] + 1, dp[i][1]);
                dp[i][2] = Math.max(dp[i - 1][0] + 1, dp[i][2]);
                dp[i][1] = Math.max(dp[i - 1][1] + 1, dp[i][1]);
                dp[i][2] = Math.max(dp[i - 1][2] + 1, dp[i][2]);
            } else if (board[0].charAt(i - 1) == '.' ) {
                dp[i][2] = Math.max(dp[i - 1][0], dp[i][2]);
                dp[i][2] = Math.max(dp[i - 1][2], dp[i][2]);
            } else {
                dp[i][1] = Math.max(dp[i - 1][0], dp[i][1]);
                dp[i][1] = Math.max(dp[i - 1][1], dp[i][1]);
            }
        }
        int ret = 0;
        for (int i = 0; i < 3; i++) {
            ret = Math.max(ret, dp[n][i]);
        }
        return ret;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}");
        System.out.println("]");
        PathGameDiv2 obj;
        int answer;
        obj = new PathGameDiv2();
        long startTime = System.currentTimeMillis();
        answer = obj.calc(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p1);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p1;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String[] p0;
        int p1;

        // ----- test 0 -----
        p0 = new String[] {"#....", "...#."};
        p1 = 2;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new String[] {"#", "."};
        p1 = 0;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new String[] {".", "."};
        p1 = 1;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new String[] {"....#.##.....#...........", "..#......#.......#..#...."};
        p1 = 13;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // Cat Snuke is playing the Path Game.
    //
    // The Path Game is played on a rectangular grid of square cells.
    // The grid has 2 rows and some positive number of columns.
    // Each cell is either black or white.
    //
    // A left-to-right path in the grid is a sequence of white cells such that the first cell in the sequence is in the leftmost column, the last cell in the sequence is in the rightmost column, and each pair of consecutive cells shares a common side.
    //
    // The initial coloring of the grid is such that there is at least one left-to-right path.
    // You are given this initial coloring as a String[] board with two elements.
    // For each i and j, board[i][j] is either '#' (representing a black cell) or '.' (representing a white cell).
    //
    // Snuke may color some of the white cells black.
    // After he does so, there must still be at least one left-to-right path left on the board.
    // The goal of the game is to color as many cells black as possible.
    // Compute and return the largest number of cells Snuke can color black.
    // (Note that the cells that are already black do not count.)
    //
    // DEFINITION
    // Class:PathGameDiv2
    // Method:calc
    // Parameters:String[]
    // Returns:int
    // Method signature:int calc(String[] board)
    //
    //
    // CONSTRAINTS
    // -board will contain 2 elements.
    // -Each element in board will contain between 1 and 50 characters, inclusive.
    // -All elements in board will have the same length.
    // -Each character in board will be '#' or '.'.
    // -The grid described by board will contain a left-to-right path.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {"#...."
    // ,"...#."}
    //
    // Returns: 2
    //
    // Snuke can color at most two white cells black.
    // One possible final state of the board looks as follows:
    //
    // #....
    // ..###
    //
    //
    // 1)
    // {"#"
    // ,"."}
    //
    // Returns: 0
    //
    // Snuke can't color any cells.
    //
    // 2)
    // {"."
    // ,"."}
    //
    // Returns: 1
    //
    //
    //
    // 3)
    // {"....#.##.....#..........."
    // ,"..#......#.......#..#...."}
    //
    // Returns: 13
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
