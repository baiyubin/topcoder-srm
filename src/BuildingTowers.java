import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class BuildingTowers {
    /**
     * srm 647
     *      greedy, self-consistent solution 
     *      binary search for final solution in intervals
     * @param N
     * @param K
     * @param x
     * @param t
     * @return
     */
    public long maxHeight(int N, int K, int[] x, int[] t) {
        int len = x.length;
        long[] xx = new long[len + 2];
        long[] tt = new long[len + 2];
        xx[0] = 1;
        tt[0] = 0;
        for (int i = 0; i < len; ++i) {
            xx[i + 1] = x[i];
            tt[i + 1] = t[i];
        }
        xx[len + 1] = N;
        tt[len + 1] = 1L * K * (N - 1);

        long ans = 0L;
        for (boolean changed = true; changed; ) {
            changed = false;
            // make sure limits are good
            for (int i = 0; i < xx.length; ++i) {
                for (int j = i + 1; j < xx.length; ++j) {
                    long diff = (xx[j] - xx[i]) * K;
                    if (Math.abs(tt[i] - tt[j]) > diff) {
                        changed = true;
                        tt[i] = Math.min(tt[i], tt[j] + diff);
                        tt[j] = Math.min(tt[j], tt[i] + diff);
                    }
                }
            }
        }

        // look for potential max height
        // binary search between each limit interval
        for (int i = 1; i < xx.length; ++i) {
            long left = tt[i - 1], right = tt[i - 1] + (xx[i] - xx[i - 1]) * K;
            while (left < right) {
                long mid = (left + right + 1) / 2;
                long stepsNeeded = (mid - tt[i - 1] + K - 1) / K;
                long allSteps = xx[i] - xx[i - 1];
                long remainSteps = allSteps - stepsNeeded;
                if (mid - remainSteps * K <= tt[i]) {
                    left = mid;
                } else {
                    right = mid - 1;
                }
            }
            ans = Math.max(ans, left);
        }
        return ans;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int[] p2, int[] p3, boolean hasAnswer, long p4) {
        System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + "{");
        for (int i = 0; p2.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p2[i]);
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p3.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p3[i]);
        }
        System.out.print("}");
        System.out.println("]");
        BuildingTowers obj;
        long answer;
        obj = new BuildingTowers();
        long startTime = System.currentTimeMillis();
        answer = obj.maxHeight(p0, p1, p2, p3);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p4);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p4;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int p0;
        int p1;
        int[] p2;
        int[] p3;
        long p4;

        // ----- test 0 -----
        p0 = 10;
        p1 = 1;
        p2 = new int[] {3, 8};
        p3 = new int[] {1, 1};
        p4 = 3L;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 1000000000;
        p1 = 1000000000;
        p2 = new int[] {};
        p3 = new int[] {};
        p4 = 999999999000000000L;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 20;
        p1 = 3;
        p2 = new int[] {4, 7, 13, 15, 18};
        p3 = new int[] {8, 22, 1, 55, 42};
        p4 = 22L;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = 780;
        p1 = 547990606;
        p2 = new int[] {34, 35, 48, 86, 110, 170, 275, 288, 313, 321, 344, 373, 390, 410, 412, 441, 499, 525, 538, 568, 585, 627, 630, 671, 692, 699, 719, 752, 755, 764, 772};
        p3 = new int[] {89, 81, 88, 42, 55, 92, 19, 91, 71, 42, 72, 18, 86, 89, 88, 75, 29, 98, 63, 74, 45, 11, 68, 34, 94, 20, 69, 33, 50, 69, 54};
        p4 = 28495511604L;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = 7824078;
        p1 = 2374;
        p2 = new int[] {134668, 488112, 558756, 590300, 787884, 868112, 1550116, 1681439, 1790994, 1796091, 1906637, 2005485, 2152813, 2171716, 2255697, 2332732, 2516853, 2749024, 2922558, 2930163, 3568190, 3882735, 4264888, 5080550, 5167938, 5249191, 5574341, 5866912, 5936121, 6142348, 6164177, 6176113, 6434368, 6552905, 6588059, 6628843, 6744163, 6760794, 6982172, 7080464, 7175493, 7249044};
        p3 = new int[] {8, 9, 171315129, 52304509, 1090062, 476157338, 245, 6, 253638067, 37, 500, 29060, 106246500, 129, 22402, 939993108, 7375, 2365707, 40098, 10200444, 3193547, 55597, 24920935, 905027, 1374, 12396141, 525886, 41, 33, 3692, 11502, 180, 3186, 5560, 778988, 42449532, 269666, 10982579, 48, 3994, 1, 9};
        p4 = 1365130725L;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    //
    // The citizens of Byteland want to build N new buildings.
    // The new buildings will all stand in a line and they will be labeled 1 through N, in order.
    // The city regulations impose some restrictions on the heights of the new buildings.
    // You are given the parameters used in these restrictions: an int K and two int[]s x and t.
    // The restrictions are described below.
    //
    //
    // The height of each building must be a nonnegative integer.
    // The height of building 1 must be 0.
    // The absolute value of the difference between any two adjacent buildings must be at most K.
    // For each valid i, the height of building x[i] must be t[i] or less.
    //
    //
    //
    //
    // Given these restrictions, the citizens of Byteland want to build a building that will be as tall as possible.
    // Return the largest possible height some of the N buildings may have.
    //
    //
    // DEFINITION
    // Class:BuildingTowers
    // Method:maxHeight
    // Parameters:int, int, int[], int[]
    // Returns:long
    // Method signature:long maxHeight(int N, int K, int[] x, int[] t)
    //
    //
    // CONSTRAINTS
    // -N will be between 1 and 1,000,000,000, inclusive.
    // -K will be between 1 and 1,000,000,000, inclusive.
    // -x will contain between 0 and min(N,500) elements, inclusive.
    // -t will have exactly the same number of elements as x
    // -Each element of x will be between 1 and N, inclusive.
    // -x[i] < x[i+1] for all valid i.
    // -Each element of t will be between 1 and 1,000,000,000, inclusive.
    //
    //
    // EXAMPLES
    //
    // 0)
    // 10
    // 1
    // {3,8}
    // {1,1}
    //
    // Returns: 3
    //
    //
    // In this case we are going to build 10 buildings.
    // The difference in height between adjacent buildings is at most 1.
    // We also have two additional constraints: the height of building 3 can be at most 1, and the height of building 8 can also be at most 1.
    // The tallest possible new building in this city can have height 3.
    // One optimal skyline looks as follows: {0,1,1,2,3,3,2,1,1,0}.
    //
    //
    // 1)
    // 1000000000
    // 1000000000
    // {}
    // {}
    //
    // Returns: 999999999000000000
    //
    // There are no additional constraints so, for each valid i, the height of building i can be (i-1)*1000000000.
    //
    // 2)
    // 20
    // 3
    // {4,7,13,15,18}
    // {8,22,1,55,42}
    //
    // Returns: 22
    //
    //
    //
    // 3)
    // 780
    // 547990606
    // {34,35,48,86,110,170,275,288,313,321,344,373,390,410,412,441,499,525,538,568,585,627,630,671,692,699,719,752,755,764,772}
    // {89,81,88,42,55,92,19,91,71,42,72,18,86,89,88,75,29,98,63,74,45,11,68,34,94,20,69,33,50,69,54}
    //
    // Returns: 28495511604
    //
    //
    //
    // 4)
    // 7824078
    // 2374
    // {134668,488112,558756,590300,787884,868112,1550116,1681439,1790994,
    // 1796091,1906637,2005485,2152813,2171716,2255697,2332732,2516853,
    // 2749024,2922558,2930163,3568190,3882735,4264888,5080550,5167938,
    // 5249191,5574341,5866912,5936121,6142348,6164177,6176113,6434368,
    // 6552905,6588059,6628843,6744163,6760794,6982172,7080464,7175493,
    // 7249044}
    // {8,9,171315129,52304509,1090062,476157338,245,6,253638067,37,500,
    // 29060,106246500,129,22402,939993108,7375,2365707,40098,10200444,
    // 3193547,55597,24920935,905027,1374,12396141,525886,41,33,3692,
    // 11502,180,3186,5560,778988,42449532,269666,10982579,48,3994,1,9}
    //
    // Returns: 1365130725
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
