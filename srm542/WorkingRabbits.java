import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class WorkingRabbits {
    public double getEfficiency(String[] profit) {
        double p = 0.0;
        int n = profit.length;
        for (String s : profit) {
            for (char c : s.toCharArray()) {
                p += c - '0';
            }
        }
        return p / ( n * (n - 1));
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, double p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}");
        System.out.println("]");
        WorkingRabbits obj;
        double answer;
        obj = new WorkingRabbits();
        long startTime = System.currentTimeMillis();
        answer = obj.getEfficiency(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p1);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == answer && Math.abs(p1 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p1));
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String[] p0;
        double p1;

        // ----- test 0 -----
        p0 = new String[] {"071", "702", "120"};
        p1 = 3.3333333333333335D;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new String[] {"00", "00"};
        p1 = 0.0D;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new String[] {"0999", "9099", "9909", "9990"};
        p1 = 9.0D;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new String[] {"013040", "100010", "300060", "000008", "416000", "000800"};
        p1 = 1.5333333333333334D;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new String[] {"06390061", "60960062", "39090270", "96900262", "00000212", "00222026", "66761201", "12022610"};
        p1 = 3.2142857142857144D;
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // N rabbits (numbered 0 through N - 1) are going to work together at the new TopCoder office in Rabbitland.
    //
    // Each pair of rabbits will make a certain profit when they work together.
    // The efficiency of the group of rabbits is defined as follows:
    // Let P be the sum of profits from all pairs of rabbits, and Q be the number of pairs of rabbits.
    // Then the efficiency is the real number P / Q.
    //
    // You are given a String[] profit,
    // the j-th character of the i-th element of which represents the profit from the fact that rabbits i and j work together.
    // The characters '0', '1', ..., '9' represent the values 0, 1, ..., 9, respectively.
    // Compute and return the efficiency of this TopCoder office.
    //
    //
    // DEFINITION
    // Class:WorkingRabbits
    // Method:getEfficiency
    // Parameters:String[]
    // Returns:double
    // Method signature:double getEfficiency(String[] profit)
    //
    //
    // NOTES
    // -The returned value must have an absolute or relative error less than 1e-9.
    //
    //
    // CONSTRAINTS
    // -profit will contain between 2 and 50 elements, inclusive.
    // -Each element of profit will contain exactly N characters, where N is the number of elements in profit.
    // -Each character in each element of profit will be a digit ('0' - '9').
    // -For each index i and j, the i-th character of the j-th element of profit will be equal to the j-th character of the i-th element of profit.
    // -For each index i, the i-th character of the i-th element of profit will be '0'.
    //
    //
    // EXAMPLES
    //
    // 0)
    // { "071",
    //   "702",
    //   "120" }
    //
    //
    // Returns: 3.3333333333333335
    //
    // There are three pairs of rabbits:
    //
    //  rabbit 0 and rabbit 1 (profit 7)
    //  rabbit 0 and rabbit 2 (profit 1)
    //  rabbit 1 and rabbit 2 (profit 2)
    //
    // So P = 7 + 1 + 2, Q = 3, and the efficiency is P / Q = 10/3.
    //
    //
    // 1)
    // { "00",
    //   "00" }
    //
    //
    // Returns: 0.0
    //
    //
    //
    // 2)
    // { "0999",
    //   "9099",
    //   "9909",
    //   "9990" }
    //
    //
    // Returns: 9.0
    //
    //
    //
    // 3)
    // { "013040",
    //   "100010",
    //   "300060",
    //   "000008",
    //   "416000",
    //   "000800" }
    //
    //
    // Returns: 1.5333333333333334
    //
    //
    //
    // 4)
    // { "06390061",
    //   "60960062",
    //   "39090270",
    //   "96900262",
    //   "00000212",
    //   "00222026",
    //   "66761201",
    //   "12022610" }
    //
    //
    // Returns: 3.2142857142857144
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
