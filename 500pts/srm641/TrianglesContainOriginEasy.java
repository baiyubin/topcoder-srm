import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TrianglesContainOriginEasy {
    public int count(int[] x, int[] y) {
        int ret = 0;
        int n = x.length;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    if (isTriangle(x[i], y[i], x[j], y[j], x[k], y[k])
                            && zeroInside(x[i], y[i], x[j], y[j], x[k], y[k])) {
                        ret++;
                    }
                }
            }
        }
        return ret;
    }

    private double sign(int xi, int yi, int xj, int yj, int xk, int yk) {
        return (xi - xk) * (yj - yk) - (xj - xk) * (yi - yk);
    }

    private boolean zeroInside(int xi, int yi, int xj, int yj, int xk, int yk) {

        boolean b1, b2, b3;

        b1 = sign(0, 0, xi, yi, xj, yj) < 0.0;
        b2 = sign(0, 0, xj, yj, xk, yk) < 0.0;
        b3 = sign(0, 0, xk, yk, xi, yi) < 0.0;

        return ((b1 == b2) && (b2 == b3));
    }

    private boolean isTriangle(int xi, int yi, int xj, int yj, int xk, int yk) {
        double[] d = new double[3];
        d[0] = Math.hypot(1.0 * (xi - xj), 1.0 * (yi - yj));
        d[1] = Math.hypot(1.0 * (xj - xk), 1.0 * (yj - yk));
        d[2] = Math.hypot(1.0 * (xk - xi), 1.0 * (yk - yi));
        Arrays.sort(d);
        return d[0] + d[1] > d[2];
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}");
        System.out.println("]");
        TrianglesContainOriginEasy obj;
        int answer;
        obj = new TrianglesContainOriginEasy();
        long startTime = System.currentTimeMillis();
        answer = obj.count(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p2);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p2;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int[] p1;
        int p2;

        // ----- test 0 -----
        p0 = new int[] { -1, -1, 1};
        p1 = new int[] {1, -1, 0};
        p2 = 1;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] { -1, -1, 1, 2};
        p1 = new int[] {1, -1, 2, -1};
        p2 = 2;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] { -1, -2, 3, 3, 2, 1};
        p1 = new int[] { -2, -1, 1, 2, 3, 3};
        p2 = 8;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] {1, 5, 10, 5, -5, 7, -9, -6, -3, 0, 8, 8, 1, -4, 7, -3, 10, 9, -6};
        p1 = new int[] {5, -6, -3, 4, -2, -8, -7, 2, 7, 4, 2, 0, -4, -8, 7, 5, -5, -2, -9};
        p2 = 256;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // We have chosen a finite set of points in the plane.
    // You are given their coordinates in the int[]s x and y:
    // for each valid i, there is a point with coordinates (x[i],y[i]).
    //
    // We are interested in triangles with the following properties:
    //
    // Each vertex of the triangle is one of our chosen points.
    // The point (0,0) lies inside the triangle.
    //
    // Return the number of such triangles.
    //
    // Note that the constraints guarantee that there are no degenerate triangles and that the point (0,0) never lies on the boundary of a triangle.
    //
    //
    // DEFINITION
    // Class:TrianglesContainOriginEasy
    // Method:count
    // Parameters:int[], int[]
    // Returns:int
    // Method signature:int count(int[] x, int[] y)
    //
    //
    // CONSTRAINTS
    // -x and y will contain between 3 and 50 elements, inclusive.
    // -x and y will contain the same number of elements.
    // -Each element of x and y will be between -1,000 and 1,000, inclusive.
    // -No two points will be the same.
    // -No three points will be collinear.
    // -No point will be on the origin.
    // -There will be no two points P and Q such that P, Q, and the origin are collinear.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {-1,-1,1}
    // {1,-1,0}
    //
    // Returns: 1
    //
    // There is exactly one possible triangle. It does contain the origin.
    //
    // 1)
    // {-1,-1,1,2}
    // {1,-1,2,-1}
    //
    // Returns: 2
    //
    // There are four possible triangles. Two of them contain the origin. One is the triangle with vertices in (-1,1), (-1,-1), and (2,-1). The other is the triangle with vertices in (-1,-1), (1,2), and (2,-1).
    //
    // 2)
    // {-1,-2,3,3,2,1}
    // {-2,-1,1,2,3,3}
    //
    // Returns: 8
    //
    //
    //
    // 3)
    // {1,5,10,5,-5,7,-9,-6,-3,0,8,8,1,-4,7,-3,10,9,-6}
    // {5,-6,-3,4,-2,-8,-7,2,7,4,2,0,-4,-8,7,5,-5,-2,-9}
    //
    // Returns: 256
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
