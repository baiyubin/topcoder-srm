import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class FoxAndFlowerShopDivTwo
{
	public int theMaxFlowers(String[] flowers, int r, int c)
	{
		int ret = 0;
        int n = flowers.length, m = flowers[0].length();
        int currRet;

        currRet = 0;
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < m; j++) {
                currRet += (flowers[i].charAt(j) == 'F') ? 1 : 0;
            }
        }
        ret = Math.max(ret, currRet);

        currRet = 0;
        for (int i = r + 1; i < n; i++) {
            for (int j = 0; j < m; j++) {
                currRet += (flowers[i].charAt(j) == 'F') ? 1 : 0;
            }
        }
        ret = Math.max(ret, currRet);

        currRet = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < c; j++) {
                currRet += (flowers[i].charAt(j) == 'F') ? 1 : 0;
            }
        }
        ret = Math.max(ret, currRet);

        currRet = 0;
        for (int i = 0; i < n; i++) {
            for (int j = c + 1; j < m; j++) {
                currRet += (flowers[i].charAt(j) == 'F') ? 1 : 0;
            }
        }
        ret = Math.max(ret, currRet);

        return ret;
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}" + "," + p1 + "," + p2);
		System.out.println("]");
		FoxAndFlowerShopDivTwo obj;
		int answer;
		obj = new FoxAndFlowerShopDivTwo();
		long startTime = System.currentTimeMillis();
		answer = obj.theMaxFlowers(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String[] p0;
		int p1;
		int p2;
		int p3;
		
		// ----- test 0 -----
		p0 = new String[]{"F.F",".F.",".F."};
		p1 = 1;
		p2 = 1;
		p3 = 2;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new String[]{"F..","...","..."};
		p1 = 0;
		p2 = 0;
		p3 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new String[]{".FF.F.F","FF...F.","..FF.FF"};
		p1 = 1;
		p2 = 2;
		p3 = 6;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new String[]{"F",".","F","F","F",".","F","F"};
		p1 = 4;
		p2 = 0;
		p3 = 3;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new String[]{".FFF..F...","FFF...FF.F","..F.F.F.FF","FF..F.FFF.","..FFFFF...","F....FF...",".FF.FF..FF","..F.F.FFF.",".FF..F.F.F","F.FFF.FF.F"};
		p1 = 4;
		p2 = 3;
		p3 = 32;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// Fox Jiro came to a flower shop to buy flowers.
	// The flowers in the shop are arranged in some cells of a rectangular grid.
	// The layout of the grid is given as a String[] flowers.
	// If the j-th cell of the i-th row of the grid contains a flower, then the j-th character of the i-th element of flowers will be 'F'.
	// (All indices in the previous sentence are 0-based.)
	// If the particular cell is empty, the corresponding character will be '.' (a period).
	// 
	// In order to buy flowers, Jiro has to draw a rectangle on this grid and buy all the flowers which lie inside the rectangle.
	// Of course, the sides of the rectangle must be on cell boundaries.
	// (Therefore, the sides of the rectangle will necessarily be parallel to the coordinate axes.)
	// 
	// Jiro wants to buy as many flowers as possible.
	// Unfortunately, he cannot select the entire grid.
	// Eel Saburo came to this shop before Jiro.
	// Saburo has already drawn his rectangle.
	// Saburo's rectangle contains just a single cell: the c-th cell of the r-th row of the grid.
	// (Again, both indices are 0-based.)
	// Jiro's rectangle may not contain this cell.
	// 
	// You are given the String[] flowers and the ints r and c.
	// Return the maximum possible number of flowers Jiro can buy in this situation.
	// 
	// DEFINITION
	// Class:FoxAndFlowerShopDivTwo
	// Method:theMaxFlowers
	// Parameters:String[], int, int
	// Returns:int
	// Method signature:int theMaxFlowers(String[] flowers, int r, int c)
	// 
	// 
	// CONSTRAINTS
	// -flowers will contain R elements.
	// -R will be between 2 and 10, inclusive.
	// -Each element of flowers will contain C characters.
	// -C will be between 1 and 10, inclusive.
	// -Each character in flowers will be either 'F' or '.'.
	// -r will be between 0 and R - 1, inclusive.
	// -c will be between 0 and C - 1, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {"F.F",
	//  ".F.",
	//  ".F."}
	// 1
	// 1
	// 
	// Returns: 2
	// 
	// The forbidden cell is the one in the middle. Jiro can buy two flowers by drawing a rectangle that contains the entire first row.
	// 
	// 1)
	// {"F..",
	//  "...",
	//  "..."}
	// 0
	// 0
	// 
	// Returns: 0
	// 
	// There are no flowers Jiro can buy.
	// 
	// 2)
	// {".FF.F.F",
	//  "FF...F.",
	//  "..FF.FF"}
	// 1
	// 2
	// 
	// Returns: 6
	// 
	// 
	// 
	// 3)
	// {"F",
	//  ".",
	//  "F",
	//  "F",
	//  "F",
	//  ".",
	//  "F",
	//  "F"}
	// 4
	// 0
	// 
	// Returns: 3
	// 
	// 
	// 
	// 4)
	// {".FFF..F...",
	//  "FFF...FF.F",
	//  "..F.F.F.FF",
	//  "FF..F.FFF.",
	//  "..FFFFF...",
	//  "F....FF...",
	//  ".FF.FF..FF",
	//  "..F.F.FFF.",
	//  ".FF..F.F.F",
	//  "F.FFF.FF.F"}
	// 4
	// 3
	// 
	// Returns: 32
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
