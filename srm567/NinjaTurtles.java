import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class NinjaTurtles
{
	public int countOpponents(int P, int K)
	{
        for (int n = 0; n < 6000000; n++) {
            if ( 3 * (n / K) + n / 3 == P) return n;
        }
        return -1;
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		NinjaTurtles obj;
		int answer;
		obj = new NinjaTurtles();
		long startTime = System.currentTimeMillis();
		answer = obj.countOpponents(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		p0 = 5;
		p1 = 4;
		p2 = 6;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 1;
		p1 = 4;
		p2 = 3;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 13;
		p1 = 6;
		p2 = -1;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 13;
		p1 = 17;
		p2 = 30;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 122;
		p1 = 21;
		p2 = 258;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// The Ninja Turtles often battle the Foot Clan ninjas. The Turtles celebrate each victory with a pizza party. The amount of pizza they eat depends on the number of opponents they have defeated. Denote the number of defeated opponents as N. Three of the four Turtles have a moderate appetite and only consume floor(N / K) pizzas each. The fourth Turtle is always hungry and eats floor(N / 3) pizzas.
	// 
	// 
	// 
	// You are given ints P and K, where P is the total number of pizzas the Turtles ate after a battle. If there exists at least one value of N such that after defeating N opponents the Turtles would eat exactly P pizzas at the party, return the smallest such N. Otherwise, return -1.
	// 
	// DEFINITION
	// Class:NinjaTurtles
	// Method:countOpponents
	// Parameters:int, int
	// Returns:int
	// Method signature:int countOpponents(int P, int K)
	// 
	// 
	// NOTES
	// -floor(X) is equal to the largest integer which is less or equal to X.
	// 
	// 
	// CONSTRAINTS
	// -P will be between 1 and 1,000,000, inclusive.
	// -K will be between 4 and 100, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 5
	// 4
	// 
	// Returns: 6
	// 
	// If the Turtles defeated 6 opponents, three of the four Turtles would eat floor(6 / 4) = 1 pizza each and the fourth one would eat floor(6 / 3) = 2 pizzas, which makes 5 pizzas in total.
	// Note that you always have to return the smallest possible N. For example, in this scenario for N = 7 the Turtles would also eat 5 pizzas, but 7 is not a correct return value, because 6 is less than 7.
	// 
	// 1)
	// 1
	// 4
	// 
	// Returns: 3
	// 
	// After a fight with three opponents, only the hungry Turtle would eat a pizza.
	// 
	// 2)
	// 13
	// 6
	// 
	// Returns: -1
	// 
	// There is no value of N such that if the Turtles battle N opponents, they eat exactly 13 pizzas for K = 6.
	// 
	// 3)
	// 13
	// 17
	// 
	// Returns: 30
	// 
	// For K = 17, after defeating 30 opponents the Turtles will eat 13 pizzas in total.
	// 
	// 4)
	// 122
	// 21
	// 
	// Returns: 258
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
