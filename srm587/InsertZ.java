import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class InsertZ
{
	public String canTransform(String init, String goal)
	{
        StringBuilder sb = new StringBuilder();
        for (char c : goal.toCharArray()) {
            if (c != 'z') sb.append(c);
        }
        return init.equals(sb.toString()) ? "Yes" : "No";
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, String p1, boolean hasAnswer, String p2) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + "\"" + p1 + "\"");
		System.out.println("]");
		InsertZ obj;
		String answer;
		obj = new InsertZ();
		long startTime = System.currentTimeMillis();
		answer = obj.canTransform(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + "\"" + p2 + "\"");
		}
		System.out.println("Your answer:");
		System.out.println("\t" + "\"" + answer + "\"");
		if (hasAnswer) {
			res = answer.equals(p2);
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		String p1;
		String p2;
		
		// ----- test 0 -----
		p0 = "fox";
		p1 = "fozx";
		p2 = "Yes";
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "fox";
		p1 = "zfzoxzz";
		p2 = "Yes";
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "foon";
		p1 = "foon";
		p2 = "Yes";
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "topcoder";
		p1 = "zopzoder";
		p2 = "No";
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "aaaaaaaaaa";
		p1 = "a";
		p2 = "No";
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = "mvixrdnrpxowkasufnvxaq";
		p1 = "mvizzxzzzrdzznzrpxozzwzzkazzzszzuzzfnvxzzzazzq";
		p2 = "Yes";
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 6 -----
		p0 = "opdlfmvuicjsierjowdvnx";
		p1 = "zzopzdlfmvzuicjzzsizzeijzowvznxzz";
		p2 = "No";
		all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// You are given two Strings: init and goal.
	// Both init and goal contain lowercase letters only.
	// Additionally, init does not contain the character 'z'.
	// 
	// 
	// Your goal is to transform init into goal.
	// The only operation you are allowed to do is to insert the character 'z' anywhere into init.
	// You can repeat the operation as many times as you want, and each time you can choose any position where to insert the 'z'.
	// 
	// 
	// For example, if init="fox", you can transform it to "fzox" in one operation.
	// Alternately, you can transform "fox" into "zzzfoxzzz" in six operations.
	// It is not possible to transform "fox" into any of the strings "fx", "foz", "fxo", "foxy".
	// 
	// 
	// Return "Yes" (quotes for clarity) if it is possible to transform init into goal.
	// Otherwise, return "No".
	// 
	// 
	// 
	// DEFINITION
	// Class:InsertZ
	// Method:canTransform
	// Parameters:String, String
	// Returns:String
	// Method signature:String canTransform(String init, String goal)
	// 
	// 
	// NOTES
	// -Note that the return value is case sensitive.
	// 
	// 
	// CONSTRAINTS
	// -init and goal will each contain between 1 and 50 characters, inclusive.
	// -Each character of init and goal will be a lowercase letter ('a'-'z').
	// -init will not contain the letter 'z'.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "fox"
	// "fozx"
	// 
	// Returns: "Yes"
	// 
	// By inserting 'z' to the position bettween 'o' and 'x' in "fox", we obtain "fozx".
	// 
	// 1)
	// "fox"
	// "zfzoxzz"
	// 
	// Returns: "Yes"
	// 
	// You may perform the operation multiple times.
	// 
	// 2)
	// "foon"
	// "foon"
	// 
	// Returns: "Yes"
	// 
	// In this case init and goal are equal. You do not have to perform the operation.
	// 
	// 3)
	// "topcoder"
	// "zopzoder"
	// 
	// Returns: "No"
	// 
	// 
	// 
	// 4)
	// "aaaaaaaaaa"
	// "a"
	// 
	// Returns: "No"
	// 
	// 
	// 
	// 5)
	// "mvixrdnrpxowkasufnvxaq"
	// "mvizzxzzzrdzznzrpxozzwzzkazzzszzuzzfnvxzzzazzq"
	// 
	// Returns: "Yes"
	// 
	// 
	// 
	// 6)
	// "opdlfmvuicjsierjowdvnx"
	// "zzopzdlfmvzuicjzzsizzeijzowvznxzz"
	// 
	// Returns: "No"
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
