import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class TorusSailingEasy {
    int[][] days;
    double[][] prob;
    boolean[][] visited;
    int n, m;
    public double expectedTime(int N, int M, int goalX, int goalY) {
        this.n = N;
        this.m = M;
        days = new int[N][M];
        prob = new double[N][M];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                days[i][j] = Integer.MAX_VALUE;
            }
        }
        days[goalX][goalY] = 0;
        visited = new boolean[N][M];
        dp(goalX, goalY);
        if (!visited[0][0]) {
            return -1.0;
        } else {
            return 0.0;
        }
    }
    public void dp(int i, int j) {
        if (visited[i][j]) return;
        visited[i][j] = true;
        int i1 = (i + 1) % n;
        int j1 = (j + 1) % m;
        int i2 = (i - 1 + n) % n;
        int j2 = (j - 1 + m) % m;
        dp(i1, j1);
        dp(i2, j2);
        days[i1][j1] = days[i][j] + 1;
        days[i2][j2] = days[i][j] + 1;
    }
    public boolean hasProb(int i, int j) {
        if (visited[i][j]) return prob[i][j] != 0.0;
        visited[i][j] = true;
        int i1 = (i + 1) % n;
        int j1 = (j + 1) % m;
        int i2 = (i - 1 + n) % n;
        int j2 = (j - 1 + m) % m;
        if (hasProb(i1, j1) && hasProb(i2, j2)) {
            prob[i][j] = 1 + 0.5 * prob[i1][j1] + 0.5 * prob[i2][j2];
            return true;
        } else {
            return false;
        }
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, boolean hasAnswer, double p4) {
        System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2 + "," + p3);
        System.out.println("]");
        TorusSailingEasy obj;
        double answer;
        obj = new TorusSailingEasy();
        long startTime = System.currentTimeMillis();
        answer = obj.expectedTime(p0, p1, p2, p3);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p4);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == answer && Math.abs(p4 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p4));
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int p0;
        int p1;
        int p2;
        int p3;
        double p4;

        // ----- test 0 -----
        p0 = 2;
        p1 = 2;
        p2 = 1;
        p3 = 1;
        p4 = 1.0D;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = 2;
        p1 = 2;
        p2 = 0;
        p3 = 1;
        p4 = -1.0D;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = 3;
        p1 = 3;
        p2 = 1;
        p3 = 1;
        p4 = 2.0D;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = 4;
        p1 = 6;
        p2 = 1;
        p3 = 3;
        p4 = 27.0D;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
