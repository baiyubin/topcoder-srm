import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

/**
 * srm656
 */
public class PermutationCountsDiv2 {
	boolean[] sm;
	long result = 0L;
	static int MOD = (int) (1e9 + 7);
	public int countPermutations(int N, int[] pos) {
		sm = new boolean[N];
		for (int p : pos) {
			sm[p - 1] = true;
		}
		int[][] dp = new int[N + 1][N + 1];
		// dp[i][j]
		// num ways to fill in first i numbers 1..i with last == j
		dp[1][1] = 1;
		for (int i = 2; i <= N; i++) {
			for (int last = 1; last <= i; last++) {
				if (sm[i - 2]) {
					for (int j = last - 1; j >= 1; j--) {
						dp[i][last] += dp[i - 1][j];
						dp[i][last] %= MOD;
					}
				} else {
					for (int j = last; j <= i; j++) {
						dp[i][last] += dp[i - 1][j];
						dp[i][last] %= MOD;
					}

				}
			}
		}
		int res = 0;
		for (int curr : dp[N]) {
			res += curr;
			res %= MOD;
		}
		return res;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}");
		System.out.println("]");
		PermutationCountsDiv2 obj;
		int answer;
		obj = new PermutationCountsDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.countPermutations(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int p0;
		int[] p1;
		int p2;

		// ----- test 0 -----
		p0 = 2;
		p1 = new int[] {};
		p2 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 0 -----
		p0 = 5;
		p1 = new int[] {3};
		p2 = 9;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = 13;
		p1 = new int[] {12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
		p2 = 1;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = 13;
		p1 = new int[] {};
		p2 = 1;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = 9;
		p1 = new int[] {2, 4, 5};
		p2 = 1421;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = 80;
		p1 = new int[] {31, 41, 59, 26, 53, 58, 9, 79, 32, 3, 8, 46};
		p2 = 82650786;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	//
	// You are given an int N and a int[] pos.
	// We are interested in some permutations of the set {1,2,...,N}.
	// A permutation p is called good if the following condition is satisfied:
	// for each valid k, we have p(k) < p(k+1) if and only if k is an element of pos.
	//
	//
	//
	// Return the number of good permutations, modulo 1,000,000,007.
	//
	//
	// DEFINITION
	// Class:PermutationCountsDiv2
	// Method:countPermutations
	// Parameters:int, int[]
	// Returns:int
	// Method signature:int countPermutations(int N, int[] pos)
	//
	//
	// CONSTRAINTS
	// -N will be between 1 and 200, inclusive.
	// -pos will contain between 1 and N-1 elements, inclusive.
	// -Elements of pos will be distinct.
	// -Each element of pos will be between 1 and N-1, inclusive.
	//
	//
	// EXAMPLES
	//
	// 0)
	// 5
	// {3}
	//
	// Returns: 9
	//
	//
	// Given that pos = {3}, we are looking for permutations where p(1) > p(2), p(2) > p(3), p(3) < p(4), and p(4) > p(5).
	// Thus, the good permutations are the following ones:
	//
	//
	//
	//
	//  {3,2,1,5,4}
	//  {4,2,1,5,3}
	//  {4,3,1,5,2}
	//  {4,3,2,5,1}
	//  {5,2,1,4,3}
	//  {5,3,1,4,2}
	//  {5,3,2,4,1}
	//  {5,4,1,3,2}
	//  {5,4,2,3,1}
	//
	//
	//
	// Here, the notation {3,2,1,5,4} represents the permutation p for which p(1)=3, p(2)=2, p(3)=1, p(4)=5, and p(5)=4.
	//
	//
	// 1)
	// 13
	// {12,11,10,9,8,7,6,5,4,3,2,1}
	//
	// Returns: 1
	//
	//
	//
	// 2)
	// 13
	// {}
	//
	// Returns: 1
	//
	//
	//
	// 3)
	// 9
	// {2,4,5}
	//
	// Returns: 1421
	//
	//
	//
	// 4)
	// 80
	// {31,41,59,26,53,58,9,79,32,3,8,46}
	//
	// Returns: 82650786
	//
	//
	//
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
