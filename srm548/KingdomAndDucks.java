import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class KingdomAndDucks
{
	public int minDucks(int[] duckTypes)
	{
		int[] count = new int[60];
        for (int i = 0; i < duckTypes.length; i++) {
            count[duckTypes[i]]++;
        }
        int nTypes = 0;
        int max = Integer.MIN_VALUE;
        for (int c : count) {
            if (c > 0) nTypes++;
            max = Math.max(max, c);
        }
        return nTypes * max;
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		KingdomAndDucks obj;
		int answer;
		obj = new KingdomAndDucks();
		long startTime = System.currentTimeMillis();
		answer = obj.minDucks(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int p1;
		
		// ----- test 0 -----
		p0 = new int[]{5,8};
		p1 = 2;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{4,7,4,7,4};
		p1 = 6;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{17,17,19,23,23,19,19,17,17};
		p1 = 12;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{50};
		p1 = 1;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{10,10,10,10,10};
		p1 = 5;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// King Dengklek received a container full of ducks as his birthday gift from his loyal subjects. Each duck is of a specific type, represented by an integer between 1 and 50, inclusive. He was told that the container contains the same number of ducks of each type that is present in the container.
	// 
	// King Dengklek wants to guess the total number of ducks in the container. He removed some of the ducks from the container and examined their types. These types are given in int[] duckTypes, where duckTypes[i] is the type of the i-th duck (0-based index) King Dengklek picked.
	// 
	// Compute and return the total number of ducks in the container in the beginning (before King Dengklek removed some of them). If there are multiple possibilities, return the smallest one.
	// 
	// DEFINITION
	// Class:KingdomAndDucks
	// Method:minDucks
	// Parameters:int[]
	// Returns:int
	// Method signature:int minDucks(int[] duckTypes)
	// 
	// 
	// CONSTRAINTS
	// -duckTypes will contain between 1 and 50 elements, inclusive.
	// -Each element of duckTypes will be between 1 and 50, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {5, 8}
	// 
	// Returns: 2
	// 
	// The container might have contained one duck of each of types 5 and 8.
	// 
	// 1)
	// {4, 7, 4, 7, 4}
	// 
	// Returns: 6
	// 
	// The container might have contained three ducks of each of types 4 and 7.
	// 
	// 2)
	// {17, 17, 19, 23, 23, 19, 19, 17, 17}
	// 
	// Returns: 12
	// 
	// 
	// 
	// 3)
	// {50}
	// 
	// Returns: 1
	// 
	// The container might have contained only one duck of type 50.
	// 
	// 4)
	// {10, 10, 10, 10, 10}
	// 
	// Returns: 5
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
