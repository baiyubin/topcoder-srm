import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class GreaterGameDiv2 {
    /**
     * SRM 637
     * @param snuke
     * @param sothe
     * @return
     */
    public int calc(int[] snuke, int[] sothe) {
        int ret = 0;
        for (int i = 0; i < snuke.length; i++) {
            if (snuke[i] > sothe[i]) ret++;
        }
        return ret;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, boolean hasAnswer, int p2) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}");
        System.out.println("]");
        GreaterGameDiv2 obj;
        int answer;
        obj = new GreaterGameDiv2();
        long startTime = System.currentTimeMillis();
        answer = obj.calc(p0, p1);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p2);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p2;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int[] p1;
        int p2;

        // ----- test 0 -----
        p0 = new int[] {1,3};
        p1 = new int[] {4,2};
        p2 = 1;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[] {1,3,5,7,9};
        p1 = new int[] {2,4,6,8,10};
        p2 = 0;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[] {2};
        p1 = new int[] {1};
        p2 = 1;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[] {3,5,9,16,14,20,15,17,13,2};
        p1 = new int[] {6,18,1,8,7,10,11,19,12,4};
        p2 = 6;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // Cat Snuke and wolf Sothe are playing the Greater Game.
    // The game is played with cards.
    // Each card has a number written on it.
    // There are 2N cards.
    // The numbers on the cards are the integers between 1 and 2N, inclusive.
    //
    // At the beginning of the game, each player gets N of the cards and chooses the order in which he wants to play them.
    // The game then consists of N turns.
    // In each turn, both players play one of their cards simultaneously.
    // The player who revealed the card with the larger number gets a point.
    //
    // You are given two int[]s: snuke and sothe.
    // The elements of snuke are the numbers on the cards Snuke is going to play, in order.
    // Similarly, the elements of sothe are the numbers on the cards Sothe is going to play, in order.
    // Compute and return the number of points Snuke will have at the end of the game.
    //
    // DEFINITION
    // Class:GreaterGameDiv2
    // Method:calc
    // Parameters:int[], int[]
    // Returns:int
    // Method signature:int calc(int[] snuke, int[] sothe)
    //
    //
    // CONSTRAINTS
    // -N will be between 1 and 50, inclusive.
    // -snuke and sothe will contain exactly N elements each.
    // -Each integer in snuke and sothe will be between 1 and 2N, inclusive.
    // -The integers in snuke and sothe will be distinct.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {1,3}
    // {4,2}
    //
    // Returns: 1
    //
    // Snuke loses the first round because 1 is less than 4. Snuke then wins the second round because 3 is greater than 2.
    //
    // 1)
    // {1,3,5,7,9}
    // {2,4,6,8,10}
    //
    // Returns: 0
    //
    //
    //
    // 2)
    // {2}
    // {1}
    //
    // Returns: 1
    //
    //
    //
    // 3)
    // {3,5,9,16,14,20,15,17,13,2}
    // {6,18,1,8,7,10,11,19,12,4}
    //
    // Returns: 6
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
