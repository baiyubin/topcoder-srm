import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

/**
 * srm600
 */
public class PalindromeMatrixDiv2 {
    int n, m;
    int[][] a = new int[8][8];
    boolean[][] seen;

    public int minChange(String[] A, int rowCount, int columnCount) {
        n = A.length;
        m = A[0].length();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                a[i][j] = A[i].charAt(j) - '0';
            }
        }
        int ret = (int) 1e9;
        for (int rowMask = 0; rowMask < (1 << n); ++rowMask) {
            if (Integer.bitCount(rowMask) != rowCount) {
                continue;
            }
            for (int colMask = 0; colMask < (1 << m); ++colMask) {
                if (Integer.bitCount(colMask) != columnCount) {
                    continue;
                }
                int tret = 0;
                seen = new boolean[8][8];
                for (int r = 0; r < n; r++)
                    for (int c = 0; c < m; c++) {
                        int[] count = new int[] {0, 0};
                        dfs(rowMask, colMask, r, c, count);
                        tret += Math.min(count[0], count[1]);
                    }

                ret = Math.min(ret, tret);
            }
        }
        return ret;
    }
    private void dfs(int rowMask, int colMask, int r, int c, int[] count) {
        if (seen[r][c]) return;
        seen[r][c] = true;
        count[a[r][c]]++;
        if ((rowMask & (1 << r)) != 0) dfs(rowMask, colMask, r, m - c - 1, count);
        if ((colMask & (1 << c)) != 0) dfs(rowMask, colMask, n - r - 1, c, count);
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0, int p1, int p2, boolean hasAnswer, int p3) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}" + "," + p1 + "," + p2);
        System.out.println("]");
        PalindromeMatrixDiv2 obj;
        int answer;
        obj = new PalindromeMatrixDiv2();
        long startTime = System.currentTimeMillis();
        answer = obj.minChange(p0, p1, p2);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p3);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p3;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String[] p0;
        int p1;
        int p2;
        int p3;

        // ----- test 0 -----
        p0 = new String[] {"0000", "1000", "1100", "1110"};
        p1 = 2;
        p2 = 2;
        p3 = 1;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new String[] {"0000", "1000", "1100", "1110"};
        p1 = 3;
        p2 = 2;
        p3 = 3;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new String[] {"01", "10"};
        p1 = 1;
        p2 = 1;
        p3 = 1;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new String[] {"1110", "0001"};
        p1 = 0;
        p2 = 0;
        p3 = 0;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new String[] {"01010101", "01010101", "01010101", "01010101", "01010101", "01010101", "01010101", "01010101"};
        p1 = 2;
        p2 = 2;
        p3 = 8;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // PROBLEM STATEMENT
    // Note that the memory limit for all tasks in this SRM is 256 MB.
    //
    //
    // Fox Ciel has a matrix A that consists of N rows by M columns.
    // Both N and M are even.
    // Each element of the matrix is either 0 or 1.
    // The rows of the matrix are numbered 0 through N-1 from top to bottom, the columns are numbered 0 through M-1 from left to right.
    // The element in row i, column j is denoted A(i, j).
    // You are given a String[] A that describes the matrix A.
    // The character A[i][j] is '1' if A(i, j)=1 and it is '0' otherwise.
    //
    //
    //
    // A palindrome is a string that reads the same forwards and backwards.
    // For example, "1001" and "0111001110" are palindromes while "1101" and "000001" are not.
    //
    //
    //
    // Some rows and some columns in Ciel's matrix may be palindromes.
    // For example, in the matrix below both row 0 and column 3 are palindromes.
    // (Row 0 is the palindrome "0000", column 3 is the palindrome "0110".)
    //
    //
    // 0000
    // 0011
    // 0111
    // 1110
    //
    //
    //
    // You are also given two ints: rowCount and columnCount.
    // Ciel wants her matrix A to have at least rowCount rows that are palindromes, and at the same time at least columnCount columns that are palindromes.
    // If this is currently not the case, she can change A by changing some of the elements (from '0' to '1' or vice versa).
    // Compute and return the smallest possible number of elements she needs to change in order to reach her goal.
    //
    //
    //
    // DEFINITION
    // Class:PalindromeMatrixDiv2
    // Method:minChange
    // Parameters:String[], int, int
    // Returns:int
    // Method signature:int minChange(String[] A, int rowCount, int columnCount)
    //
    //
    // CONSTRAINTS
    // -N and M will be between 2 and 8, inclusive.
    // -N and M will be even.
    // -A will contain N elements.
    // -Each element of A will contain M characters.
    // -Each character of A will be either '0' or '1'.
    // -rowCount will be between 0 and N.
    // -columnCount will be between 0 and M.
    //
    //
    // EXAMPLES
    //
    // 0)
    // {"0000"
    // ,"1000"
    // ,"1100"
    // ,"1110"}
    // 2
    // 2
    //
    // Returns: 1
    //
    // An optimal solution is to change A(3, 0) to 0. Then we will have palindromes in two rows (0 and 3), and in two columns (0 and 3).
    //
    //
    // 1)
    // {"0000"
    // ,"1000"
    // ,"1100"
    // ,"1110"}
    // 3
    // 2
    //
    // Returns: 3
    //
    // This is similar to the previous example, but in this case we must have three row palindromes.
    // An optimal solution is to change A(1, 0), A(2, 0) and A(3, 0) to 0.
    //
    // 2)
    // {"01"
    // ,"10"}
    // 1
    // 1
    //
    // Returns: 1
    //
    //
    //
    // 3)
    // {"1110"
    // ,"0001"}
    // 0
    // 0
    //
    // Returns: 0
    //
    // Here, we do not have to change A at all.
    //
    //
    // 4)
    // {"01010101"
    // ,"01010101"
    // ,"01010101"
    // ,"01010101"
    // ,"01010101"
    // ,"01010101"
    // ,"01010101"
    // ,"01010101"}
    // 2
    // 2
    //
    // Returns: 8
    //
    //
    //
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
