import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ChocolateBar
{
	public int maxLength(String letters)
	{
		boolean[] used = new boolean[27];
        int n = letters.length();
        int ret = 0;
        for (int i = 0; i < n; i++) {
            Arrays.fill(used, false);
            int j = i;
            for (; j < n; j++) {
                int pos = letters.charAt(j) - 'a';
                if (!used[pos]) {
                    used[pos] = true;
                } else {
                    break;
                }
            }
            ret = Math.max(ret, j - i);
        }
        return ret;
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"");
		System.out.println("]");
		ChocolateBar obj;
		int answer;
		obj = new ChocolateBar();
		long startTime = System.currentTimeMillis();
		answer = obj.maxLength(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		String p0;
		int p1;
		
		// ----- test 0 -----
		p0 = "srm";
		p1 = 3;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = "dengklek";
		p1 = 6;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = "haha";
		p1 = 2;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = "www";
		p1 = 1;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = "thisisansrmbeforetopcoderopenfinals";
		p1 = 9;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// You just bought a very delicious chocolate bar from a local store. This chocolate bar consists of N squares, numbered 0 through N-1. All the squares are arranged in a single row. There is a letter carved on each square. You are given a String letters. The i-th character of letters denotes the letter carved on the i-th square (both indices are 0-based).
	// 
	// You want to share this delicious chocolate bar with your best friend. At first, you want to give him the whole bar, but then you remembered that your friend only likes a chocolate bar without repeated letters. Therefore, you want to remove zero or more squares from the beginning of the bar, and then zero or more squares from the end of the bar, in such way that the remaining bar will contain no repeated letters.
	// 
	// Return the maximum possible length of the remaining chocolate bar that contains no repeated letters.
	// 
	// DEFINITION
	// Class:ChocolateBar
	// Method:maxLength
	// Parameters:String
	// Returns:int
	// Method signature:int maxLength(String letters)
	// 
	// 
	// CONSTRAINTS
	// -letters will contain between 1 and 50 characters, inclusive.
	// -Each character of letters will be a lowercase letter ('a' - 'z').
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// "srm"
	// 
	// Returns: 3
	// 
	// You can give the whole chocolate bar as it contains no repeated letters.
	// 
	// 1)
	// "dengklek"
	// 
	// Returns: 6
	// 
	// Remove two squares from the end of the bar.
	// 
	// 2)
	// "haha"
	// 
	// Returns: 2
	// 
	// There are three possible ways:
	// 
	// Remove two squares from the beginning of the bar.
	// Remove two squares from the end of the bar.
	// Remove one square from the beginning of the bar and one square from the end of the bar.
	// 
	// 
	// 3)
	// "www"
	// 
	// Returns: 1
	// 
	// 
	// 
	// 4)
	// "thisisansrmbeforetopcoderopenfinals"
	// 
	// Returns: 9
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
