import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ValueHistogram
{
	public String[] build(int[] values)
	{
		int[] freq = new int[10];
        for (int i : values) {
            freq[i]++;
        }
        int m = 0;
        for (int f : freq) {
            m = Math.max(f, m);
        }
        String[] ret = new String[m + 1];
        for (int i = m; i >= 0; i--) {
            char[] row = new char[10];
            for (int j = 0; j < 10; j++) {
                if (freq[j] > 0) {
                    row[j] = 'X';
                    freq[j]--;
                } else {
                    row[j] = '.';
                }
            }
            ret[i] = new String(row);
        }
        return ret;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, String[] p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		ValueHistogram obj;
		String[] answer;
		obj = new ValueHistogram();
		long startTime = System.currentTimeMillis();
		answer = obj.build(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.print("\t" + "{");
			for (int i = 0; p1.length > i; ++i) {
				if (i > 0) {
					System.out.print(",");
				}
				System.out.print("\"" + p1[i] + "\"");
			}
			System.out.println("}");
		}
		System.out.println("Your answer:");
		System.out.print("\t" + "{");
		for (int i = 0; answer.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + answer[i] + "\"");
		}
		System.out.println("}");
		if (hasAnswer) {
			if (answer.length != p1.length) {
				res = false;
			} else {
				for (int i = 0; answer.length > i; ++i) {
					if (!answer[i].equals(p1[i])) {
						res = false;
					}
				}
			}
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		String[] p1;
		
		// ----- test 0 -----
		p0 = new int[]{2,3,5,5,5,2,0,8};
		p1 = new String[]{"..........",".....X....","..X..X....","X.XX.X..X."};
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{9,9,9,9};
		p1 = new String[]{"..........",".........X",".........X",".........X",".........X"};
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{6,4,0,0,3,9,8,8};
		p1 = new String[]{"..........","X.......X.","X..XX.X.XX"};
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{0,1,2,3,4,5,6,7,8,9};
		p1 = new String[]{"..........","XXXXXXXXXX"};
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{6,2,3,3,3,7,8,1,0,9,2,2,4,3};
		p1 = new String[]{"..........","...X......","..XX......","..XX......","XXXXX.XXXX"};
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// A histogram of a given collection of numbers graphically represents the frequency of each value in the collection. We are given several numbers ranging from 0 to 9 as a int[] values. The goal is to build their histogram according to the following rules.
	// 
	// 1) The width of the histogram should be exactly 10.
	// 
	// 2) The height of the histogram should equal to H+1, where H is the number of times the most frequent element occurs in values.
	// 
	// 3) The i-th (0-based) column of the histogram corresponds to the value i. Let X(i) be the frequency of value i in values. Then the last X(i) characters in the column should be 'X's and the other ones should be '.'s. For example, if value i was not present in values, the column should be filled with '.' characters. If i was present once, the last element of the column should be 'X' and and the other ones should be '.'s. If i was present twice, the last two elements should be 'X's and and the other ones should be '.'s, and so on.
	// 
	// Build the histogram and return it as a String[].
	// 
	// DEFINITION
	// Class:ValueHistogram
	// Method:build
	// Parameters:int[]
	// Returns:String[]
	// Method signature:String[] build(int[] values)
	// 
	// 
	// CONSTRAINTS
	// -values will contain between 1 and 50 elements, inclusive.
	// -Each element of values will be between 0 and 9, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {2, 3, 5, 5, 5, 2, 0, 8}
	// 
	// Returns: {"..........", ".....X....", "..X..X....", "X.XX.X..X." }
	// 
	// The most frequent value is 5, which occurs 3 times. Hence the height of the histogram is 4. It looks as follows:
	// 
	// ..........
	// .....X....
	// ..X..X....
	// X.XX.X..X.
	// 
	// 
	// 1)
	// {9, 9, 9, 9}
	// 
	// Returns: {"..........", ".........X", ".........X", ".........X", ".........X" }
	// 
	// ..........
	// .........X
	// .........X
	// .........X
	// .........X
	// 
	// 2)
	// {6, 4, 0, 0, 3, 9, 8, 8}
	// 
	// Returns: {"..........", "X.......X.", "X..XX.X.XX" }
	// 
	// ..........
	// X.......X.
	// X..XX.X.XX
	// 
	// 3)
	// {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
	// 
	// Returns: {"..........", "XXXXXXXXXX" }
	// 
	// ..........
	// XXXXXXXXXX
	// 
	// 4)
	// {6, 2, 3, 3, 3, 7, 8, 1, 0, 9, 2, 2, 4, 3}
	// 
	// Returns: {"..........", "...X......", "..XX......", "..XX......", "XXXXX.XXXX" }
	// 
	// ..........
	// ...X......
	// ..XX......
	// ..XX......
	// XXXXX.XXXX
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
