import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class ChristmasTreeDecorationDiv2
{
	public int solve(int[] col, int[] x, int[] y)
	{
		int ret = 0;
        int n = x.length;
        for (int i = 0; i < n; i++) {
            if (col[x[i] - 1] != col[y[i] - 1]) ret++;
        }
        return ret;
    }
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int[] p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p1.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p1[i]);
		}
		System.out.print("}" + "," + "{");
		for (int i = 0; p2.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p2[i]);
		}
		System.out.print("}");
		System.out.println("]");
		ChristmasTreeDecorationDiv2 obj;
		int answer;
		obj = new ChristmasTreeDecorationDiv2();
		long startTime = System.currentTimeMillis();
		answer = obj.solve(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int[] p0;
		int[] p1;
		int[] p2;
		int p3;
		
		// ----- test 0 -----
		p0 = new int[]{1,2,3,3};
		p1 = new int[]{1,2,3};
		p2 = new int[]{2,3,4};
		p3 = 2;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = new int[]{1,3,5};
		p1 = new int[]{1,3};
		p2 = new int[]{2,2};
		p3 = 2;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = new int[]{1,1,3,3};
		p1 = new int[]{1,3,2};
		p2 = new int[]{2,1,4};
		p3 = 2;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = new int[]{5,5,5,5};
		p1 = new int[]{1,2,3};
		p2 = new int[]{2,3,4};
		p3 = 0;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = new int[]{9,1,1};
		p1 = new int[]{3,2};
		p2 = new int[]{2,1};
		p3 = 1;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// 
	// Christmas is just around the corner, and Alice just decorated her Christmas tree.
	// There are N stars and N-1 ribbons on the tree.
	// Each ribbon connects two of the stars in such a way that all stars and ribbons hold together.
	// (In other words, the stars and ribbons are the vertices and edges of a tree.)
	// 
	// 
	// 
	// The stars are numbered 1 through N.
	// Additionally, each star has some color.
	// You are given the colors of stars as a int[] col with N elements.
	// For each i, col[i] is the color of star i+1.
	// (Different integers represent different colors.)
	// 
	// 
	// 
	// You are also given a description of the ribbons: two int[]s x and y with N-1 elements each.
	// For each i, there is a ribbon that connects the stars with numbers x[i] and y[i].
	// 
	// 
	// 
	// According to Alice, a ribbon that connects two stars with different colors is beautiful, while a ribbon that connects two same-colored stars is not.
	// Compute and return the number of beautiful ribbons in Alice's tree.
	// 
	// 
	// DEFINITION
	// Class:ChristmasTreeDecorationDiv2
	// Method:solve
	// Parameters:int[], int[], int[]
	// Returns:int
	// Method signature:int solve(int[] col, int[] x, int[] y)
	// 
	// 
	// CONSTRAINTS
	// -N will be between 2 and 50, inclusive.
	// -The number of elements in col will be exactly N.
	// -The number of elements in x will be exactly N - 1.
	// -The number of elements in y will be the same as the number of elements in x.
	// -All elements of x and y will be between 1 and N, inclusive.
	// -For each i, the numbers x[i] and y[i] will be different.
	// -The graph formed by the N-1 ribbons will be connected.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// {1,2,3,3}
	// {1,2,3}
	// {2,3,4}
	// 
	// Returns: 2
	// 
	// There are two beautiful ribbons: the one that connects stars 1 and 2, and the one that connects stars 2 and 3.
	// The other ribbon is not beautiful because stars 3 and 4 have the same color.
	// 
	// 1)
	// {1,3,5}
	// {1,3}
	// {2,2}
	// 
	// Returns: 2
	// 
	// 
	// 
	// 2)
	// {1,1,3,3}
	// {1,3,2}
	// {2,1,4}
	// 
	// Returns: 2
	// 
	// 
	// 
	// 3)
	// {5,5,5,5}
	// {1,2,3}
	// {2,3,4}
	// 
	// Returns: 0
	// 
	// 
	// 
	// 4)
	// {9,1,1}
	// {3,2}
	// {2,1}
	// 
	// Returns: 1
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
