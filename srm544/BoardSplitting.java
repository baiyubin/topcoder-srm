import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class BoardSplitting
{
	public int minimumCuts(int desiredLength, int desiredCount, int actualLength)
	{
        int cut = 0;
        for (int i = 1; i <= desiredCount; i++) {
            if ((i * desiredLength) % actualLength != 0) cut++;
        }
        return cut;
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, boolean hasAnswer, int p3) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
		System.out.println("]");
		BoardSplitting obj;
		int answer;
		obj = new BoardSplitting();
		long startTime = System.currentTimeMillis();
		answer = obj.minimumCuts(p0, p1, p2);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p3);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p3;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		int p3;
		
		// ----- test 0 -----
		p0 = 5;
		p1 = 4;
		p2 = 4;
		p3 = 3;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 6;
		p1 = 100;
		p2 = 3;
		p3 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 500;
		p1 = 5;
		p2 = 1000;
		p3 = 3;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 314;
		p1 = 159;
		p2 = 26;
		p3 = 147;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// PROBLEM STATEMENT
	// A construction company recently ordered some boards of length desiredLength from a lumber company.  By mistake, the lumber company instead delivered boards of length actualLength.  The construction company doesn't have time to reissue the order, so instead they will cut and glue together the boards they have in order to form boards of the proper length.
	// 
	// The construction company needs desiredCount boards of length desiredLength.  The have an effectively unlimited supply of boards of length actualLength.  The construction company wants to use as few boards as possible.  If there are multiple ways to use the same number of boards, they want to perform as few cuts as possible.  Return the number of cuts they will perform.
	// 
	// DEFINITION
	// Class:BoardSplitting
	// Method:minimumCuts
	// Parameters:int, int, int
	// Returns:int
	// Method signature:int minimumCuts(int desiredLength, int desiredCount, int actualLength)
	// 
	// 
	// NOTES
	// -A board is a one-dimensional piece of wood.  A single board of length L may be cut into two boards of length X and Y, provided X > 0, Y > 0, and X + Y = L.  Two boards of length X and Y may be glued together to form a board of length X + Y.
	// 
	// 
	// CONSTRAINTS
	// -desiredLength will be between 1 and 1000, inclusive.
	// -desiredCount will be between 1 and 1000, inclusive.
	// -actualLength will be between 1 and 1000, inclusive.
	// 
	// 
	// EXAMPLES
	// 
	// 0)
	// 5
	// 4
	// 4
	// 
	// Returns: 3
	// 
	// We need 4 boards of length 5 each. We have an unlimited supply of boards of length 4.  One solution is to cut one board into 4 pieces of length 1 each (using 3 cuts), then glue each piece to a board of length 4.
	// 
	// 1)
	// 6
	// 100
	// 3
	// 
	// Returns: 0
	// 
	// No cuts are necessary.
	// 
	// 2)
	// 500
	// 5
	// 1000
	// 
	// Returns: 3
	// 
	// We cut 3 boards in half.
	// 
	// 3)
	// 314
	// 159
	// 26
	// 
	// Returns: 147
	// 
	// 
	// 
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
